<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shelly 3EM Readings Dashboard</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-annotation/3.1.0/chartjs-plugin-annotation.min.js"></script>
    <script src="config-manager.js"></script>
    <script src="device-tracking.js"></script>
    <script src="shelly-discovery.js"></script>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 30%, #0f3460 70%, #1a1a2e 100%);
            background-attachment: fixed;
            min-height: 100vh;
            position: relative;
        }
        
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="0.5" fill="white" opacity="0.03"/><circle cx="75" cy="75" r="0.5" fill="white" opacity="0.03"/><circle cx="50" cy="10" r="0.3" fill="white" opacity="0.05"/><circle cx="20" cy="80" r="0.3" fill="white" opacity="0.05"/><circle cx="80" cy="30" r="0.3" fill="white" opacity="0.05"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
            pointer-events: none;
            z-index: -1;
        }
        
        .container {
           /*  max-width: 1400px; */
              max-width: 100%;
            margin: 0 auto;
        }
        
        .header {
            background: rgba(255, 255, 255, 0.08);
            backdrop-filter: blur(25px);
            -webkit-backdrop-filter: blur(25px);
            border: 1px solid rgba(255, 255, 255, 0.15);
            color: white;
            padding: 30px;
            border-radius: 20px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            position: relative;
            overflow: hidden;
        }
        
        .header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.05) 0%, rgba(255, 255, 255, 0.02) 100%);
            pointer-events: none;
        }
        
        .header h1, .header p {
            position: relative;
            z-index: 1;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }
        
        /* Settings Toggle Button */
        .settings-toggle {
            position: fixed;
            top: 20px;
            left: 20px;
            z-index: 1000;
        }
        
        .settings-toggle-btn {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(15px);
            -webkit-backdrop-filter: blur(15px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: white;
            padding: 12px 20px;
            border-radius: 15px;
            cursor: pointer;
            font-weight: 500;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
            transition: all 0.3s ease;
            font-size: 14px;
        }
        
        .settings-toggle-btn:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(255, 255, 255, 0.2);
        }

        /* Main Controls (Always Visible) */
        .main-controls {
            background: rgba(255, 255, 255, 0.06);
            backdrop-filter: blur(20px);
            -webkit-backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.12);
            padding: 20px 25px;
            border-radius: 20px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.25);
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 20px;
            flex-wrap: wrap;
            position: relative;
            overflow: hidden;
        }
        
        .main-controls::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.03) 0%, rgba(255, 255, 255, 0.01) 100%);
            pointer-events: none;
        }

        /* Device Filter Controls */
        .device-filter-controls {
            background: rgba(255, 255, 255, 0.06);
            backdrop-filter: blur(20px);
            -webkit-backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.12);
            padding: 20px 25px;
            border-radius: 20px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.25);
            position: relative;
            overflow: hidden;
        }
        
        .device-filter-controls::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.03) 0%, rgba(255, 255, 255, 0.01) 100%);
            pointer-events: none;
        }
        
        .filter-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            position: relative;
            z-index: 1;
        }
        
        .filter-header h4 {
            margin: 0;
            color: white;
            font-size: 16px;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
        }
        
        .filter-actions {
            display: flex;
            gap: 10px;
        }
        
        .filter-action-btn {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: white;
            padding: 6px 12px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
        }
        
        .filter-action-btn:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: translateY(-1px);
        }
        
        .device-filter-buttons {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            position: relative;
            z-index: 1;
        }
        
        .device-filter-btn {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: white;
            padding: 8px 16px;
            border-radius: 12px;
            cursor: pointer;
            font-size: 13px;
            font-weight: 500;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            display: flex;
            align-items: center;
            gap: 6px;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
        }
        
        .device-filter-btn:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }
        
        .device-filter-btn.active {
            background: rgba(76, 172, 254, 0.8);
            border-color: rgba(76, 172, 254, 0.6);
            box-shadow: 0 2px 8px rgba(76, 172, 254, 0.3);
        }
        
        .device-filter-btn.active:hover {
            background: rgba(76, 172, 254, 0.9);
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(76, 172, 254, 0.4);
        }
        
        .device-filter-btn.hidden {
            background: rgba(220, 53, 69, 0.6);
            border-color: rgba(220, 53, 69, 0.4);
            opacity: 0.7;
        }
        
        .device-filter-btn.hidden:hover {
            background: rgba(220, 53, 69, 0.8);
            opacity: 1;
        }
        
        .device-color-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            border: 1px solid rgba(255, 255, 255, 0.3);
            flex-shrink: 0;
        }

        /* Custom Legend Styles */
        .custom-legend {
            display: flex;
            align-items: center;
            gap: 20px;
            margin-bottom: 15px;
            padding: 10px 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .legend-item {
            display: flex;
            align-items: center;
            gap: 8px;
            cursor: pointer;
            padding: 5px 10px;
            border-radius: 8px;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .legend-item:hover {
            background: rgba(255, 255, 255, 0.1);
            transform: translateY(-1px);
        }
        
        .legend-item.hidden {
            opacity: 0.5;
            text-decoration: line-through;
        }
        
        .legend-color {
            width: 14px;
            height: 14px;
            border-radius: 50%;
            border: 2px solid rgba(255, 255, 255, 0.3);
            flex-shrink: 0;
        }
        
        .legend-text {
            color: rgba(255, 255, 255, 0.9);
            font-size: 12px;
            font-weight: 500;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
        }

        /* Settings Side Panel */
        .settings-panel {
            position: fixed;
            top: 0;
            left: -400px;
            width: 400px;
            height: 100vh;
            background: rgba(30, 30, 50, 0.95);
            backdrop-filter: blur(25px);
            -webkit-backdrop-filter: blur(25px);
            border-right: 1px solid rgba(255, 255, 255, 0.15);
            box-shadow: 5px 0 25px rgba(0, 0, 0, 0.3);
            z-index: 2000;
            transition: left 0.3s ease;
            overflow-y: auto;
        }
        
        .settings-panel.open {
            left: 0;
        }
        
        .settings-panel-header {
            padding: 25px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: rgba(255, 255, 255, 0.05);
        }
        
        .settings-panel-header h3 {
            margin: 0;
            color: white;
            font-size: 18px;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
        }
        
        .close-settings-btn {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: white;
            width: 35px;
            height: 35px;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 16px;
            transition: all 0.3s ease;
        }
        
        .close-settings-btn:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: scale(1.1);
        }
        
        .settings-panel-content {
            padding: 0;
        }
        
        .settings-section {
            padding: 25px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.08);
        }
        
        .settings-section:last-child {
            border-bottom: none;
        }
        
        .settings-section h4 {
            margin: 0 0 20px 0;
            color: rgba(255, 255, 255, 0.9);
            font-size: 16px;
            font-weight: 600;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
            border-bottom: 2px solid rgba(255, 255, 255, 0.1);
            padding-bottom: 10px;
        }
        
        .settings-backdrop {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(3px);
            -webkit-backdrop-filter: blur(3px);
            z-index: 1999;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }
        
        .settings-backdrop.open {
            opacity: 1;
            visibility: visible;
        }
        
        /* Mobile responsive design for settings panel */
        @media (max-width: 768px) {
            .settings-panel {
                width: 100%;
                left: -100%;
            }
            
            .settings-toggle {
                top: 15px;
                left: 15px;
            }
            
            .settings-toggle-btn {
                padding: 10px 16px;
                font-size: 13px;
            }
            
            .main-controls {
                flex-direction: column;
                align-items: stretch;
                gap: 15px;
                padding: 15px 20px;
            }
            
            .main-controls .control-group {
                justify-content: center;
            }
            
            .status {
                text-align: center;
                margin: 0;
            }
        }
        
        @media (max-width: 480px) {
            .settings-panel-header {
                padding: 20px;
            }
            
            .settings-section {
                padding: 20px;
            }
            
            .settings-section h4 {
                font-size: 14px;
            }
        }
        
        .control-group {
            display: flex;
            align-items: center;
            gap: 10px;
            position: relative;
            z-index: 1;
            margin-bottom: 15px;
        }
        
        .control-group:last-child {
            margin-bottom: 0;
        }
        
        /* Settings panel specific control group styling */
        .settings-panel .control-group {
            flex-direction: column;
            align-items: flex-start;
            gap: 8px;
        }
        
        .settings-panel .control-group label {
            width: 100%;
            margin-bottom: 5px;
        }
        
        .settings-panel .control-group input,
        .settings-panel .control-group select,
        .settings-panel .control-group button {
            width: 100%;
            max-width: none;
        }
        
        .settings-panel .control-group input[type="checkbox"] {
            width: auto;
            margin-right: 8px;
        }
        
        .settings-panel .control-group input[type="range"] {
            width: 100%;
        }
        
        .settings-panel .control-group label[for="showInterpolated"],
        .settings-panel .control-group label[for="showDeviceLabels"] {
            display: flex;
            align-items: center;
            cursor: pointer;
            width: auto;
        }
        
        .control-group label {
            font-weight: 600;
            color: white;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
        }
        
        .control-group input, .control-group button, .control-group select {
            padding: 10px 15px;
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 12px;
            font-size: 14px;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            color: white;
            transition: all 0.3s ease;
        }
        
        .control-group input[type="checkbox"] {
            padding: 0;
            width: 18px;
            height: 18px;
            margin-right: 8px;
            accent-color: #1e90ff;
            cursor: pointer;
        }
        
        .control-group input[type="range"] {
            padding: 0;
            width: 120px;
            height: 6px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 3px;
            accent-color: #1e90ff;
            cursor: pointer;
        }
        
        .control-group label {
            display: flex;
            align-items: center;
            cursor: pointer;
        }
        
        .control-group input::placeholder {
            color: rgba(255, 255, 255, 0.7);
        }
        
        .control-group input:focus, .control-group select:focus {
            outline: none;
            border-color: rgba(255, 255, 255, 0.5);
            background: rgba(255, 255, 255, 0.15);
            box-shadow: 0 0 20px rgba(255, 255, 255, 0.1);
        }
        
        .control-group input#averageVoltage {
            border-color: rgba(255, 193, 7, 0.5);
            background: rgba(255, 193, 7, 0.1);
        }
        
        .control-group select {
            cursor: pointer;
        }
        
        .control-group button {
            background: rgba(30, 144, 255, 0.7);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.2);
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
        }
        
        .control-group button:hover {
            background: rgba(30, 144, 255, 0.9);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(30, 144, 255, 0.4);
        }
        
        .status {
            padding: 12px 20px;
            border-radius: 15px;
            margin-left: auto;
            font-weight: 600;
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            position: relative;
            z-index: 1;
        }
        
        .status.connected {
            background: rgba(40, 167, 69, 0.2);
            color: #ffffff;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
        }
        
        .status.error {
            background: rgba(220, 53, 69, 0.2);
            color: #ffffff;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
        }
        
        .charts-container {
            display: grid;
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .charts-container.charts-per-row-2 {
            grid-template-columns: repeat(2, 1fr);
        }
        
        .charts-container.charts-per-row-3 {
            grid-template-columns: repeat(3, 1fr);
        }
        
        @media (max-width: 1400px) {
            .charts-container.charts-per-row-3 {
                grid-template-columns: repeat(2, 1fr);
            }
        }
        
        @media (max-width: 900px) {
            .charts-container.charts-per-row-2,
            .charts-container.charts-per-row-3 {
                grid-template-columns: 1fr;
            }
        }
        
        .chart-section {
            background: rgba(255, 255, 255, 0.07);
            backdrop-filter: blur(25px);
            -webkit-backdrop-filter: blur(25px);
            border: 1px solid rgba(255, 255, 255, 0.15);
            border-radius: 20px;
            padding: 25px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.25);
            min-width: 0; /* Prevents grid items from overflowing */
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
        }
        
        .chart-section::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.04) 0%, rgba(255, 255, 255, 0.01) 100%);
            pointer-events: none;
        }
        
        .chart-section:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.35);
            border-color: rgba(255, 255, 255, 0.25);
        }
        
        .chart-section h3 {
            margin: 0 0 20px 0;
            color: white;
            text-align: center;
            font-size: 18px;
            font-weight: 600;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
            position: relative;
            z-index: 1;
        }
        
        .chart-container {
            position: relative;
            height: 300px;
            margin-bottom: 15px;
            z-index: 1;
            border-radius: 15px;
            overflow: hidden;
            background: rgba(0, 0, 0, 0.15);
            backdrop-filter: blur(15px);
            -webkit-backdrop-filter: blur(15px);
            border: 1px solid rgba(255, 255, 255, 0.08);
        }
        
        /* Drag selection overlay styles */
        .chart-container canvas {
            user-select: none;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
        }
        
        .chart-stats {
            display: flex;
            justify-content: space-around;
            margin-top: 15px;
            padding: 15px;
            background: rgba(0, 0, 0, 0.2);
            backdrop-filter: blur(15px);
            -webkit-backdrop-filter: blur(15px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            font-size: 12px;
            position: relative;
            z-index: 1;
        }
        
        .stat {
            text-align: center;
        }
        
        .stat-label {
            font-weight: 600;
            color: rgba(255, 255, 255, 0.8);
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
        }
        
        .stat-value {
            font-size: 14px;
            font-weight: bold;
            color: white;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
        }
        
        .power-charts {
            border-left: 4px solid #f39c12;
        }
        
        .current-charts {
            border-left: 4px solid #ff6b6b;
        }
        
        .voltage-charts {
            border-left: 4px solid #4ecdc4;
        }
        
        .loading {
            text-align: center;
            padding: 40px;
            color: rgba(255, 255, 255, 0.8);
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
        }

        /* Zoom functionality styles */
        .chart-container canvas {
            cursor: default;
        }

        .chart-container canvas:hover {
            cursor: crosshair;
        }
        
        /* Drag selection styles */
        .chart-container canvas.dragging {
            cursor: crosshair !important;
        }

        #chartContextMenu {
            user-select: none;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
        }

        #chartContextMenu div:hover {
            background-color: #f5f5f5 !important;
        }

        /* Zoom indicator */
        .zoom-indicator {
            position: absolute;
            top: 15px;
            right: 15px;
            background: rgba(0, 0, 0, 0.6);
            backdrop-filter: blur(15px);
            -webkit-backdrop-filter: blur(15px);
            border: 1px solid rgba(255, 255, 255, 0.3);
            color: #FFD700;
            padding: 8px 12px;
            border-radius: 10px;
            font-size: 12px;
            font-weight: bold;
            z-index: 1000;
            display: none;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.8);
        }

        .chart-container.zoomed .zoom-indicator {
            display: block;
        }
        
        .error-message {
            background: rgba(220, 53, 69, 0.2);
            backdrop-filter: blur(15px);
            -webkit-backdrop-filter: blur(15px);
            border: 1px solid rgba(220, 53, 69, 0.3);
            color: white;
            padding: 20px;
            border-radius: 15px;
            margin: 30px 0;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
        }
        
        .chart-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            position: relative;
            z-index: 1;
        }
        
        .chart-header h3 {
            margin: 0;
        }
        
        .chart-details-btn, .fullscreen-btn {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.3);
            color: white;
            padding: 8px 12px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
        }
        
        .chart-details-btn:hover, .fullscreen-btn:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: translateY(-1px);
        }

        .chart-reset-btn {
            background: rgba(76, 172, 254, 0.2);
            border: 1px solid rgba(76, 172, 254, 0.4);
            color: #4facfe;
            padding: 8px 12px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            font-weight: 500;
        }
        
        .chart-reset-btn:hover {
            background: rgba(76, 172, 254, 0.3);
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(76, 172, 254, 0.3);
        }
        
        /* Modal styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 10000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(5px);
            -webkit-backdrop-filter: blur(5px);
        }
        
        .modal-content {
            background: white;
            border: 1px solid #ddd;
            margin: 2% auto;
            padding: 30px;
            border-radius: 20px;
            width: 95%;
            max-width: 1400px;
            max-height: 90vh;
            overflow-y: auto;
            position: relative;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
        }
        
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #e9ecef;
        }
        
        .modal-title {
            font-size: 18px;
            font-weight: 600;
            color: #333;
        }
        
        .close-btn {
            background: #f8f9fa;
            border: 1px solid #ddd;
            border-radius: 50%;
            font-size: 20px;
            cursor: pointer;
            color: #666;
            padding: 0;
            width: 35px;
            height: 35px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }
        
        .close-btn:hover {
            background: #e9ecef;
            color: #333;
            transform: scale(1.1);
        }
        
        .records-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            overflow: hidden;
        }
        
        .records-table th,
        .records-table td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #dee2e6;
        }
        
        .records-table th {
            background-color: #f8f9fa;
            font-weight: 600;
            color: #495057;
            border-bottom: 2px solid #dee2e6;
        }
        
        .records-table tr:hover {
            background-color: #f8f9fa;
        }
        
        .records-table tbody tr:last-child td {
            border-bottom: none;
        }
        
        .btn {
            background: #007bff;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 6px;
            font-size: 12px;
            cursor: pointer;
            transition: all 0.2s ease;
            font-weight: 500;
        }
        
        .btn:hover {
            background: #0056b3;
            transform: translateY(-1px);
        }
        
        .btn-secondary {
            background: #6c757d;
        }
        
        .btn-secondary:hover {
            background: #545b62;
        }
        
        .peak-value {
            background-color: #fff3cd !important;
            color: #856404;
            font-weight: bold;
        }
        
        .valley-value {
            background-color: #d1ecf1 !important;
            color: #0c5460;
            font-weight: bold;
        }
        
        .event-start {
            background-color: #e3f2fd !important;
            color: #1976d2;
            font-weight: bold;
            text-align: center;
        }
        
        .event-end {
            background-color: #ffebee !important;
            color: #d32f2f;
            font-weight: bold;
            text-align: center;
        }
        
        .modal-stats {
            display: flex;
            justify-content: space-around;
            margin-bottom: 20px;
            padding: 20px;
            background-color: #f8f9fa;
            border-radius: 10px;
            border: 1px solid #e9ecef;
        }
        
        .modal-stat {
            text-align: center;
        }
        
        .modal-stat-label {
            font-size: 12px;
            color: #6c757d;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .modal-stat-value {
            font-size: 18px;
            font-weight: bold;
            color: #495057;
            margin-top: 4px;
        }
        
        /* Filter Controls Styles */
        .modal-filters {
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
        }
        
        .filters-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 2px solid #dee2e6;
        }
        
        .filters-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            align-items: end;
        }
        
        .filter-group {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }
        
        .filter-group label {
            font-size: 12px;
            color: #6c757d;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .filter-group input,
        .filter-group select {
            padding: 8px 12px;
            border: 1px solid #ced4da;
            border-radius: 6px;
            font-size: 14px;
            background: white;
            color: #495057;
            transition: border-color 0.3s ease;
        }
        
        .filter-group input:focus,
        .filter-group select:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
        }
        
        .filter-group input[type="datetime-local"] {
            cursor: pointer;
        }
        
        /* Responsive adjustments for smaller screens */
        @media (max-width: 1200px) {
            .filters-row {
                grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
            }
        }
        
        @media (max-width: 768px) {
            .filters-row {
                grid-template-columns: 1fr;
            }
        }
        
        .delta-positive {
            color: #28a745;
            font-weight: bold;
        }
        
        .delta-negative {
            color: #dc3545;
            font-weight: bold;
        }
        
        .delta-zero {
            color: #6c757d;
        }
        
        .fullscreen-btn {
            background: #28a745;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 4px;
            font-size: 12px;
            cursor: pointer;
            transition: background-color 0.3s;
            margin-left: 8px;
        }
        
        .fullscreen-btn:hover {
            background: #218838;
        }
        
        .fullscreen-btn.exit-fullscreen {
            background: #dc3545;
        }
        
        .fullscreen-btn.exit-fullscreen:hover {
            background: #c82333;
        }
        
        /* Discovery Modal Styles */
        .discovery-content {
            padding: 20px 0;
        }
        
        .discovery-status {
            margin-bottom: 20px;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 8px;
            border-left: 4px solid #007bff;
        }
        
        .discovery-progress {
            margin-bottom: 20px;
        }
        
        .progress-bar {
            width: 100%;
            height: 20px;
            background-color: #e9ecef;
            border-radius: 10px;
            overflow: hidden;
            margin-bottom: 10px;
        }
        
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #007bff, #28a745);
            width: 0%;
            transition: width 0.3s ease;
            border-radius: 10px;
        }
        
        .progress-text {
            text-align: center;
            font-size: 14px;
            color: #495057;
            font-weight: 500;
        }
        
        .discovery-controls {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }
        
        .discovered-devices {
            margin-top: 20px;
        }
        
        .discovered-devices h4 {
            color: #495057;
            margin-bottom: 15px;
            font-size: 16px;
        }
        
        .devices-list {
            display: grid;
            gap: 15px;
        }
        
        /* Range Selection Styles */
        .range-selection {
            margin-bottom: 20px;
            padding: 20px;
            background-color: #f8f9fa;
            border-radius: 8px;
            border: 1px solid #dee2e6;
        }
        
        .range-selection h4 {
            color: #495057;
            margin-bottom: 15px;
            font-size: 16px;
        }
        
        .range-selection h5 {
            color: #495057;
            margin-bottom: 10px;
            font-size: 14px;
        }
        
        .range-options {
            margin-bottom: 20px;
        }
        
        .range-option {
            display: flex;
            align-items: center;
            padding: 10px;
            margin-bottom: 8px;
            background: white;
            border: 1px solid #dee2e6;
            border-radius: 6px;
            transition: all 0.3s ease;
        }
        
        .range-option:hover {
            background: #e9ecef;
            border-color: #007bff;
        }
        
        .range-option.recommended {
            border-color: #28a745;
            background: #f8fff9;
        }
        
        .range-option input[type="checkbox"] {
            margin-right: 10px;
            transform: scale(1.2);
        }
        
        .range-option-info {
            flex: 1;
        }
        
        .range-option-range {
            font-weight: 600;
            color: #495057;
        }
        
        .range-option-description {
            font-size: 12px;
            color: #6c757d;
            margin-top: 2px;
        }
        
        .range-option-badge {
            background: #28a745;
            color: white;
            padding: 2px 8px;
            border-radius: 4px;
            font-size: 11px;
            font-weight: 500;
        }
        
        .custom-range {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 20px;
            padding: 15px;
            background: white;
            border: 1px solid #dee2e6;
            border-radius: 6px;
        }
        
        .custom-range label {
            font-weight: 500;
            color: #495057;
            white-space: nowrap;
        }
        
        .custom-range input {
            flex: 1;
            padding: 8px 12px;
            border: 1px solid #ced4da;
            border-radius: 4px;
            font-size: 14px;
        }
        
        .custom-range input:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
        }
        
        .selected-ranges {
            padding: 15px;
            background: white;
            border: 1px solid #dee2e6;
            border-radius: 6px;
        }
        
        .selected-ranges-list {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
        }
        
        .selected-range-tag {
            display: inline-flex;
            align-items: center;
            background: #007bff;
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: 500;
        }
        
        .selected-range-tag .remove-range {
            margin-left: 6px;
            cursor: pointer;
            font-weight: bold;
            opacity: 0.8;
        }
        
        .selected-range-tag .remove-range:hover {
            opacity: 1;
        }
        
        .device-card {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 15px;
            transition: all 0.3s ease;
        }
        
        .device-card:hover {
            background: #e9ecef;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
        
        .device-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }
        
        .device-name {
            font-weight: 600;
            color: #495057;
            font-size: 16px;
        }
        
        .device-type {
            background: #007bff;
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: 500;
        }
        
        .device-details {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 10px;
            margin-bottom: 15px;
        }
        
        .device-detail {
            display: flex;
            flex-direction: column;
        }
        
        .device-detail-label {
            font-size: 12px;
            color: #6c757d;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .device-detail-value {
            font-size: 14px;
            color: #495057;
            font-weight: 500;
            margin-top: 2px;
        }
        
        .device-actions {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
        }
        
        .device-actions .btn {
            font-size: 12px;
            padding: 6px 12px;
        }
        
        .btn-use-device {
            background: #28a745;
        }
        
        .btn-use-device:hover {
            background: #218838;
        }
        

        
        .chart-section.fullscreen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            z-index: 9999;
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 30%, #0f3460 70%, #1a1a2e 100%);
            padding: 20px;
            box-sizing: border-box;
        }
        
        .chart-section.fullscreen::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain-fullscreen" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="0.5" fill="white" opacity="0.03"/><circle cx="75" cy="75" r="0.5" fill="white" opacity="0.03"/><circle cx="50" cy="10" r="0.3" fill="white" opacity="0.05"/><circle cx="20" cy="80" r="0.3" fill="white" opacity="0.05"/><circle cx="80" cy="30" r="0.3" fill="white" opacity="0.05"/></pattern></defs><rect width="100" height="100" fill="url(%23grain-fullscreen)"/></svg>');
            pointer-events: none;
            z-index: -1;
        }
        
        .chart-section.fullscreen .chart-container {
            height: calc(100vh - 200px);
        }
        
        .chart-section.fullscreen .chart-header {
            margin-bottom: 30px;
            padding-bottom: 15px;
            border-bottom: 2px solid rgba(255, 255, 255, 0.2);
        }
        
        .chart-section.fullscreen .fullscreen-device-filters {
            position: absolute;
            top: 20px;
            right: 20px;
            min-width: 250px;
            min-height: 150px;
            max-height: 80vh;
            background: rgba(255, 255, 255, 0.08);
            backdrop-filter: blur(20px);
            -webkit-backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.15);
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            z-index: 10000;
            cursor: move;
            overflow: auto;
        }
        
        .chart-section.fullscreen .fullscreen-device-filters h4 {
            margin: 0 0 10px 0;
            color: white;
            font-size: 14px;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
        }
        
        .chart-section.fullscreen .fullscreen-device-filters .device-filter-buttons {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            max-height: calc(100% - 50px);
            overflow-y: auto;
            align-content: flex-start;
        }
        
        .chart-section.fullscreen .fullscreen-device-filters .device-filter-btn {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px 12px;
            border: none;
            border-radius: 6px;
            background: rgba(255, 255, 255, 0.2);
            color: white;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.2s;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            width: 180px;
            flex: 0 0 180px;
        }
        
        .chart-section.fullscreen .fullscreen-device-filters .device-filter-btn:hover {
            background: rgba(255, 255, 255, 0.3);
        }
        
        .chart-section.fullscreen .fullscreen-device-filters .device-filter-btn.hidden {
            background: rgba(255, 255, 255, 0.1);
        }
        
        .chart-section.fullscreen .fullscreen-device-filters .device-filter-btn.hidden:hover {
            background: rgba(255, 255, 255, 0.2);
        }
        
        .chart-section.fullscreen .chart-header h3 {
            font-size: 24px;
            color: white;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }
        
        /* Pulse animation for status indicator */
        @keyframes pulse {
            0% {
                opacity: 1;
                transform: scale(1);
            }
            50% {
                opacity: 0.7;
                transform: scale(1.1);
            }
            100% {
                opacity: 1;
                transform: scale(1);
            }
        }

        /* Chart Help Section */
        .chart-help {
            background: rgba(76, 172, 254, 0.1);
            backdrop-filter: blur(15px);
            -webkit-backdrop-filter: blur(15px);
            border: 1px solid rgba(76, 172, 254, 0.2);
            padding: 15px 20px;
            border-radius: 15px;
            margin-bottom: 20px;
            box-shadow: 0 4px 16px rgba(76, 172, 254, 0.1);
        }
        
        .help-content {
            display: flex;
            align-items: center;
            gap: 15px;
        }
        
        .help-icon {
            font-size: 20px;
            flex-shrink: 0;
        }
        
        .help-text {
            display: flex;
            align-items: center;
            gap: 20px;
            flex-wrap: wrap;
            color: rgba(255, 255, 255, 0.9);
            font-size: 14px;
        }
        
        .help-text strong {
            color: #4facfe;
            margin-right: 10px;
        }
        
        .help-text span {
            display: flex;
            align-items: center;
            gap: 5px;
            padding: 4px 8px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            font-size: 13px;
        }

        @media (max-width: 768px) {
            .charts-container {
                grid-template-columns: 1fr;
            }
            
            .chart-header {
                flex-direction: column;
                gap: 10px;
                align-items: flex-start;
            }
            
            .chart-header h3 {
                margin: 0;
            }
            
            .chart-header div {
                display: flex;
                gap: 8px;
                flex-wrap: wrap;
            }
            
            .main-controls {
                flex-direction: column;
                gap: 15px;
            }
            
            .help-text {
                flex-direction: column;
                gap: 10px;
                align-items: flex-start;
            }
            
            .help-text span {
                font-size: 12px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🔌 Shelly 3EM Readings Dashboard</h1>
            <p>Real-time monitoring of power, current, and voltage measurements from your Shelly Pro 3EM device</p>
            <p style="font-size: 14px; margin-top: 10px; opacity: 0.9;">
                💡 <strong>Tip:</strong> Drag to select an area to zoom in, right-click for zoom options, or double-click on power chart points to associate with devices. Use ESC to close menus.
            </p>
            <p style="font-size: 13px; margin-top: 8px; opacity: 0.8;">
                📊 <strong>Peak/Valley Detection:</strong> Uses gradient analysis to identify true local maxima and minima where the slope changes direction. Only events exceeding the threshold are considered for device association.
            </p>
            <p style="font-size: 12px; margin-top: 8px; opacity: 0.7;">
                🎨 <strong>Power Chart Legend:</strong> 
                <span style="color: #32CD32; font-size: 14px;">●</span> Device-associated peaks (turn on) | 
                <span style="color: #00FF7F; font-size: 14px;">●</span> Device-associated valleys (turn off) | 
                <span style="color: #FFA500; font-size: 12px;">●</span> Unassociated peaks | 
                <span style="color: #87CEEB; font-size: 12px;">●</span> Unassociated valleys | 
                Normal readings are hidden for clarity
            </p>
        </div>
        
        <div class="nav-buttons" style="margin-bottom: 30px;">
            <a href="settings.html" class="nav-btn" style="background: rgba(255, 255, 255, 0.1); backdrop-filter: blur(15px); -webkit-backdrop-filter: blur(15px); border: 1px solid rgba(255, 255, 255, 0.2); color: white; padding: 12px 24px; border-radius: 15px; cursor: pointer; margin-right: 10px; text-decoration: none; display: inline-block; transition: all 0.3s ease; font-weight: 500; text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);" onmouseover="this.style.background='rgba(255, 255, 255, 0.2)'; this.style.transform='translateY(-2px)'; this.style.boxShadow='0 5px 15px rgba(255, 255, 255, 0.2)'" onmouseout="this.style.background='rgba(255, 255, 255, 0.1)'; this.style.transform='translateY(0)'; this.style.boxShadow='none'">⚙️ Environment Setup</a>
            <a href="consumption_analysis.html" class="nav-btn" style="background: rgba(76, 172, 254, 0.7); backdrop-filter: blur(15px); -webkit-backdrop-filter: blur(15px); border: 1px solid rgba(76, 172, 254, 0.5); color: white; padding: 12px 24px; border-radius: 15px; cursor: pointer; margin-right: 10px; text-decoration: none; display: inline-block; transition: all 0.3s ease; font-weight: 500; text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);" onmouseover="this.style.background='rgba(76, 172, 254, 0.9)'; this.style.transform='translateY(-2px)'; this.style.boxShadow='0 5px 15px rgba(76, 172, 254, 0.4)'" onmouseout="this.style.background='rgba(76, 172, 254, 0.7)'; this.style.transform='translateY(0)'; this.style.boxShadow='none'">⚡ Consumption Analysis</a>
        </div>
        
        <!-- Settings Panel Toggle Button -->
        <div class="settings-toggle">
            <button id="settingsToggle" onclick="toggleSettingsPanel()" class="settings-toggle-btn">
                ⚙️ Settings
            </button>
        </div>

        <!-- Main Controls (Always Visible) -->
        <div class="main-controls">
            <div class="control-group">
                <label for="timeRange">Time Range:</label>
                <select id="timeRange" onchange="onTimeRangeChange()">
                    <option value="1" selected>Last Hour</option>
                    <option value="24">Last 24 Hours</option>
                    <option value="168">Last Week</option>
                    <option value="720">Last Month</option>
                </select>
            </div>
            <div class="status" id="status">Ready - Click 'Start Data Collection' to begin</div>
        </div>

        <!-- Device Filter Controls -->
        <div class="device-filter-controls" id="deviceFilterControls" style="display: none;">
            <div class="filter-header">
                <h4>🔍 Device Filters</h4>
                <div class="filter-actions">
                    <button class="filter-action-btn" onclick="showAllDevices()">Show All</button>
                    <button class="filter-action-btn" onclick="hideAllDevices()">Hide All</button>
                </div>
            </div>
            <div class="device-filter-buttons" id="deviceFilterButtons">
                <!-- Device filter buttons will be populated here -->
            </div>
        </div>

        <!-- Chart Navigation Help -->
        <div class="chart-help">
            <div class="help-content">
                <span class="help-icon">💡</span>
                <div class="help-text">
                    <strong>Chart Navigation:</strong>
                    <span>🖱️ Drag to select zoom area</span>
                    <span>⌥ Alt+Drag to pan through time</span>
                    <span>🔍 Alt+Scroll to zoom in/out</span>
                    <span>📱 Pinch to zoom (mobile)</span>
                </div>
            </div>
        </div>

        <!-- Settings Side Panel -->
        <div class="settings-panel" id="settingsPanel">
            <div class="settings-panel-header">
                <h3>⚙️ Dashboard Settings</h3>
                <button class="close-settings-btn" onclick="toggleSettingsPanel()">✕</button>
            </div>
            <div class="settings-panel-content">
                <div class="settings-section">
                    <h4>🔌 Device Configuration</h4>
                    <div class="control-group">
                        <label for="deviceIP">Device IP:</label>
                        <input type="text" id="deviceIP" value="192.168.1.74" placeholder="192.168.1.74">
                    </div>
                    <div class="control-group">
                        <label for="connectionType">Connection Type:</label>
                        <select id="connectionType" onchange="onConnectionTypeChange()">
                            <option value="DIRECT" selected>DIRECT</option>
                            <option value="WEB">WEB</option>
                        </select>
                    </div>
                    <div class="control-group" id="webParams" style="display: none;">
                        <label for="deviceId">Device ID:</label>
                        <input type="text" id="deviceId" placeholder="e.g. 2cbcbba658d4" value="2cbcbba658d4">
                        <label for="authKey" style="margin-top: 8px;">Auth Key:</label>
                        <input type="text" id="authKey" placeholder="Paste auth key here" value="MzA0M2NldWlkE3BA4CD098916D04CF82E269F8077B7776A03CACAB48F133883B8EABF965DAFCEA8341FA1A72B36E">
                        <label for="deviceType" style="margin-top: 8px;">Device type:</label>
                        <select id="deviceType" onchange="onDeviceTypeChange()">
                            <option value="monofase" data-default-deviceid="c45bbee1ee20">Shelly EM (monofase)</option>
                            <option value="trifase" data-default-deviceid="2cbcbba658d4" selected>Shelly EM3 PRO (trifase)</option>
                        </select>
                    </div>
                    <div class="control-group">
                        <label for="averageVoltage">Average Voltage (V):</label>
                        <input type="number" id="averageVoltage" value="230" min="100" max="400" step="1" 
                               title="Used when voltage reading is 0 (e.g., Phase B not connected)">
                    </div>
                </div>

                <div class="settings-section">
                    <h4>📊 Display Settings</h4>
                    <div class="control-group">
                        <label for="chartsPerRow">Charts per Row:</label>
                        <select id="chartsPerRow">
                            <option value="2">2 Charts</option>
                            <option value="3" selected>3 Charts</option>
                        </select>
                    </div>
                    <div class="control-group">
                        <label for="showInterpolated">
                            <input type="checkbox" id="showInterpolated" checked onchange="toggleInterpolatedCurves()">
                            Show Trend Lines (Power)
                        </label>
                    </div>
                    <div class="control-group">
                        <label for="smoothingFactor">Smoothing Factor:</label>
                        <input type="range" id="smoothingFactor" min="0.1" max="0.9" step="0.1" value="0.6" onchange="updateSmoothingFactor()">
                        <span id="smoothingValue" style="color: white; margin-left: 8px;">0.6</span>
                    </div>
                    <div class="control-group">
                        <label for="showDeviceLabels">
                            <input type="checkbox" id="showDeviceLabels" checked onchange="toggleDeviceLabels()">
                            Show Device Labels & Colors
                        </label>
                    </div>
                </div>

                <div class="settings-section">
                    <h4>🔄 Data Collection</h4>
                    <div class="control-group">
                        <label for="refreshInterval">Refresh Interval (seconds):</label>
                        <input type="number" id="refreshInterval" value="5" min="1" max="300">
                    </div>
                    <div class="control-group">
                        <label for="eventThreshold">Event Threshold (W):</label>
                        <input type="number" id="eventThreshold" value="10" min="1" max="1000" step="1" 
                               title="Minimum accumulated power change to consider as a device event">
                    </div>
                    <div class="control-group">
                        <button onclick="startDataCollection()">Start Data Collection</button>
                        <button onclick="stopDataCollection()">Stop Collection</button>
                    </div>
                    <div class="control-group">
                        <button onclick="toggleAutoRefresh()">Toggle Auto Refresh</button>
                        <button onclick="refreshData()">Refresh Now</button>
                    </div>
                </div>

                <div class="settings-section">
                    <h4>🔧 Advanced Actions</h4>
                    <div class="control-group">
                        <button onclick="startDeviceDiscovery()" style="background: rgba(40, 167, 69, 0.7); border-color: rgba(40, 167, 69, 0.5);" onmouseover="this.style.background='rgba(40, 167, 69, 0.9)'" onmouseout="this.style.background='rgba(40, 167, 69, 0.7)'">🔍 Discover Devices</button>
                    </div>
                    <div class="control-group">
                        <button onclick="clearTrackingData()" style="background: rgba(220, 53, 69, 0.7); border-color: rgba(220, 53, 69, 0.5);" onmouseover="this.style.background='rgba(220, 53, 69, 0.9)'" onmouseout="this.style.background='rgba(220, 53, 69, 0.7)'">🗑️ Clear All Data</button>
                    </div>
                </div>

                <div class="settings-section">
                    <h4>⚡ Power Consumption Thresholds</h4>
                    <div class="control-group">
                        <label for="lowThreshold">Low Consumption Threshold (W):</label>
                        <input type="number" id="lowThreshold" value="300" min="1" max="10000" step="1" 
                               title="Power threshold for low consumption events (0 to this value)" onchange="updateThresholds()">
                    </div>
                    <div class="control-group">
                        <label for="mediumThreshold">Medium Consumption Threshold (W):</label>
                        <input type="number" id="mediumThreshold" value="1000" min="1" max="10000" step="1" 
                               title="Power threshold for medium consumption events (low threshold to this value)" onchange="updateThresholds()">
                    </div>
                    <div class="control-group">
                        <label for="enableThresholds">
                            <input type="checkbox" id="enableThresholds" checked onchange="toggleThresholds()">
                            Enable Threshold Lines on Charts
                        </label>
                    </div>
                    <div class="control-group">
                        <button onclick="exportConsumptionEvents()" style="background: rgba(255, 193, 7, 0.7); border-color: rgba(255, 193, 7, 0.5);" onmouseover="this.style.background='rgba(255, 193, 7, 0.9)'" onmouseout="this.style.background='rgba(255, 193, 7, 0.7)'">📥 Export Events</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Settings Panel Backdrop -->
        <div class="settings-backdrop" id="settingsBackdrop" onclick="toggleSettingsPanel()"></div>
        
        <div id="errorContainer"></div>
        
        <div class="charts-container charts-per-row-3" id="chartsContainer">
            <!-- Power Charts -->
            <div class="chart-section power-charts" id="powerASection">
                <div class="chart-header">
                    <h3>⚡ Power Phase A (Watt)</h3>
                    <div>
                        <button class="chart-reset-btn" onclick="resetChartZoom('powerAChart')" title="Reset zoom and pan">🔄 Reset</button>
                        <button class="chart-details-btn" onclick="showChartDetails('powerAChart', 'Power Phase A', 'W')">📊 Details</button>
                        <button class="fullscreen-btn" onclick="toggleFullscreen('powerASection', 'powerAChart')" id="powerAFullscreenBtn">🔍 Fullscreen</button>
                    </div>
                </div>
                <div class="custom-legend" id="powerALegend"></div>
                            <div class="chart-container" id="powerAContainer">
                <canvas id="powerAChart"></canvas>
                <div class="zoom-indicator" id="powerAZoomIndicator">Zoom: 1x</div>
            </div>
                <div class="chart-stats" id="powerAStats"></div>
            </div>
            
            <div class="chart-section power-charts" id="powerBSection">
                <div class="chart-header">
                    <h3>⚡ Power Phase B (Watt)</h3>
                    <div>
                        <button class="chart-reset-btn" onclick="resetChartZoom('powerBChart')" title="Reset zoom and pan">🔄 Reset</button>
                        <button class="chart-details-btn" onclick="showChartDetails('powerBChart', 'Power Phase B', 'W')">📊 Details</button>
                        <button class="fullscreen-btn" onclick="toggleFullscreen('powerBSection', 'powerBChart')" id="powerBFullscreenBtn">🔍 Fullscreen</button>
                    </div>
                </div>
                <div class="custom-legend" id="powerBLegend"></div>
                            <div class="chart-container" id="powerBContainer">
                <canvas id="powerBChart"></canvas>
                <div class="zoom-indicator" id="powerBZoomIndicator">Zoom: 1x</div>
            </div>
                <div class="chart-stats" id="powerBStats"></div>
            </div>
            
            <div class="chart-section power-charts" id="powerCSection">
                <div class="chart-header">
                    <h3>⚡ Power Phase C (Watt)</h3>
                    <div>
                        <button class="chart-reset-btn" onclick="resetChartZoom('powerCChart')" title="Reset zoom and pan">🔄 Reset</button>
                        <button class="chart-details-btn" onclick="showChartDetails('powerCChart', 'Power Phase C', 'W')">📊 Details</button>
                        <button class="fullscreen-btn" onclick="toggleFullscreen('powerCSection', 'powerCChart')" id="powerCFullscreenBtn">🔍 Fullscreen</button>
                    </div>
                </div>
                <div class="custom-legend" id="powerCLegend"></div>
                            <div class="chart-container" id="powerCContainer">
                <canvas id="powerCChart"></canvas>
                <div class="zoom-indicator" id="powerCZoomIndicator">Zoom: 1x</div>
            </div>
                <div class="chart-stats" id="powerCStats"></div>
            </div>
            
            <!-- Current Charts -->
            <div class="chart-section current-charts" id="currentASection">
                <div class="chart-header">
                    <h3>⚡ Current Phase A</h3>
                    <div>
                        <button class="chart-details-btn" onclick="showChartDetails('currentAChart', 'Current Phase A', 'A')">📊 Details</button>
                        <button class="fullscreen-btn" onclick="toggleFullscreen('currentASection', 'currentAChart')" id="currentAFullscreenBtn">🔍 Fullscreen</button>
                    </div>
                </div>
                            <div class="chart-container" id="currentAContainer">
                <canvas id="currentAChart"></canvas>
                <div class="zoom-indicator" id="currentAZoomIndicator">Zoom: 1x</div>
            </div>
                <div class="chart-stats" id="currentAStats"></div>
            </div>
            
            <div class="chart-section current-charts" id="currentBSection">
                <div class="chart-header">
                    <h3>⚡ Current Phase B</h3>
                    <div>
                        <button class="chart-details-btn" onclick="showChartDetails('currentBChart', 'Current Phase B', 'A')">📊 Details</button>
                        <button class="fullscreen-btn" onclick="toggleFullscreen('currentBSection', 'currentBChart')" id="currentBFullscreenBtn">🔍 Fullscreen</button>
                    </div>
                </div>
                            <div class="chart-container" id="currentBContainer">
                <canvas id="currentBChart"></canvas>
                <div class="zoom-indicator" id="currentBZoomIndicator">Zoom: 1x</div>
            </div>
                <div class="chart-stats" id="currentBStats"></div>
            </div>
            
            <div class="chart-section current-charts" id="currentCSection">
                <div class="chart-header">
                    <h3>⚡ Current Phase C</h3>
                    <div>
                        <button class="chart-details-btn" onclick="showChartDetails('currentCChart', 'Current Phase C', 'A')">📊 Details</button>
                        <button class="fullscreen-btn" onclick="toggleFullscreen('currentCSection', 'currentCChart')" id="currentCFullscreenBtn">🔍 Fullscreen</button>
                    </div>
                </div>
                            <div class="chart-container" id="currentCContainer">
                <canvas id="currentCChart"></canvas>
                <div class="zoom-indicator" id="currentCZoomIndicator">Zoom: 1x</div>
            </div>
                <div class="chart-stats" id="currentCStats"></div>
            </div>
            
            <!-- Voltage Charts -->
            <div class="chart-section voltage-charts" id="voltageASection">
                <div class="chart-header">
                    <h3>🔋 Voltage Phase A</h3>
                    <div>
                        <button class="chart-details-btn" onclick="showChartDetails('voltageAChart', 'Voltage Phase A', 'V')">📊 Details</button>
                        <button class="fullscreen-btn" onclick="toggleFullscreen('voltageASection', 'voltageAChart')" id="voltageAFullscreenBtn">🔍 Fullscreen</button>
                    </div>
                </div>
                            <div class="chart-container" id="voltageAContainer">
                <canvas id="voltageAChart"></canvas>
                <div class="zoom-indicator" id="voltageAZoomIndicator">Zoom: 1x</div>
            </div>
                <div class="chart-stats" id="voltageAStats"></div>
            </div>
            
            <div class="chart-section voltage-charts" id="voltageBSection">
                <div class="chart-header">
                    <h3>🔋 Voltage Phase B</h3>
                    <div>
                        <button class="chart-details-btn" onclick="showChartDetails('voltageBChart', 'Voltage Phase B', 'V')">📊 Details</button>
                        <button class="fullscreen-btn" onclick="toggleFullscreen('voltageBSection', 'voltageBChart')" id="voltageBFullscreenBtn">🔍 Fullscreen</button>
                    </div>
                </div>
                            <div class="chart-container" id="voltageBContainer">
                <canvas id="voltageBChart"></canvas>
                <div class="zoom-indicator" id="voltageBZoomIndicator">Zoom: 1x</div>
            </div>
                <div class="chart-stats" id="voltageBStats"></div>
            </div>
            
            <div class="chart-section voltage-charts" id="voltageCSection">
                <div class="chart-header">
                    <h3>🔋 Voltage Phase C</h3>
                    <div>
                        <button class="chart-details-btn" onclick="showChartDetails('voltageCChart', 'Voltage Phase C', 'V')">📊 Details</button>
                        <button class="fullscreen-btn" onclick="toggleFullscreen('voltageCSection', 'voltageCChart')" id="voltageCFullscreenBtn">🔍 Fullscreen</button>
                    </div>
                </div>
                            <div class="chart-container" id="voltageCContainer">
                <canvas id="voltageCChart"></canvas>
                <div class="zoom-indicator" id="voltageCZoomIndicator">Zoom: 1x</div>
            </div>
                <div class="chart-stats" id="voltageCStats"></div>
            </div>
        </div>
    </div>

    <!-- Modal for chart details -->
    <div id="chartDetailsModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <div class="modal-title" id="modalTitle">Chart Details</div>
                <button class="close-btn" onclick="closeModal()">&times;</button>
            </div>
            <div class="modal-stats" id="modalStats"></div>
            
            <!-- Filter Controls -->
            <div class="modal-filters" id="modalFilters">
                <div class="filters-header">
                    <h4 style="margin: 0; color: #495057; font-size: 16px;">🔍 Filters</h4>
                    <button onclick="clearAllFilters()" class="btn btn-secondary" style="padding: 6px 12px; font-size: 12px;">Clear All</button>
                </div>
                <div class="filters-row">
                    <div class="filter-group">
                        <label for="startDateFilter">Start Date/Time:</label>
                        <input type="datetime-local" id="startDateFilter" onchange="applyFilters()">
                    </div>
                    <div class="filter-group">
                        <label for="endDateFilter">End Date/Time:</label>
                        <input type="datetime-local" id="endDateFilter" onchange="applyFilters()">
                    </div>
                    <div class="filter-group">
                        <label for="typeFilter">Type:</label>
                        <select id="typeFilter" onchange="applyFilters()">
                            <option value="">All Types</option>
                            <option value="Normal">Normal</option>
                            <option value="Peak">Peak</option>
                            <option value="Valley">Valley</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label for="roleFilter">Event Role:</label>
                        <select id="roleFilter" onchange="applyFilters()">
                            <option value="">All Roles</option>
                            <option value="Event Start">Event Start</option>
                            <option value="Event Peak">Event Peak</option>
                            <option value="Event End">Event End</option>
                            <option value="Valley">Valley</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label for="deviceFilter">Device:</label>
                        <select id="deviceFilter" onchange="applyFilters()">
                            <option value="">All Devices</option>
                        </select>
                    </div>
                </div>
            </div>
            
            <div id="modalTableContainer">
                <table class="records-table" id="recordsTable">
                    <thead>
                        <tr>
                            <th>Date/Time</th>
                            <th>Value</th>
                            <th>Delta</th>
                            <th>Accumulated Δ</th>
                            <th>Type</th>
                            <th>Event Role</th>
                            <th>Device</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="recordsTableBody">
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Modal for device discovery -->
    <div id="deviceDiscoveryModal" class="modal">
        <div class="modal-content" style="max-width: 800px;">
            <div class="modal-header">
                <div class="modal-title">🔍 Shelly Device Discovery</div>
                <button class="close-btn" onclick="closeDiscoveryModal()">&times;</button>
            </div>
            <div class="discovery-content">
                <div class="discovery-status" id="discoveryStatus">
                    <p>Select IP ranges to scan for Shelly devices on your network.</p>
                </div>
                
                <!-- IP Range Selection -->
                <div class="range-selection" id="rangeSelection">
                    <h4>📡 Select IP Ranges to Scan:</h4>
                    <div class="range-options" id="rangeOptions">
                        <p style="color: #6c757d; font-style: italic;">Loading suggested ranges...</p>
                    </div>
                    <div class="custom-range">
                        <label for="customRange">🔧 Add Custom Range:</label>
                        <div style="margin-bottom: 10px; font-size: 14px; color: #6c757d;">
                            Enter an IP range in one of these formats:
                        </div>
                        <div style="display: flex; align-items: center; gap: 10px;">
                            <input type="text" id="customRange" placeholder="192.168.1.45-55" style="flex: 1;" onkeypress="if(event.key==='Enter') addCustomRange()">
                            <button onclick="addCustomRange()" class="btn btn-secondary">Add Range</button>
                        </div>
                        <div style="margin-top: 8px; font-size: 12px; color: #6c757d;">
                            💡 <strong>Examples:</strong><br>
                            • <code>192.168.1.45-55</code> → Scan 192.168.1.45 to 192.168.1.55<br>
                            • <code>192.168.1</code> → Scan 192.168.1.1 to 192.168.1.254<br>
                            • <code>192.168.1.50</code> → Scan only 192.168.1.50
                        </div>
                    </div>
                    <div class="selected-ranges">
                        <h5>Selected Ranges:</h5>
                        <div id="selectedRangesList" class="selected-ranges-list">
                            <p style="color: #6c757d; font-style: italic;">No ranges selected</p>
                        </div>
                    </div>
                </div>
                
                <div class="discovery-progress" id="discoveryProgress" style="display: none;">
                    <div class="progress-bar">
                        <div class="progress-fill" id="progressFill"></div>
                    </div>
                    <div class="progress-text" id="progressText">Scanning...</div>
                </div>
                <div class="discovery-controls">
                    <button id="startDiscoveryBtn" onclick="confirmAndStartScan()" class="btn">🔍 Start Discovery</button>
                    <button id="stopDiscoveryBtn" onclick="stopNetworkScan()" class="btn btn-secondary" style="display: none;">⏹️ Stop Discovery</button>
                    <button onclick="closeDiscoveryModal()" class="btn btn-secondary">Close</button>
                </div>
                <div class="discovered-devices" id="discoveredDevices" style="display: none;">
                    <h4>Discovered Shelly Devices:</h4>
                    <div class="devices-list" id="devicesList"></div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Configure Chart.js defaults for consistent 24-hour time format
        Chart.defaults.locale = 'en-GB';
        
        // Register the annotation plugin
        try {
            // The plugin is loaded as 'chartjs-plugin-annotation' in the global scope
            if (typeof window['chartjs-plugin-annotation'] !== 'undefined') {
                Chart.register(window['chartjs-plugin-annotation']);
                console.log('Chart.js annotation plugin registered successfully');
            } else if (typeof window.ChartAnnotation !== 'undefined') {
                Chart.register(window.ChartAnnotation);
                console.log('Chart.js annotation plugin registered successfully');
            } else if (typeof ChartAnnotation !== 'undefined') {
                Chart.register(ChartAnnotation);
                console.log('Chart.js annotation plugin registered successfully');
            } else {
                console.warn('Chart.js annotation plugin not found. Device labels will not be displayed.');
                console.log('Available globals:', Object.keys(window).filter(k => k.toLowerCase().includes('chart')));
            }
        } catch (error) {
            console.warn('Failed to register annotation plugin:', error);
        }
        
        // Global variables
        let charts = {};
        let autoRefreshInterval = null;
        let isAutoRefreshEnabled = true;
        let lastDataUpdate = null;
        let dataCollectionProcess = null;
        let isDataCollectionRunning = false;
        let deviceTracker = null;
        let currentModalData = null;
        
        // Performance optimization: Cache for analysis results
        const analysisCache = new Map();
        const maxCacheSize = 20; // Prevent memory leaks
        
        function getCacheKey(data, type) {
            // Create a simple hash based on data length, first/last values, and type
            if (!data || data.length === 0) return `${type}_empty`;
            const first = data[0];
            const last = data[data.length - 1];
            return `${type}_${data.length}_${first.x}_${first.y}_${last.x}_${last.y}`;
        }
        
        function getCachedOrCompute(data, type, computeFunction) {
            const key = getCacheKey(data, type);
            
            if (analysisCache.has(key)) {
                return analysisCache.get(key);
            }
            
            const result = computeFunction();
            
            // Simple cache eviction to prevent memory leaks
            if (analysisCache.size >= maxCacheSize) {
                const firstKey = analysisCache.keys().next().value;
                analysisCache.delete(firstKey);
            }
            
            analysisCache.set(key, result);
            return result;
        }
        
        // Power consumption thresholds and events tracking
        let powerThresholds = {
            low: 300,
            medium: 1000,
            enabled: true
        };
        let consumptionEvents = [];
        let activeEvents = new Map(); // Track ongoing events by phase
        let eventIdCounter = 0;
        
        // Chart zoom state management
        const chartZoomStates = {};
        
        // Drag-to-zoom state management
        const dragZoomStates = {};
        
        // Chart configuration
        const chartConfig = {
            type: 'line',
            options: {
                responsive: true,
                maintainAspectRatio: false,
                interaction: {
                    intersect: false,
                    mode: 'index'
                },
                plugins: {
                    legend: {
                        display: false  // Disable Chart.js legend completely
                    },
                    annotation: {
                        annotations: {}
                    },
                    tooltip: {
                        backgroundColor: 'rgba(0, 0, 0, 0.8)',
                        titleColor: '#FFD700',
                        bodyColor: '#ffffff',
                        borderColor: 'rgba(255, 255, 255, 0.3)',
                        borderWidth: 1,
                        callbacks: {
                            title: function(context) {
                                const date = new Date(context[0].parsed.x);
                                return date.toLocaleString('en-GB', { 
                                    day: '2-digit',
                                    month: '2-digit', 
                                    year: 'numeric',
                                    hour: '2-digit', 
                                    minute: '2-digit', 
                                    second: '2-digit',
                                    hour12: false 
                                });
                            },
                            label: function(context) {
                                const value = context.parsed.y;
                                let unit;
                                if (context.chart.canvas.id.includes('power')) {
                                    unit = 'W';
                                } else if (context.chart.canvas.id.includes('current')) {
                                    unit = 'A';
                                } else {
                                    unit = 'V';
                                }
                                return `${value.toFixed(3)} ${unit}`;
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        type: 'time',
                        time: {
                            displayFormats: {
                                minute: 'HH:mm',
                                hour: 'HH:mm',
                                day: 'HH:mm',
                                week: 'HH:mm',
                                month: 'HH:mm',
                                quarter: 'HH:mm',
                                year: 'HH:mm'
                            },
                            tooltipFormat: 'dd-MM-yyyy HH:mm:ss'
                        },
                        grid: {
                            color: 'rgba(255, 255, 255, 0.1)',
                            borderColor: 'rgba(255, 255, 255, 0.2)'
                        },
                        ticks: {
                            color: 'rgba(255, 255, 255, 0.8)'
                        },
                        title: {
                            display: true,
                            text: 'Time',
                            color: 'rgba(255, 255, 255, 0.9)'
                        }
                    },
                    y: {
                        beginAtZero: false,
                        grid: {
                            color: 'rgba(255, 255, 255, 0.1)',
                            borderColor: 'rgba(255, 255, 255, 0.2)'
                        },
                        ticks: {
                            color: 'rgba(255, 255, 255, 0.8)'
                        },
                        title: {
                            display: true,
                            text: 'Value',
                            color: 'rgba(255, 255, 255, 0.9)'
                        }
                    }
                },
                elements: {
                    point: {
                        radius: 2,
                        hoverRadius: 6
                    },
                    line: {
                        tension: 0.1
                    }
                },
                onHover: function(event, activeElements) {
                    event.native.target.style.cursor = activeElements.length > 0 ? 'crosshair' : 'default';
                }
            }
                };

        // Zoom functionality
        function initializeChartZoom(chartId) {
            chartZoomStates[chartId] = {
                originalTimeRange: null,
                zoomLevel: 0,
                maxZoomLevel: 5
            };
            
            // Initialize drag-to-zoom state
            dragZoomStates[chartId] = {
                isDragging: false,
                startX: 0,
                startY: 0,
                endX: 0,
                endY: 0,
                overlay: null
            };
        }

        // Reset chart zoom and pan
        function resetChartZoom(chartId) {
            const chart = charts[chartId];
            if (!chart) return;
            
            try {
                // Reset the chart scales to show all data
                if (chart.options.scales.x) {
                    delete chart.options.scales.x.min;
                    delete chart.options.scales.x.max;
                    chart.update('none');
                }
                
                // Reset our internal zoom state
                const zoomState = chartZoomStates[chartId];
                if (zoomState) {
                    zoomState.zoomLevel = 0;
                    zoomState.originalTimeRange = null;
                    updateZoomIndicator(chartId, 0);
                }
                
                console.log('Reset zoom and pan for chart:', chartId);
            } catch (error) {
                console.warn('Error resetting zoom for chart:', chartId, error);
            }
        }

        function zoomChart(chartId, centerTime, zoomIn = true) {
            const chart = charts[chartId];
            const zoomState = chartZoomStates[chartId];
            
            if (!chart || !zoomState) return;

            // Store original time range if this is the first zoom
            if (zoomState.originalTimeRange === null) {
                const xScale = chart.scales.x;
                zoomState.originalTimeRange = {
                    min: xScale.min,
                    max: xScale.max
                };
            }

            if (zoomIn && zoomState.zoomLevel >= zoomState.maxZoomLevel) {
                showStatus('Maximum zoom level reached', 'error');
                return;
            }

            if (!zoomIn && zoomState.zoomLevel <= 0) {
                showStatus('Cannot zoom out further', 'error');
                return;
            }

            // Calculate new zoom level
            zoomState.zoomLevel += zoomIn ? 1 : -1;

            // Calculate zoom factor (each level zooms by 50%)
            const zoomFactor = Math.pow(0.5, zoomState.zoomLevel);
            
            // Get current time range
            const currentMin = chart.scales.x.min;
            const currentMax = chart.scales.x.max;
            const currentRange = currentMax - currentMin;
            
            // Calculate new range
            const newRange = zoomState.originalTimeRange ? 
                (zoomState.originalTimeRange.max - zoomState.originalTimeRange.min) * zoomFactor :
                currentRange * (zoomIn ? 0.5 : 2);
            
            // Center the zoom around the clicked point
            const newMin = centerTime - (newRange / 2);
            const newMax = centerTime + (newRange / 2);
            
            // Apply zoom
            chart.options.scales.x.min = newMin;
            chart.options.scales.x.max = newMax;
            chart.update('none');
            
            // Update zoom indicator
            updateZoomIndicator(chartId, zoomState.zoomLevel);
            
            showStatus(`Zoom level: ${zoomState.zoomLevel}/${zoomState.maxZoomLevel}`, 'success');
        }

        function resetChartZoom(chartId) {
            const chart = charts[chartId];
            const zoomState = chartZoomStates[chartId];
            
            if (!chart || !zoomState) return;

            // Reset to original time range or auto-scale
            if (zoomState.originalTimeRange) {
                chart.options.scales.x.min = zoomState.originalTimeRange.min;
                chart.options.scales.x.max = zoomState.originalTimeRange.max;
            } else {
                delete chart.options.scales.x.min;
                delete chart.options.scales.x.max;
            }
            
            zoomState.zoomLevel = 0;
            zoomState.originalTimeRange = null;
            
            chart.update('none');
            
            // Update zoom indicator
            updateZoomIndicator(chartId, 0);
            
            showStatus('Zoom reset', 'success');
        }

        // Context menu functionality
        function createContextMenu(x, y, chartId, clickTime) {
            // Remove existing context menu
            removeContextMenu();
            
            const contextMenu = document.createElement('div');
            contextMenu.id = 'chartContextMenu';
            contextMenu.style.cssText = `
                position: fixed;
                top: ${y}px;
                left: ${x}px;
                background: white;
                border: 1px solid #ccc;
                border-radius: 5px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                z-index: 10000;
                min-width: 150px;
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                font-size: 14px;
            `;
            
            const menuItems = [
                { text: '🔍 Zoom In', action: () => zoomChart(chartId, clickTime, true) },
                { text: '🔍 Zoom Out', action: () => zoomChart(chartId, clickTime, false) },
                { text: '🔄 Reset Zoom', action: () => resetChartZoom(chartId) }
            ];
            
            menuItems.forEach((item, index) => {
                const menuItem = document.createElement('div');
                menuItem.textContent = item.text;
                menuItem.style.cssText = `
                    padding: 10px 15px;
                    cursor: pointer;
                    border-bottom: ${index < menuItems.length - 1 ? '1px solid #eee' : 'none'};
                    transition: background-color 0.2s;
                `;
                
                menuItem.addEventListener('mouseenter', () => {
                    menuItem.style.backgroundColor = '#f5f5f5';
                });
                
                menuItem.addEventListener('mouseleave', () => {
                    menuItem.style.backgroundColor = 'white';
                });
                
                menuItem.addEventListener('click', () => {
                    item.action();
                    removeContextMenu();
                });
                
                contextMenu.appendChild(menuItem);
            });
            
            document.body.appendChild(contextMenu);
            
            // Adjust position if menu goes off screen
            const rect = contextMenu.getBoundingClientRect();
            if (rect.right > window.innerWidth) {
                contextMenu.style.left = (x - rect.width) + 'px';
            }
            if (rect.bottom > window.innerHeight) {
                contextMenu.style.top = (y - rect.height) + 'px';
            }
        }

        function removeContextMenu() {
            const existingMenu = document.getElementById('chartContextMenu');
            if (existingMenu) {
                existingMenu.remove();
            }
        }

        function updateZoomIndicator(chartId, zoomLevel) {
            const containerId = chartId.replace('Chart', 'Container');
            const indicatorId = chartId.replace('Chart', 'ZoomIndicator');
            
            const container = document.getElementById(containerId);
            const indicator = document.getElementById(indicatorId);
            
            if (container && indicator) {
                if (zoomLevel > 0) {
                    container.classList.add('zoomed');
                    indicator.textContent = `Zoom: ${Math.pow(2, zoomLevel).toFixed(1)}x`;
                } else {
                    container.classList.remove('zoomed');
                    indicator.textContent = 'Zoom: 1x';
                }
            }
        }

        // Drag-to-zoom functionality
        function dragZoomToArea(chartId, startX, endX) {
            const chart = charts[chartId];
            const zoomState = chartZoomStates[chartId];
            
            if (!chart || !zoomState) return;

            // Store original time range if this is the first zoom
            if (zoomState.originalTimeRange === null) {
                const xScale = chart.scales.x;
                zoomState.originalTimeRange = {
                    min: xScale.min,
                    max: xScale.max
                };
            }

            // Convert pixel coordinates to data values
            const xScale = chart.scales.x;
            const minTime = xScale.getValueForPixel(Math.min(startX, endX));
            const maxTime = xScale.getValueForPixel(Math.max(startX, endX));
            
            // Apply zoom
            chart.options.scales.x.min = minTime;
            chart.options.scales.x.max = maxTime;
            chart.update('none');
            
            // Update zoom level (approximate based on range reduction)
            const originalRange = zoomState.originalTimeRange.max - zoomState.originalTimeRange.min;
            const newRange = maxTime - minTime;
            const zoomFactor = originalRange / newRange;
            zoomState.zoomLevel = Math.log2(zoomFactor);
            
            // Update zoom indicator
            updateZoomIndicator(chartId, zoomState.zoomLevel);
            
            showStatus(`Zoomed to selected area (${zoomFactor.toFixed(1)}x)`, 'connected');
        }

        function createDragOverlay(chartId, container) {
            const overlay = document.createElement('div');
            overlay.id = `dragOverlay_${chartId}`;
            overlay.style.cssText = `
                position: absolute;
                border: 2px dashed #FFD700;
                background: rgba(255, 215, 0, 0.1);
                pointer-events: none;
                z-index: 1000;
                display: none;
            `;
            container.appendChild(overlay);
            return overlay;
        }

        function updateDragOverlay(overlay, startX, startY, endX, endY) {
            const left = Math.min(startX, endX);
            const top = Math.min(startY, endY);
            const width = Math.abs(endX - startX);
            const height = Math.abs(endY - startY);
            
            overlay.style.left = left + 'px';
            overlay.style.top = top + 'px';
            overlay.style.width = width + 'px';
            overlay.style.height = height + 'px';
            overlay.style.display = 'block';
        }

        function hideDragOverlay(overlay) {
            if (overlay) {
                overlay.style.display = 'none';
            }
        }

        // Add device event fills to power charts
        function addDeviceEventFills(chartId, data) {
            if (!deviceTracker || !charts[chartId]) return;
            
            // Only add fills to power charts
            if (!chartId.includes('power')) return;
            
            const chart = charts[chartId];
            const phase = getPhaseFromChartId(chartId);
            
            // Get device events from tracker
            const deviceEvents = deviceTracker.deviceEvents || [];
            const config = deviceTracker.getEnvironmentConfig();
            
            if (!config || !config.devices) return;
            
            // Filter events for this phase and with valid duration
            const phaseEvents = deviceEvents.filter(event => 
                event.phase === phase && 
                event.startTime && 
                event.endTime && 
                event.duration > 0
            );
            
            // Get current time range of chart data
            if (data.length === 0) return;
            const dataStartTime = data[0].x;
            const dataEndTime = data[data.length - 1].x;
            
            // Remove any existing device fill datasets
            chart.data.datasets = chart.data.datasets.filter(dataset => 
                !dataset.label || !dataset.label.startsWith('Device Fill:')
            );
            
            // Add fill datasets for each device event
            phaseEvents.forEach((event, index) => {
                // Check if event overlaps with current data range
                if (event.endTime < dataStartTime || event.startTime > dataEndTime) return;
                
                // Get device info
                const device = config.devices.find(d => d.id === event.deviceId);
                if (!device) return;
                
                // Use device color or default to light grey
                const deviceColor = device.color || '#cccccc';
                
                // Convert hex color to rgba with 15% opacity
                const fillColor = hexToRgba(deviceColor, 0.15);
                
                // Get data points that fall within this event period
                const eventDataPoints = data.filter(point => 
                    point.x >= event.startTime && point.x <= event.endTime
                ).sort((a, b) => a.x - b.x);
                
                if (eventDataPoints.length === 0) return;
                
                // Create a dataset that follows the curve for this event
                const fillDataset = {
                    label: '', // Empty label to hide from legend
                    data: eventDataPoints,
                    borderColor: 'transparent',
                    backgroundColor: fillColor,
                    borderWidth: 0,
                    fill: 'origin', // Fill to the x-axis (bottom)
                    pointRadius: 0,
                    pointHoverRadius: 0,
                    tension: 0.4,
                    order: 100 + index, // Ensure it's drawn behind the main datasets
                    hidden: false,
                    deviceId: event.deviceId, // Store device ID for filtering
                    skipLegend: true // Flag to skip this dataset in legend
                };
                
                // Add the fill dataset to the chart
                chart.data.datasets.push(fillDataset);
            });
        }
        
        // Helper function to convert hex color to rgba
        function hexToRgba(hex, alpha) {
            // Remove # if present
            hex = hex.replace('#', '');
            
            // Parse hex color
            const r = parseInt(hex.substr(0, 2), 16);
            const g = parseInt(hex.substr(2, 2), 16);
            const b = parseInt(hex.substr(4, 2), 16);
            
            return `rgba(${r}, ${g}, ${b}, ${alpha})`;
        }

        // Add device annotations to power charts
        function addDeviceAnnotations(chartId, data) {
            if (!deviceTracker || !charts[chartId]) return;
            
            // Check if device labels should be shown
            const showLabels = document.getElementById('showDeviceLabels')?.checked !== false;
            if (!showLabels) return;
            
            const chart = charts[chartId];
            const phase = getPhaseFromChartId(chartId);
            const eventThreshold = parseFloat(document.getElementById('eventThreshold')?.value || 10);
            
            // Analyze data for peaks and valleys
            const chartType = chartId.includes('power') ? 'power' : 'other';
            const { peaks, valleys } = analyzeChartData(data, chartType);
            const accumulatedDeltas = calculateAccumulatedDeltas(data, peaks, valleys);
            
            // Clear existing annotations
            if (!chart.options.plugins) chart.options.plugins = {};
            if (!chart.options.plugins.annotation) chart.options.plugins.annotation = {};
            chart.options.plugins.annotation.annotations = {};
            
            // Add device event fills first (so they appear behind other annotations)
            addDeviceEventFills(chartId, data);
            
            // Add annotations for significant events with device associations
            [...peaks, ...valleys].forEach((index, annotationIndex) => {
                const point = data[index];
                const accumulatedDelta = accumulatedDeltas[index];
                
                // Check if this event meets the threshold
                if (!accumulatedDelta || Math.abs(accumulatedDelta) < eventThreshold) return;
                
                const eventType = peaks.includes(index) ? 'peak' : 'valley';
                
                // Check if this event has a device association
                const deviceAssociation = getDeviceAssociation(point.x, phase, eventType, accumulatedDelta);
                
                if (deviceAssociation) {
                    const annotationId = `device_${annotationIndex}`;
                    chart.options.plugins.annotation.annotations[annotationId] = {
                        type: 'label',
                        xValue: point.x,
                        yValue: point.y,
                        backgroundColor: eventType === 'peak' ? 'rgba(50, 205, 50, 0.9)' : 'rgba(0, 255, 127, 0.9)',
                        borderColor: eventType === 'peak' ? '#228B22' : '#006400',
                        borderWidth: 2,
                        borderRadius: 6,
                        color: '#000',
                        content: deviceAssociation.deviceName,
                        font: {
                            size: 10,
                            weight: 'bold'
                        },
                        padding: 4,
                        position: 'top',
                        xAdjust: 0,
                        yAdjust: eventType === 'peak' ? -15 : 15
                    };
                }
            });
            
            // Add event start and end point markers for complete device events
            addEventStartMarkers(chartId, data, phase);
            addEventEndMarkers(chartId, data, phase);
        }
        
        // Add event start point markers to the chart
        function addEventStartMarkers(chartId, data, phase) {
            if (!deviceTracker || !charts[chartId]) return;
            
            const chart = charts[chartId];
            const deviceEvents = deviceTracker.deviceEvents || [];
            const config = deviceTracker.getEnvironmentConfig();
            
            if (!config || !config.devices) return;
            
            // Filter events for this phase and with valid duration
            const phaseEvents = deviceEvents.filter(event => 
                event.phase === phase && 
                event.startTime && 
                event.endTime && 
                event.duration > 0
            );
            
            // Get current time range of chart data
            if (data.length === 0) return;
            const dataStartTime = data[0].x;
            const dataEndTime = data[data.length - 1].x;
            
            // Add start point markers for each device event
            phaseEvents.forEach((event, index) => {
                // Check if event overlaps with current data range
                if (event.endTime < dataStartTime || event.startTime > dataEndTime) return;
                
                // Get device info
                const device = config.devices.find(d => d.id === event.deviceId);
                if (!device) return;
                
                // Find the closest data point to the event start time
                const startDataPoint = data.reduce((closest, point) => {
                    const currentDiff = Math.abs(point.x - event.startTime);
                    const closestDiff = Math.abs(closest.x - event.startTime);
                    return currentDiff < closestDiff ? point : closest;
                });
                
                if (startDataPoint) {
                    const startAnnotationId = `event_start_${index}`;
                    chart.options.plugins.annotation.annotations[startAnnotationId] = {
                        type: 'point',
                        xValue: startDataPoint.x,
                        yValue: startDataPoint.y,
                        backgroundColor: device.color || '#4A90E2',
                        borderColor: '#ffffff',
                        borderWidth: 2,
                        radius: 8,
                        pointStyle: 'triangle',
                        rotation: 0,
                        // Add click handler for editing
                        onClick: function(ctx, event) {
                            handleEventStartClick(event.deviceId, event.startTime, startDataPoint.x, startDataPoint.y);
                        }
                    };
                }
            });
        }
        
        // Add event end point markers to the chart
        function addEventEndMarkers(chartId, data, phase) {
            if (!deviceTracker || !charts[chartId]) return;
            
            const chart = charts[chartId];
            const deviceEvents = deviceTracker.deviceEvents || [];
            const config = deviceTracker.getEnvironmentConfig();
            
            if (!config || !config.devices) return;
            
            // Filter events for this phase and with valid duration
            const phaseEvents = deviceEvents.filter(event => 
                event.phase === phase && 
                event.startTime && 
                event.endTime && 
                event.duration > 0
            );
            
            // Get current time range of chart data
            if (data.length === 0) return;
            const dataStartTime = data[0].x;
            const dataEndTime = data[data.length - 1].x;
            
            // Add end point markers for each device event
            phaseEvents.forEach((event, index) => {
                // Check if event overlaps with current data range
                if (event.endTime < dataStartTime || event.startTime > dataEndTime) return;
                
                // Get device info
                const device = config.devices.find(d => d.id === event.deviceId);
                if (!device) return;
                
                // Find the closest data point to the event end time
                const endDataPoint = data.reduce((closest, point) => {
                    const currentDiff = Math.abs(point.x - event.endTime);
                    const closestDiff = Math.abs(closest.x - event.endTime);
                    return currentDiff < closestDiff ? point : closest;
                });
                
                if (endDataPoint) {
                    const endAnnotationId = `event_end_${index}`;
                    chart.options.plugins.annotation.annotations[endAnnotationId] = {
                        type: 'point',
                        xValue: endDataPoint.x,
                        yValue: endDataPoint.y,
                        backgroundColor: device.color || '#4A90E2',
                        borderColor: '#ffffff',
                        borderWidth: 2,
                        radius: 8,
                        pointStyle: 'triangle',
                        rotation: 180, // Rotate triangle to point down for end marker
                        // Add click handler for editing
                        onClick: function(ctx, event) {
                            handleEventEndClick(event.deviceId, event.endTime, endDataPoint.x, endDataPoint.y);
                        }
                    };
                }
            });
        }
        
        // Get device association for a specific event
        function getDeviceAssociation(timestamp, phase, eventType, accumulatedDelta) {
            if (!deviceTracker) return null;
            
            try {
                // Check if there's a stored association for this specific event
                const associations = deviceTracker.deviceAssociations;
                if (!associations || !associations.length) {
                    console.log('No device associations found in deviceTracker');
                    return null;
                }
                
                // Look for associations within a small time window (±5 seconds)
                const timeWindow = 5000; // 5 seconds in milliseconds
                const matchingAssociation = associations.find(assoc => {
                    return Math.abs(assoc.timestamp - timestamp) <= timeWindow &&
                           assoc.phase === phase &&
                           (assoc.type === eventType || assoc.type === 'start');
                });
                
                if (matchingAssociation && matchingAssociation.deviceId) {
                    console.log('Found matching association:', matchingAssociation);
                    // Get device details from configuration
                    const config = deviceTracker.getEnvironmentConfig();
                    if (config && config.devices) {
                        const device = config.devices.find(d => d.id === matchingAssociation.deviceId);
                        if (device) {
                            console.log('Device association found:', device.name);
                            return {
                                deviceName: device.name,
                                confidence: matchingAssociation.confidence || 1.0
                            };
                        }
                    }
                }
                
                // If no stored association, try to get suggestions
                const event = {
                    type: eventType,
                    phase: phase,
                    powerDelta: accumulatedDelta,
                    timestamp: timestamp
                };
                
                const suggestions = deviceTracker.analyzeEvent(event);
                if (suggestions && suggestions.length > 0) {
                    const topSuggestion = suggestions[0];
                    if (topSuggestion.confidence > 0.8) { // Only show very high-confidence suggestions
                        return {
                            deviceName: topSuggestion.device.name + ' (suggested)',
                            confidence: topSuggestion.confidence
                        };
                    }
                }
            } catch (error) {
                console.warn('Error getting device association:', error);
            }
            
            return null;
        }
        
        // Create custom legend for power charts
        function refreshChartLegend(chartId) {
            const chart = charts[chartId];
            if (!chart) {
                console.log(`No chart found for ${chartId}`);
                return;
            }
            
            // Only create legends for power charts
            if (!chartId.includes('power')) return;
            
            const legendId = chartId.replace('Chart', 'Legend');
            const legendContainer = document.getElementById(legendId);
            if (!legendContainer) {
                console.log(`No legend container found for ${legendId}`);
                return;
            }
            
            // Clear existing legend
            legendContainer.innerHTML = '';
            
            // Find main datasets to show in legend
            const validLabels = [
                'POWERA', 'POWERB', 'POWERC',
                'POWERA (Trend)', 'POWERB (Trend)', 'POWERC (Trend)'
            ];
            
            console.log(`Creating legend for ${chartId}, datasets:`, chart.data.datasets.map(d => d.label));
            
            let legendItemsCreated = 0;
            chart.data.datasets.forEach((dataset, index) => {
                const label = dataset.label || '';
                
                if (validLabels.includes(label)) {
                    const legendItem = document.createElement('div');
                    legendItem.className = `legend-item ${dataset.hidden ? 'hidden' : ''}`;
                    legendItem.onclick = () => toggleDataset(chartId, index);
                    
                    const colorIndicator = document.createElement('div');
                    colorIndicator.className = 'legend-color';
                    colorIndicator.style.backgroundColor = dataset.borderColor || dataset.backgroundColor;
                    
                    const textElement = document.createElement('span');
                    textElement.className = 'legend-text';
                    textElement.textContent = label;
                    
                    legendItem.appendChild(colorIndicator);
                    legendItem.appendChild(textElement);
                    legendContainer.appendChild(legendItem);
                    legendItemsCreated++;
                }
            });
            
            console.log(`Created ${legendItemsCreated} legend items for ${chartId}`);
        }
        
        // Toggle dataset visibility
        function toggleDataset(chartId, datasetIndex) {
            const chart = charts[chartId];
            if (!chart) return;
            
            const dataset = chart.data.datasets[datasetIndex];
            dataset.hidden = !dataset.hidden;
            
            chart.update('active');
            refreshChartLegend(chartId);
        }

        // Refresh device annotations and styling on all power charts
        function refreshDeviceAnnotations() {
            ['powerAChart', 'powerBChart', 'powerCChart'].forEach(chartId => {
                if (charts[chartId] && charts[chartId].data.datasets[0].data.length > 0) {
                    const data = charts[chartId].data.datasets[0].data;
                    styleDataPoints(chartId, data);
                    addDeviceAnnotations(chartId, data);
                    addDeviceEventFills(chartId, data);
                    charts[chartId].update('active'); // Use 'active' mode to update legend
                    
                    // Force legend refresh after chart update
                    setTimeout(() => {
                        refreshChartLegend(chartId);
                    }, 100);
                }
            });
        }
        
        // Toggle device labels visibility
        function toggleDeviceLabels() {
            const showLabels = document.getElementById('showDeviceLabels').checked;
            
            ['powerAChart', 'powerBChart', 'powerCChart'].forEach(chartId => {
                if (charts[chartId]) {
                    if (showLabels) {
                        // Refresh annotations and styling
                        if (charts[chartId].data.datasets[0].data.length > 0) {
                            const data = charts[chartId].data.datasets[0].data;
                            styleDataPoints(chartId, data);
                            addDeviceAnnotations(chartId, data);
                        }
                    } else {
                        // Clear all annotations and reset point styling
                        if (charts[chartId].options && charts[chartId].options.plugins && charts[chartId].options.plugins.annotation) {
                            charts[chartId].options.plugins.annotation.annotations = {};
                        }
                        // Reset point styling to defaults
                        if (charts[chartId].data.datasets[0].data.length > 0) {
                            styleDataPoints(chartId, charts[chartId].data.datasets[0].data);
                        }
                    }
                    
                    // Force legend refresh after toggling device labels
                    refreshChartLegend(chartId);
                    charts[chartId].update('active'); // Use 'active' mode to update legend
                }
            });
            
            showStatus(`Device labels and colors ${showLabels ? 'enabled' : 'disabled'}`, 'connected');
        }
        
        // Initialize charts
        function initializeCharts() {
            const chartIds = [
                'powerAChart', 'powerBChart', 'powerCChart',
                'currentAChart', 'currentBChart', 'currentCChart',
                'voltageAChart', 'voltageBChart', 'voltageCChart'
            ];
            
            const colors = {
                power: ['#FFD700', '#FF8C00', '#FF6347'],     // Gold, Dark Orange, Tomato
                current: ['#00FFFF', '#1E90FF', '#9370DB'],   // Cyan, Dodger Blue, Medium Purple  
                voltage: ['#00FF7F', '#32CD32', '#ADFF2F']    // Spring Green, Lime Green, Green Yellow
            };
            
            chartIds.forEach((id, index) => {
                const ctx = document.getElementById(id).getContext('2d');
                const isPowerChart = id.includes('power');
                const isCurrentChart = id.includes('current');
                const isVoltageChart = id.includes('voltage');
                
                let colorIndex, color, yAxisLabel;
                
                if (isPowerChart) {
                    colorIndex = index % 3;
                    color = colors.power[colorIndex];
                    yAxisLabel = 'Power (W)';
                } else if (isCurrentChart) {
                    colorIndex = (index - 3) % 3;
                    color = colors.current[colorIndex];
                    yAxisLabel = 'Current (A)';
                } else if (isVoltageChart) {
                    colorIndex = (index - 6) % 3;
                    color = colors.voltage[colorIndex];
                    yAxisLabel = 'Voltage (V)';
                }
                
                const config = JSON.parse(JSON.stringify(chartConfig));
                
                // Create datasets array - add interpolated curve for power charts
                const datasets = [{
                    label: id.replace('Chart', '').toUpperCase(),
                    data: [],
                    borderColor: color,
                    backgroundColor: color + '15',
                    borderWidth: 3,
                    pointBackgroundColor: [], // Will be populated dynamically
                    pointBorderColor: [], // Will be populated dynamically
                    pointBorderWidth: [], // Will be populated dynamically
                    pointRadius: [], // Will be populated dynamically
                    pointHoverRadius: 6,
                    fill: true
                }];
                
                // Add interpolated curve dataset for power charts only
                if (isPowerChart) {
                    const interpolatedColor = color.replace('FF', 'AA'); // Make it more transparent
                    datasets.push({
                        label: id.replace('Chart', '').toUpperCase() + ' (Trend)',
                        data: [],
                        borderColor: interpolatedColor,
                        backgroundColor: 'transparent',
                        borderWidth: 2,
                        pointBackgroundColor: [], // Will be populated dynamically
                        pointBorderColor: [], // Will be populated dynamically
                        pointBorderWidth: [], // Will be populated dynamically
                        pointRadius: [], // Will be populated dynamically
                        pointHoverRadius: 4,
                        fill: false,
                        borderDash: [5, 5], // Dashed line for trend
                        tension: 0.4 // Smooth curve
                    });
                }
                
                config.data = { datasets: datasets };
                
                config.options.scales.y.title.text = yAxisLabel;
                
                // Explicitly ensure 24-hour format for this chart
                if (!config.options.scales.x.time) {
                    config.options.scales.x.time = {};
                }
                config.options.scales.x.time.displayFormats = {
                    millisecond: 'HH:mm:ss.SSS',
                    second: 'HH:mm:ss',
                    minute: 'HH:mm',
                    hour: 'HH:mm',
                    day: 'HH:mm',
                    week: 'HH:mm',
                    month: 'HH:mm',
                    quarter: 'HH:mm',
                    year: 'HH:mm'
                };
                config.options.scales.x.time.tooltipFormat = 'dd-MM-yyyy HH:mm:ss';
                
                try {
                    charts[id] = new Chart(ctx, config);
                    
                    // Initialize custom legend for power charts
                    if (id.includes('power')) {
                        setTimeout(() => {
                            refreshChartLegend(id);
                        }, 500);
                    }
                } catch (error) {
                    console.error(`Failed to create chart ${id}:`, error);
                }
                
                // Initialize zoom state for this chart
                initializeChartZoom(id);
                
                // Add right-click event listener for context menu
                ctx.canvas.addEventListener('contextmenu', function(event) {
                    event.preventDefault();
                    
                    const rect = ctx.canvas.getBoundingClientRect();
                    const x = event.clientX - rect.left;
                    const y = event.clientY - rect.top;
                    
                    // Get the time value at the clicked position
                    const canvasPosition = Chart.helpers.getRelativePosition(event, charts[id]);
                    const dataX = charts[id].scales.x.getValueForPixel(canvasPosition.x);
                    
                    if (dataX) {
                        createContextMenu(event.clientX, event.clientY, id, dataX);
                    }
                });
                
                // Add click event listener to close context menu
                ctx.canvas.addEventListener('click', function(event) {
                    removeContextMenu();
                });

                // Add double-click event listener for device association
                ctx.canvas.addEventListener('dblclick', function(event) {
                    event.preventDefault();
                    removeContextMenu();
                    
                    const rect = ctx.canvas.getBoundingClientRect();
                    const canvasPosition = Chart.helpers.getRelativePosition(event, charts[id]);
                    
                    // Find the nearest data point
                    const nearestPoint = findNearestDataPoint(charts[id], canvasPosition);
                    
                    if (nearestPoint && isPowerChart) {
                        // Only allow association for power charts
                        handleDataPointDoubleClick(id, nearestPoint.index, nearestPoint.point);
                    }
                });

                // Add drag-to-zoom event listeners
                const container = document.getElementById(id.replace('Chart', 'Container'));
                const dragState = dragZoomStates[id];
                
                // Create drag overlay
                dragState.overlay = createDragOverlay(id, container);
                
                // Add pan state for Alt+drag
                let panState = {
                    isPanning: false,
                    startX: 0,
                    startTime: null,
                    originalMin: null,
                    originalMax: null
                };
                
                ctx.canvas.addEventListener('mousedown', function(event) {
                    if (event.button === 0) { // Left mouse button
                        const rect = ctx.canvas.getBoundingClientRect();
                        
                        if (event.altKey) {
                            // Alt+drag for panning
                            panState.isPanning = true;
                            panState.startX = event.clientX - rect.left;
                            
                            // Store original time range
                            const chart = charts[id];
                            if (chart && chart.scales.x) {
                                panState.originalMin = chart.scales.x.min;
                                panState.originalMax = chart.scales.x.max;
                                
                                // Convert mouse position to time
                                const canvasPosition = Chart.helpers.getRelativePosition(event, chart);
                                panState.startTime = chart.scales.x.getValueForPixel(canvasPosition.x);
                            }
                            
                            ctx.canvas.style.cursor = 'grabbing';
                            event.preventDefault();
                        } else if (!event.ctrlKey && !event.shiftKey && !event.metaKey) {
                            // Regular drag for zoom selection
                            dragState.isDragging = true;
                            dragState.startX = event.clientX - rect.left;
                            dragState.startY = event.clientY - rect.top;
                            dragState.endX = dragState.startX;
                            dragState.endY = dragState.startY;
                            
                            // Add dragging class and change cursor
                            ctx.canvas.classList.add('dragging');
                            ctx.canvas.style.cursor = 'crosshair';
                            
                            // Prevent text selection
                            event.preventDefault();
                        }
                    }
                });
                
                ctx.canvas.addEventListener('mousemove', function(event) {
                    if (panState.isPanning) {
                        // Handle panning
                        const rect = ctx.canvas.getBoundingClientRect();
                        const currentX = event.clientX - rect.left;
                        const deltaX = currentX - panState.startX;
                        
                        const chart = charts[id];
                        if (chart && chart.scales.x && panState.originalMin !== null && panState.originalMax !== null) {
                            // Calculate time range
                            const timeRange = panState.originalMax - panState.originalMin;
                            const chartWidth = chart.chartArea.right - chart.chartArea.left;
                            
                            // Calculate time delta based on pixel movement
                            const timeDelta = (deltaX / chartWidth) * timeRange;
                            
                            // Apply pan (reverse direction for intuitive feel)
                            const newMin = panState.originalMin - timeDelta;
                            const newMax = panState.originalMax - timeDelta;
                            
                            // Update chart scales
                            chart.options.scales.x.min = newMin;
                            chart.options.scales.x.max = newMax;
                            chart.update('none'); // Update without animation for smooth panning
                        }
                    } else if (dragState.isDragging) {
                        // Handle drag-to-zoom
                        // Cancel drag if modifier keys are pressed during drag
                        if (event.altKey || event.ctrlKey || event.shiftKey || event.metaKey) {
                            dragState.isDragging = false;
                            hideDragOverlay(dragState.overlay);
                            ctx.canvas.classList.remove('dragging');
                            ctx.canvas.style.cursor = 'default';
                            return;
                        }
                        
                        const rect = ctx.canvas.getBoundingClientRect();
                        dragState.endX = event.clientX - rect.left;
                        dragState.endY = event.clientY - rect.top;
                        
                        // Update drag overlay
                        updateDragOverlay(
                            dragState.overlay,
                            dragState.startX,
                            dragState.startY,
                            dragState.endX,
                            dragState.endY
                        );
                    }
                });
                
                ctx.canvas.addEventListener('mouseup', function(event) {
                    if (panState.isPanning && event.button === 0) {
                        // End panning
                        panState.isPanning = false;
                        ctx.canvas.style.cursor = 'default';
                        console.log('Pan completed for chart:', id);
                    } else if (dragState.isDragging && event.button === 0 && !event.altKey && !event.ctrlKey && !event.shiftKey && !event.metaKey) {
                        // End drag-to-zoom
                        dragState.isDragging = false;
                        
                        // Hide drag overlay
                        hideDragOverlay(dragState.overlay);
                        
                        // Remove dragging class and reset cursor
                        ctx.canvas.classList.remove('dragging');
                        ctx.canvas.style.cursor = 'default';
                        
                        // Check if drag was significant (minimum 20 pixels)
                        const dragDistance = Math.abs(dragState.endX - dragState.startX);
                        if (dragDistance > 20) {
                            // Perform zoom to selected area
                            dragZoomToArea(id, dragState.startX, dragState.endX);
                        }
                    } else if (dragState.isDragging) {
                        // Cancel drag if modifier keys are pressed
                        dragState.isDragging = false;
                        hideDragOverlay(dragState.overlay);
                        ctx.canvas.classList.remove('dragging');
                        ctx.canvas.style.cursor = 'default';
                    }
                });
                
                // Handle mouse leave to cancel drag
                ctx.canvas.addEventListener('mouseleave', function(event) {
                    if (panState.isPanning) {
                        panState.isPanning = false;
                        ctx.canvas.style.cursor = 'default';
                    }
                    if (dragState.isDragging) {
                        dragState.isDragging = false;
                        hideDragOverlay(dragState.overlay);
                        ctx.canvas.classList.remove('dragging');
                        ctx.canvas.style.cursor = 'default';
                    }
                });

                // Add Alt+Scroll zoom functionality
                ctx.canvas.addEventListener('wheel', function(event) {
                    if (event.altKey) {
                        event.preventDefault(); // Prevent page scroll
                        
                        const chart = charts[id];
                        if (!chart || !chart.scales.x) return;
                        
                        // Get mouse position relative to chart
                        const rect = ctx.canvas.getBoundingClientRect();
                        const canvasPosition = Chart.helpers.getRelativePosition(event, chart);
                        const centerTime = chart.scales.x.getValueForPixel(canvasPosition.x);
                        
                        // Get current time range
                        const currentMin = chart.scales.x.min || chart.scales.x.options.min;
                        const currentMax = chart.scales.x.max || chart.scales.x.options.max;
                        
                        if (currentMin === undefined || currentMax === undefined) return;
                        
                        const currentRange = currentMax - currentMin;
                        
                        // Calculate zoom factor (negative deltaY = zoom in, positive = zoom out)
                        const zoomFactor = event.deltaY > 0 ? 1.2 : 0.8; // Zoom out / Zoom in
                        const newRange = currentRange * zoomFactor;
                        
                        // Calculate new bounds centered around mouse position
                        const mouseRatio = (centerTime - currentMin) / currentRange;
                        const newMin = centerTime - (newRange * mouseRatio);
                        const newMax = centerTime + (newRange * (1 - mouseRatio));
                        
                        // Apply zoom
                        chart.options.scales.x.min = newMin;
                        chart.options.scales.x.max = newMax;
                        chart.update('none'); // Update without animation for smooth zooming
                        
                        console.log('Alt+Scroll zoom applied to chart:', id);
                    }
                });
            });
        }
        
        // Create interpolated curve using moving average
        function createInterpolatedCurve(data, windowSize = 5) {
            if (data.length < windowSize) return data;
            
            const interpolated = [];
            
            for (let i = 0; i < data.length; i++) {
                const start = Math.max(0, i - Math.floor(windowSize / 2));
                const end = Math.min(data.length, i + Math.floor(windowSize / 2) + 1);
                
                let sum = 0;
                let count = 0;
                
                for (let j = start; j < end; j++) {
                    sum += data[j].y;
                    count++;
                }
                
                interpolated.push({
                    x: data[i].x,
                    y: sum / count
                });
            }
            
            return interpolated;
        }

        // Create polynomial interpolation (for smoother curves)
        function createPolynomialInterpolation(data, degree = 3) {
            if (data.length < 5) return data;
            
            // Use exponential smoothing for better trend detection
            const smoothingFactor = parseFloat(document.getElementById('smoothingFactor')?.value || 0.3);
            return createExponentialSmoothing(data, smoothingFactor);
        }

        // Exponential smoothing for trend analysis
        function createExponentialSmoothing(data, alpha = 0.3) {
            if (data.length === 0) return data;
            
            const smoothed = [];
            let s = data[0].y; // Initialize with first value
            
            for (let i = 0; i < data.length; i++) {
                if (i === 0) {
                    smoothed.push({ x: data[i].x, y: s });
                } else {
                    s = alpha * data[i].y + (1 - alpha) * s;
                    smoothed.push({ x: data[i].x, y: s });
                }
            }
            
            return smoothed;
        }

        // Parse CSV data
        function parseCSVData(csvText) {
            const lines = csvText.trim().split('\n');
            const data = [];
            const averageVoltage = parseFloat(document.getElementById('averageVoltage').value) || 230;
            
            lines.forEach(line => {
                if (line.trim()) {
                    const values = line.split(',');
                    if (values.length >= 18) {
                        // Use average voltage when voltage reading is 0
                        const voltage_a = parseFloat(values[3]) || averageVoltage;
                        const voltage_b = parseFloat(values[4]) || averageVoltage;
                        const voltage_c = parseFloat(values[5]) || averageVoltage;
                        
                        data.push({
                            mac: values[0],
                            timestamp: parseInt(values[1]) * 1000, // Convert to milliseconds
                            reading_id: parseInt(values[2]),
                            voltage_a: voltage_a,
                            voltage_b: voltage_b,
                            voltage_c: voltage_c,
                            current_a: parseFloat(values[6]),
                            current_b: parseFloat(values[7]),
                            current_c: parseFloat(values[8]),
                            // current_n: values[9] ? parseFloat(values[9]) : null, // Not present in CSV
                            apower_a: parseFloat(values[9]),
                            apower_b: parseFloat(values[10]),
                            apower_c: parseFloat(values[11]),
                            aprtpower_a: parseFloat(values[12]),
                            aprtpower_b: parseFloat(values[13]),
                            aprtpower_c: parseFloat(values[14]),
                            pf_a: parseFloat(values[15]),
                            pf_b: parseFloat(values[16]),
                            pf_c: parseFloat(values[17])
                        });
                    }
                }
            });
            
            return data;
        }
        
        // Filter data by time range
        function filterDataByTimeRange(data, hours) {
            const now = Date.now();
            const timeRange = hours * 60 * 60 * 1000; // Convert hours to milliseconds
            const cutoffTime = now - timeRange;
            
            return data.filter(reading => reading.timestamp >= cutoffTime);
        }
        
        // Calculate statistics
        function calculateStats(data) {
            if (data.length === 0) return { min: 0, max: 0, avg: 0, current: 0 };
            
            const values = data.map(d => d.y);
            const min = Math.min(...values);
            const max = Math.max(...values);
            const avg = values.reduce((sum, val) => sum + val, 0) / values.length;
            const current = values[values.length - 1];
            
            return { min, max, avg, current };
        }
        
        // Update chart statistics
        function updateChartStats(chartId, data) {
            const statsId = chartId.replace('Chart', 'Stats');
            const statsElement = document.getElementById(statsId);
            const stats = calculateStats(data);
            
            let unit;
            if (chartId.includes('power')) {
                unit = 'W';
            } else if (chartId.includes('current')) {
                unit = 'A';
            } else {
                unit = 'V';
            }
            
            statsElement.innerHTML = `
                <div class="stat">
                    <div class="stat-label">Current</div>
                    <div class="stat-value">${stats.current.toFixed(3)} ${unit}</div>
                </div>
                <div class="stat">
                    <div class="stat-label">Average</div>
                    <div class="stat-value">${stats.avg.toFixed(3)} ${unit}</div>
                </div>
                <div class="stat">
                    <div class="stat-label">Min</div>
                    <div class="stat-value">${stats.min.toFixed(3)} ${unit}</div>
                </div>
                <div class="stat">
                    <div class="stat-label">Max</div>
                    <div class="stat-value">${stats.max.toFixed(3)} ${unit}</div>
                </div>
            `;
        }
        
        // Style data points based on device associations
        function styleDataPoints(chartId, data) {
            if (!charts[chartId] || !deviceTracker) return;
            
            const chart = charts[chartId];
            const phase = getPhaseFromChartId(chartId);
            const eventThreshold = parseFloat(document.getElementById('eventThreshold')?.value || 10);
            const showDeviceColors = document.getElementById('showDeviceLabels')?.checked !== false;
            
            // Get default colors for this chart
            const isPowerChart = chartId.includes('power');
            const isCurrentChart = chartId.includes('current');
            const isVoltageChart = chartId.includes('voltage');
            
            let defaultColor;
            if (isPowerChart) {
                const colorIndex = ['powerAChart', 'powerBChart', 'powerCChart'].indexOf(chartId);
                defaultColor = ['#FFD700', '#FF8C00', '#FF6347'][colorIndex];
            } else if (isCurrentChart) {
                const colorIndex = ['currentAChart', 'currentBChart', 'currentCChart'].indexOf(chartId);
                defaultColor = ['#00FFFF', '#1E90FF', '#9370DB'][colorIndex];
            } else if (isVoltageChart) {
                const colorIndex = ['voltageAChart', 'voltageBChart', 'voltageCChart'].indexOf(chartId);
                defaultColor = ['#00FF7F', '#32CD32', '#ADFF2F'][colorIndex];
            }
            
            // Initialize arrays for point styling
            const pointBackgroundColors = [];
            const pointBorderColors = [];
            const pointBorderWidths = [];
            const pointRadii = [];
            
            // Analyze data for peaks and valleys (only for power charts)
            let peaks = [], valleys = [], accumulatedDeltas = [];
            if (isPowerChart) {
                const chartType = 'power';
                const analysis = analyzeChartData(data, chartType);
                peaks = analysis.peaks;
                valleys = analysis.valleys;
                accumulatedDeltas = calculateAccumulatedDeltas(data, peaks, valleys);
            }
            
                         // Style each data point
             data.forEach((point, index) => {
                 let backgroundColor = defaultColor;
                 let borderColor = '#ffffff';
                 let borderWidth = 2;
                 let radius = 0; // Default to hidden for normal readings
                 
                 // Check if this point has a device association (only for power charts)
                 if (isPowerChart && showDeviceColors) {
                     const accumulatedDelta = accumulatedDeltas[index];
                     
                     // Check if this is a significant event
                     const isPeak = peaks.includes(index);
                     const isValley = valleys.includes(index);
                     const isSignificantEvent = (isPeak || isValley) && 
                                              accumulatedDelta && 
                                              Math.abs(accumulatedDelta) >= eventThreshold;
                     
                     if (isSignificantEvent) {
                         const eventType = isPeak ? 'peak' : 'valley';
                         const deviceAssociation = getDeviceAssociation(point.x, phase, eventType, accumulatedDelta);
                         
                         if (deviceAssociation) {
                             // Device-associated points get special styling
                             if (isPeak) {
                                 backgroundColor = '#32CD32'; // Lime green for peak events
                                 borderColor = '#228B22'; // Forest green border
                             } else {
                                 backgroundColor = '#00FF7F'; // Spring green for valley events
                                 borderColor = '#006400'; // Dark green border
                             }
                             borderWidth = 3;
                             radius = 6; // Larger radius for associated events
                         } else if (isPeak || isValley) {
                             // Unassociated events get subtle highlighting
                             backgroundColor = isPeak ? '#FFA500' : '#87CEEB'; // Orange for peaks, sky blue for valleys
                             borderColor = '#ffffff';
                             borderWidth = 2;
                             radius = 4; // Medium radius for unassociated events
                         }
                     }
                     // Normal readings remain hidden (radius = 0)
                 } else if (!isPowerChart) {
                     // For current and voltage charts, show small points for all data
                     radius = 2;
                 }
                 
                 pointBackgroundColors.push(backgroundColor);
                 pointBorderColors.push(borderColor);
                 pointBorderWidths.push(borderWidth);
                 pointRadii.push(radius);
             });
            
            // Apply styling to main dataset
            chart.data.datasets[0].pointBackgroundColor = pointBackgroundColors;
            chart.data.datasets[0].pointBorderColor = pointBorderColors;
            chart.data.datasets[0].pointBorderWidth = pointBorderWidths;
            chart.data.datasets[0].pointRadius = pointRadii;
            
                         // Apply styling to interpolated curve (for power charts)
             if (isPowerChart && chart.data.datasets.length > 1) {
                 // For interpolated curve, use smaller points with same colors
                 chart.data.datasets[1].pointBackgroundColor = pointBackgroundColors.map(color => color);
                 chart.data.datasets[1].pointBorderColor = pointBorderColors.map(color => color);
                 chart.data.datasets[1].pointBorderWidth = pointBorderWidths.map(width => Math.max(1, width - 1));
                 chart.data.datasets[1].pointRadius = pointRadii.map(radius => {
                     // Only show points for significant events (radius > 0), make them smaller
                     return radius > 0 ? Math.max(1, radius - 2) : 0;
                 });
             }
        }
        
        // Update charts with new data
        function updateCharts(data) {
            const timeRange = parseFloat(document.getElementById('timeRange').value);
            const filteredData = filterDataByTimeRange(data, timeRange);
            
            // Prepare data for each chart
            const chartData = {
                powerAChart: filteredData.map(d => ({ x: d.timestamp, y: d.apower_a })),
                powerBChart: filteredData.map(d => ({ x: d.timestamp, y: d.apower_b })),
                powerCChart: filteredData.map(d => ({ x: d.timestamp, y: d.apower_c })),
                currentAChart: filteredData.map(d => ({ x: d.timestamp, y: d.current_a })),
                currentBChart: filteredData.map(d => ({ x: d.timestamp, y: d.current_b })),
                currentCChart: filteredData.map(d => ({ x: d.timestamp, y: d.current_c })),
                voltageAChart: filteredData.map(d => ({ x: d.timestamp, y: d.voltage_a })),
                voltageBChart: filteredData.map(d => ({ x: d.timestamp, y: d.voltage_b })),
                voltageCChart: filteredData.map(d => ({ x: d.timestamp, y: d.voltage_c }))
            };
            
            // Update each chart
            Object.keys(chartData).forEach(chartId => {
                if (charts[chartId]) {
                    // Preserve current zoom/pan state before updating data
                    const chart = charts[chartId];
                    const currentZoomState = {
                        min: chart.options.scales?.x?.min,
                        max: chart.options.scales?.x?.max
                    };
                    
                    // Update main dataset
                    chart.data.datasets[0].data = chartData[chartId];
                    
                    // Update interpolated curve for power charts
                    if (chartId.includes('power') && chart.data.datasets.length > 1) {
                        const interpolatedData = createPolynomialInterpolation(chartData[chartId]);
                        chart.data.datasets[1].data = interpolatedData;
                    }
                    
                    // Restore zoom/pan state after data update
                    if (currentZoomState.min !== undefined && currentZoomState.max !== undefined) {
                        chart.options.scales.x.min = currentZoomState.min;
                        chart.options.scales.x.max = currentZoomState.max;
                    }
                    
                    chart.update('none');
                    updateChartStats(chartId, chartData[chartId]);
                }
            });
            
            // Update threshold lines on power charts after data is loaded
            if (powerThresholds.enabled) {
                updateThresholdLines();
            }
            
            // Ensure 24-hour format is maintained after data updates
            try {
                forceUpdate24HourFormat();
            } catch (error) {
                console.warn('Error updating time format after data update:', error);
            }
        }
        
        // Load data from CSV file
        async function loadData() {
            try {
                const response = await fetch('data/readings.csv?' + Date.now()); // Cache busting
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const csvText = await response.text();
                const data = parseCSVData(csvText);
                
                if (data.length === 0) {
                    throw new Error('No data found in CSV file');
                }
                
                updateCharts(data);
                updateStatus('connected', `Last updated: ${new Date().toLocaleTimeString('en-GB', { hour12: false })} (${data.length} readings)`);
                clearError();
                lastDataUpdate = Date.now();
                
                // Refresh device filters after data is loaded
                setTimeout(() => {
                    refreshDeviceFilters();
                }, 500);
                
            } catch (error) {
                console.error('Error loading data:', error);
                updateStatus('error', `Error: ${error.message}`);
                showError(`Failed to load data: ${error.message}`);
            }
        }
        
        // Update status indicator
        function updateStatus(type, message) {
            const statusElement = document.getElementById('status');
            statusElement.className = `status ${type}`;
            // Add auto-refresh indicator with interval
            let intervalSec = 0;
            if (isAutoRefreshEnabled) {
                intervalSec = parseInt(document.getElementById('refreshInterval').value) || 0;
            }
            const autoRefreshIndicator = isAutoRefreshEnabled
                ? `<span style="color:#28a745;font-weight:bold;margin-left:10px;">Auto-Refresh: ON (${intervalSec}s)</span>`
                : `<span style="color:#dc3545;font-weight:bold;margin-left:10px;">Auto-Refresh: OFF</span>`;
            statusElement.innerHTML = message + autoRefreshIndicator;
        }
        
        // Helper function for showing temporary status messages
        function showStatus(message, type) {
            updateStatus(type === 'error' ? 'error' : 'connected', message);
        }
        
        // Show error message
        function showError(message) {
            const errorContainer = document.getElementById('errorContainer');
            errorContainer.innerHTML = `<div class="error-message">${message}</div>`;
        }
        
        // Clear error message
        function clearError() {
            const errorContainer = document.getElementById('errorContainer');
            errorContainer.innerHTML = '';
        }
        
        // Toggle auto refresh
        function toggleAutoRefresh() {
            isAutoRefreshEnabled = !isAutoRefreshEnabled;
            
            if (isAutoRefreshEnabled) {
                startAutoRefresh();
                updateStatus('connected', 'Auto refresh enabled');
            } else {
                stopAutoRefresh();
                updateStatus('error', 'Auto refresh disabled');
            }
        }
        
        // Start auto refresh
        function startAutoRefresh() {
            stopAutoRefresh(); // Clear any existing interval
            const interval = parseInt(document.getElementById('refreshInterval').value) * 1000;
            autoRefreshInterval = setInterval(() => {
                if (isDataCollectionRunning) {
                    loadData();
                }
            }, interval);
            isAutoRefreshEnabled = true;
            updateStatus('connected', 'Data collection active');
        }
        
        // Stop auto refresh
        function stopAutoRefresh() {
            if (autoRefreshInterval) {
                clearInterval(autoRefreshInterval);
                autoRefreshInterval = null;
            }
            isAutoRefreshEnabled = false;
            updateStatus(isDataCollectionRunning ? 'connected' : 'error', isDataCollectionRunning ? 'Data collection active' : 'Data collection stopped');
        }
        
        // Manual refresh
        function refreshData() {
            loadData();
        }

        // Handle time range filter changes
        function onTimeRangeChange() {
            console.log('Time range changed to:', document.getElementById('timeRange').value + ' hours');
            // Refresh the charts with the new time range
            loadData();
        }
        
        // Manual function to fix time format on all charts
        function fixTimeFormat() {
            try {
                console.log('Forcing 24-hour time format on all charts...');
                forceUpdate24HourFormat();
                console.log('Time format update completed.');
            } catch (error) {
                console.error('Error updating time format:', error);
            }
        }
        
        // Update charts layout
        function updateChartsLayout() {
            const chartsPerRow = document.getElementById('chartsPerRow').value;
            const container = document.getElementById('chartsContainer');
            
            // Remove existing layout classes
            container.classList.remove('charts-per-row-2', 'charts-per-row-3');
            
            // Add new layout class
            container.classList.add(`charts-per-row-${chartsPerRow}`);
            
            // Trigger chart resize after layout change
            setTimeout(() => {
                Object.values(charts).forEach(chart => {
                    if (chart) {
                        chart.resize();
                    }
                });
            }, 100);
        }
        
        // Toggle interpolated curves visibility
        function toggleInterpolatedCurves() {
            const showInterpolated = document.getElementById('showInterpolated').checked;
            
            // Update power charts only
            ['powerAChart', 'powerBChart', 'powerCChart'].forEach(chartId => {
                if (charts[chartId] && charts[chartId].data.datasets.length > 1) {
                    charts[chartId].data.datasets[1].hidden = !showInterpolated;
                    charts[chartId].update('none');
                }
            });
            
            showStatus(`Trend lines ${showInterpolated ? 'enabled' : 'disabled'}`, 'connected');
        }
        
        // Toggle settings panel
        function toggleSettingsPanel() {
            const panel = document.getElementById('settingsPanel');
            const backdrop = document.getElementById('settingsBackdrop');
            const toggleBtn = document.getElementById('settingsToggle');
            
            const isOpen = panel.classList.contains('open');
            
            if (isOpen) {
                // Close panel
                panel.classList.remove('open');
                backdrop.classList.remove('open');
                toggleBtn.textContent = '⚙️ Settings';
                document.body.style.overflow = '';
            } else {
                // Open panel
                panel.classList.add('open');
                backdrop.classList.add('open');
                toggleBtn.textContent = '✕ Close';
                document.body.style.overflow = 'hidden';
            }
        }

        // Close settings panel when ESC is pressed
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                const panel = document.getElementById('settingsPanel');
                if (panel.classList.contains('open')) {
                    toggleSettingsPanel();
                }
                
                // Also handle existing ESC functionality
                removeContextMenu();
                
                const fullscreenSection = document.querySelector('.chart-section.fullscreen');
                if (fullscreenSection) {
                    const sectionId = fullscreenSection.id;
                    const chartId = sectionId.replace('Section', 'Chart');
                    toggleFullscreen(sectionId, chartId);
                }
            }
        });

        // Update smoothing factor and refresh interpolated curves
        function updateSmoothingFactor() {
            const smoothingFactor = parseFloat(document.getElementById('smoothingFactor').value);
            document.getElementById('smoothingValue').textContent = smoothingFactor.toFixed(1);
            
            // Refresh interpolated curves for power charts
            ['powerAChart', 'powerBChart', 'powerCChart'].forEach(chartId => {
                if (charts[chartId] && charts[chartId].data.datasets.length > 1) {
                    const originalData = charts[chartId].data.datasets[0].data;
                    if (originalData.length > 0) {
                        const interpolatedData = createExponentialSmoothing(originalData, smoothingFactor);
                        charts[chartId].data.datasets[1].data = interpolatedData;
                        charts[chartId].update('none');
                    }
                }
            });
            
            showStatus(`Smoothing factor updated to ${smoothingFactor.toFixed(1)}`, 'connected');
        }
        
        // Modal functions
        function showChartDetails(chartId, chartTitle, unit) {
            const chart = charts[chartId];
            if (!chart || !chart.data.datasets[0].data.length) {
                showError('No data available for this chart');
                return;
            }
            
            const data = chart.data.datasets[0].data;
            const chartType = chartId.includes('power') ? 'power' : 'other';
            const { peaks, valleys, stats } = analyzeChartData(data, chartType);
            
            // Store current modal data for device association
            currentModalData = {
                chartId: chartId,
                chartTitle: chartTitle,
                unit: unit,
                data: data,
                peaks: peaks,
                valleys: valleys,
                phase: getPhaseFromChartId(chartId)
            };
            
            // Update modal title
            document.getElementById('modalTitle').textContent = `${chartTitle} - Detailed Records`;
            
            // Update modal stats
            const modalStats = document.getElementById('modalStats');
            modalStats.innerHTML = `
                <div class="modal-stat">
                    <div class="modal-stat-label">Total Records</div>
                    <div class="modal-stat-value">${data.length}</div>
                </div>
                <div class="modal-stat">
                    <div class="modal-stat-label">Peaks</div>
                    <div class="modal-stat-value">${peaks.length}</div>
                </div>
                <div class="modal-stat">
                    <div class="modal-stat-label">Valleys</div>
                    <div class="modal-stat-value">${valleys.length}</div>
                </div>
                <div class="modal-stat">
                    <div class="modal-stat-label">Range</div>
                    <div class="modal-stat-value">${(stats.max - stats.min).toFixed(3)} ${unit}</div>
                </div>
            `;
            
            // Add device association legend after the stats
            const legendHtml = `
                <div style="margin-top: 15px; padding: 12px; background: #f8f9fa; border-radius: 6px; border-left: 4px solid #007bff;">
                    <h5 style="margin: 0 0 8px 0; color: #495057; font-size: 14px;">📋 Device Association Legend:</h5>
                    <div style="display: flex; flex-wrap: wrap; gap: 15px; font-size: 12px;">
                        <div><span style="color: #28a745; font-weight: bold;">✅ Device Name</span> - Confirmed association</div>
                        <div><span style="color: #dc3545; font-weight: bold;">🔍 Device Name</span> - High confidence estimate (>80%)</div>
                        <div><span style="color: #fd7e14; font-weight: bold;">💡 Device Name</span> - Low confidence suggestion (≤80%)</div>
                    </div>
                </div>
            `;
            modalStats.insertAdjacentHTML('afterend', legendHtml);
            
            // Initialize filters and populate device filter dropdown
            initializeFilters(data);
            
            // Populate table with device tracking
            populateRecordsTableWithTracking(data, peaks, valleys, unit);
            
            // Show modal
            document.getElementById('chartDetailsModal').style.display = 'block';
        }
        
        function getPhaseFromChartId(chartId) {
            if (chartId.includes('A')) return 'A';
            if (chartId.includes('B')) return 'B';
            if (chartId.includes('C')) return 'C';
            return 'A'; // Default
        }

        // Store original data for filtering
        let originalTableData = null;

        // Initialize filter controls
        function initializeFilters(data) {
            // Store original data for filtering
            originalTableData = {
                data: [...data],
                peaks: [...currentModalData.peaks],
                valleys: [...currentModalData.valleys],
                unit: currentModalData.unit
            };

            // Set default date range (entire dataset range)
            if (data && data.length > 0) {
                const startDate = new Date(data[0].x);
                const endDate = new Date(data[data.length - 1].x);
                
                // Format for datetime-local input (YYYY-MM-DDTHH:MM)
                const startInput = document.getElementById('startDateFilter');
                const endInput = document.getElementById('endDateFilter');
                
                if (startInput) {
                    startInput.value = formatDateForInput(startDate);
                }
                if (endInput) {
                    endInput.value = formatDateForInput(endDate);
                }
            }

            // Populate device filter dropdown
            populateDeviceFilter();
            
            // Reset other filters
            document.getElementById('typeFilter').value = '';
            document.getElementById('roleFilter').value = '';
        }

        // Format date for datetime-local input
        function formatDateForInput(date) {
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            const hours = String(date.getHours()).padStart(2, '0');
            const minutes = String(date.getMinutes()).padStart(2, '0');
            
            return `${year}-${month}-${day}T${hours}:${minutes}`;
        }

        // Populate device filter dropdown with available devices
        function populateDeviceFilter() {
            const deviceFilter = document.getElementById('deviceFilter');
            if (!deviceFilter || !deviceTracker) return;
            
            // Clear existing options except "All Devices"
            deviceFilter.innerHTML = '<option value="">All Devices</option>';
            
            // Get unique devices from environment config
            const config = deviceTracker.getEnvironmentConfig();
            if (config && config.devices) {
                const devices = config.devices
                    .filter(device => device.phase === currentModalData.phase)
                    .sort((a, b) => a.name.localeCompare(b.name));
                    
                devices.forEach(device => {
                    const option = document.createElement('option');
                    option.value = device.id;
                    option.textContent = device.name;
                    deviceFilter.appendChild(option);
                });
            }
        }

        // Apply all active filters
        function applyFilters() {
            if (!originalTableData) return;
            
            // Get filter values
            const startDate = document.getElementById('startDateFilter').value;
            const endDate = document.getElementById('endDateFilter').value;
            const typeFilter = document.getElementById('typeFilter').value;
            const roleFilter = document.getElementById('roleFilter').value;
            const deviceFilter = document.getElementById('deviceFilter').value;
            
            // Convert date strings to timestamps
            const startTimestamp = startDate ? new Date(startDate).getTime() : null;
            const endTimestamp = endDate ? new Date(endDate).getTime() : null;
            
            // Filter the data
            let filteredData = [...originalTableData.data];
            let filteredPeaks = [...originalTableData.peaks];
            let filteredValleys = [...originalTableData.valleys];
            
            // Apply date range filter
            if (startTimestamp || endTimestamp) {
                filteredData = filteredData.filter(point => {
                    const pointTime = point.x;
                    return (!startTimestamp || pointTime >= startTimestamp) && 
                           (!endTimestamp || pointTime <= endTimestamp);
                });
                
                // Update peaks and valleys indices for filtered data
                const originalIndices = new Set();
                filteredData.forEach((point, newIndex) => {
                    const originalIndex = originalTableData.data.findIndex(p => 
                        Math.abs(p.x - point.x) < 1000 && Math.abs(p.y - point.y) < 0.001
                    );
                    if (originalIndex !== -1) {
                        originalIndices.add(originalIndex);
                        // Map old indices to new indices
                        if (filteredPeaks.includes(originalIndex)) {
                            filteredPeaks = filteredPeaks.filter(i => i !== originalIndex);
                            filteredPeaks.push(newIndex);
                        }
                        if (filteredValleys.includes(originalIndex)) {
                            filteredValleys = filteredValleys.filter(i => i !== originalIndex);
                            filteredValleys.push(newIndex);
                        }
                    }
                });
            }
            
            // Store filtered data for the table population
            const tempModalData = {
                ...currentModalData,
                data: filteredData,
                peaks: filteredPeaks,
                valleys: filteredValleys
            };
            
            // Populate table with filtered data
            populateFilteredRecordsTable(filteredData, filteredPeaks, filteredValleys, originalTableData.unit, {
                typeFilter,
                roleFilter,
                deviceFilter
            });
        }

                 // Clear all filters
        function clearAllFilters() {
            document.getElementById('startDateFilter').value = '';
            document.getElementById('endDateFilter').value = '';
            document.getElementById('typeFilter').value = '';
            document.getElementById('roleFilter').value = '';
            document.getElementById('deviceFilter').value = '';
            
            // Reapply with cleared filters (will show all data)
            if (originalTableData) {
                populateRecordsTableWithTracking(
                    originalTableData.data, 
                    originalTableData.peaks, 
                    originalTableData.valleys, 
                    originalTableData.unit
                );
            }
        }

        // Populate table with filtered data  
        function populateFilteredRecordsTable(data, peaks, valleys, unit, filters) {
            const tableBody = document.getElementById('recordsTableBody');
            tableBody.innerHTML = '';
            
            // Calculate accumulated deltas until slope changes
            const accumulatedDeltas = calculateAccumulatedDeltas(data, peaks, valleys);
            
            // Create array of data with original indices for sorting
            const dataWithIndices = data.map((point, index) => ({ point, originalIndex: index }));
            
            // Sort by timestamp descending (newest first)
            dataWithIndices.sort((a, b) => b.point.x - a.point.x);
            
            let filteredCount = 0;
            
            dataWithIndices.forEach(({ point, originalIndex: index }) => {
                const row = document.createElement('tr');
                const date = new Date(point.x);
                const formattedDate = formatDateTime(date);
                const value = point.y.toFixed(3);
                
                // Calculate delta from previous reading (based on chronological order)
                let deltaText = '-';
                let deltaClass = 'delta-zero';
                let deltaValue = 0;
                
                if (index > 0) {
                    deltaValue = point.y - data[index - 1].y;
                    const deltaFormatted = deltaValue.toFixed(3);
                    
                    if (deltaValue > 0) {
                        deltaText = `+${deltaFormatted} ${unit}`;
                        deltaClass = 'delta-positive';
                    } else if (deltaValue < 0) {
                        deltaText = `${deltaFormatted} ${unit}`;
                        deltaClass = 'delta-negative';
                    } else {
                        deltaText = `0.000 ${unit}`;
                        deltaClass = 'delta-zero';
                    }
                }
                
                // Get accumulated delta for this point
                const accumulatedDelta = accumulatedDeltas[index];
                let accumulatedText = '-';
                let accumulatedClass = 'delta-zero';
                
                if (accumulatedDelta !== null) {
                    const accumulatedFormatted = accumulatedDelta.toFixed(3);
                    if (accumulatedDelta > 0) {
                        accumulatedText = `+${accumulatedFormatted} ${unit}`;
                        accumulatedClass = 'delta-positive';
                    } else if (accumulatedDelta < 0) {
                        accumulatedText = `${accumulatedFormatted} ${unit}`;
                        accumulatedClass = 'delta-negative';
                    } else {
                        accumulatedText = `0.000 ${unit}`;
                        accumulatedClass = 'delta-zero';
                    }
                }
                
                let type = 'Normal';
                let cssClass = '';
                let isEvent = false;
                
                // Check if this point is an event start or end
                let eventRole = '-';
                let eventRoleClass = '';
                let eventId = null;
                
                // Get device events for proper event role assignment
                const deviceEvents = deviceTracker?.deviceEvents || [];
                const timeWindow = 5000; // 5 seconds window
                
                // Find device events that overlap with this point
                const relatedEvent = deviceEvents.find(event => {
                    const startDiff = Math.abs(event.startTime - point.x);
                    const endDiff = event.endTime ? Math.abs(event.endTime - point.x) : Infinity;
                    return event.phase === currentModalData.phase && 
                           (startDiff <= timeWindow || endDiff <= timeWindow);
                });
                
                if (relatedEvent) {
                    // Check if this point corresponds to start or end of a device event
                    const config = deviceTracker?.getEnvironmentConfig();
                    const device = config?.devices?.find(d => d.id === relatedEvent.deviceId);
                    const deviceName = device ? device.name : 'Unknown Device';
                    eventId = relatedEvent.id;
                    
                    const startDiff = Math.abs(relatedEvent.startTime - point.x);
                    const endDiff = relatedEvent.endTime ? Math.abs(relatedEvent.endTime - point.x) : Infinity;
                    
                    if (startDiff <= timeWindow && (endDiff > timeWindow || !relatedEvent.endTime)) {
                        // This is the event start
                        eventRole = `🔵 Event Start`;
                        eventRole += `<br><small style="color: #007bff;">${deviceName}`;
                        if (eventId) eventRole += `<br>ID: ${eventId}`;
                        eventRole += `</small>`;
                        eventRoleClass = 'event-start';
                    } else if (relatedEvent.endTime && endDiff <= timeWindow && startDiff > timeWindow) {
                        // This is the event end
                        eventRole = `🔴 Event End`;
                        eventRole += `<br><small style="color: #dc3545;">${deviceName}`;
                        if (eventId) eventRole += `<br>ID: ${eventId}`;
                        eventRole += `</small>`;
                        eventRoleClass = 'event-end';
                    }
                }
                
                // Get event threshold from UI
                const eventThreshold = parseFloat(document.getElementById('eventThreshold')?.value || 10);
                
                if (peaks.includes(index)) {
                    // Check if accumulated delta meets threshold for peak events
                    if (accumulatedDelta !== null && Math.abs(accumulatedDelta) >= eventThreshold) {
                        type = 'Peak';
                        cssClass = 'peak-value';
                        isEvent = true;
                        
                        // If this peak has a device association and is part of an event, mark it as Event Peak
                        if (relatedEvent) {
                            if (eventRole === '-') {
                                const config = deviceTracker?.getEnvironmentConfig();
                                const device = config?.devices?.find(d => d.id === relatedEvent.deviceId);
                                const deviceName = device ? device.name : 'Unknown Device';
                                
                                eventRole = `⚡ Event Peak`;
                                eventRole += `<br><small style="color: #fd7e14;">${deviceName}`;
                                if (eventId) eventRole += `<br>ID: ${eventId}`;
                                eventRole += `</small>`;
                                eventRoleClass = 'event-peak';
                            }
                        }
                    } else {
                        type = 'Normal';
                    }
                } else if (valleys.includes(index)) {
                    // Check if accumulated delta meets threshold for valley events
                    if (accumulatedDelta !== null && Math.abs(accumulatedDelta) >= eventThreshold) {
                        type = 'Valley';
                        cssClass = 'valley-value';
                        isEvent = true;
                        
                        // If this valley should be an END event and we haven't assigned a role yet
                        if (eventRole === '-' && relatedEvent && relatedEvent.endTime) {
                            const endDiff = Math.abs(relatedEvent.endTime - point.x);
                            if (endDiff <= timeWindow) {
                                const config = deviceTracker?.getEnvironmentConfig();
                                const device = config?.devices?.find(d => d.id === relatedEvent.deviceId);
                                const deviceName = device ? device.name : 'Unknown Device';
                                
                                eventRole = `🔴 Event End`;
                                eventRole += `<br><small style="color: #dc3545;">${deviceName}`;
                                if (eventId) eventRole += `<br>ID: ${eventId}`;
                                eventRole += `</small>`;
                                eventRoleClass = 'event-end';
                            }
                        }
                    } else {
                        type = 'Normal';
                    }
                }
                
                // Apply filters before displaying the row
                let shouldShow = true;
                
                // Type filter
                if (filters.typeFilter && type !== filters.typeFilter) {
                    shouldShow = false;
                }
                
                // Role filter  
                if (filters.roleFilter && shouldShow) {
                    const roleText = eventRole.includes('Event Start') ? 'Event Start' :
                                   eventRole.includes('Event Peak') ? 'Event Peak' :
                                   eventRole.includes('Event End') ? 'Event End' :
                                   eventRole.includes('Valley') ? 'Valley' : '-';
                    
                    if (roleText !== filters.roleFilter) {
                        shouldShow = false;
                    }
                }
                
                // Device filter
                if (filters.deviceFilter && shouldShow) {
                    const deviceMatches = relatedEvent && relatedEvent.deviceId === filters.deviceFilter;
                    
                    if (!deviceMatches) {
                        shouldShow = false;
                    }
                }
                
                if (!shouldShow) return; // Skip this row
                
                filteredCount++;
                
                // Device association and suggestions (rest of the code remains the same)
                let deviceCell = '-';
                let actionsCell = '';
                
                // Check if this is a start point that should be editable
                const isStartPoint = relatedEvent && relatedEvent.startTime === point.x;
                
                // Add "Set Event Start" button for NORMAL points
                if (type === 'Normal' && deviceTracker) {
                    actionsCell = `<button onclick="setEventStart(${index})" class="btn btn-sm btn-outline-primary">🎯 Set Event Start</button>`;
                } else if ((isEvent && deviceTracker) || isStartPoint) { // For peaks, valleys, and start points
                    // Use accumulated delta for device association instead of single step delta
                    const eventPowerDelta = accumulatedDelta || deltaValue;
                    
                    const event = {
                        type: isStartPoint ? 'start' : type.toLowerCase(),
                        phase: currentModalData.phase,
                        powerDelta: eventPowerDelta, // Use accumulated delta for full event
                        timestamp: point.x,
                        readings: getCurrentReadings(point.x) // We'll need to implement this
                    };
                    
                    // Check for existing confirmed associations first (including universal associations)
                    const associations = deviceTracker.deviceEvents;
                    const timeWindow = 5000; // 5 seconds window
                    
                    // Find the CLOSEST confirmed association within the time window
                    let confirmedAssociation = null;
                    let closestTimeDiff = Infinity;
                    
                    for (const assoc of associations) {
                        const timeDiff = Math.abs(assoc.timestamp - point.x);
                        if (timeDiff <= timeWindow && 
                            assoc.phase === currentModalData.phase && 
                            timeDiff < closestTimeDiff) {
                            confirmedAssociation = assoc;
                            closestTimeDiff = timeDiff;
                        }
                    }
                    
                    if (confirmedAssociation) {
                        // Show confirmed association with green checkmark
                        const config = deviceTracker.getEnvironmentConfig();
                        const device = config?.devices?.find(d => d.id === confirmedAssociation.deviceId);
                        const deviceName = device ? device.name : 'Unknown Device';
                        const confidence = (confirmedAssociation.confidence * 100).toFixed(0);
                        
                        deviceCell = `
                            <div style="font-size: 11px;">
                                <span style="color: #28a745; font-weight: bold;">✅ ${deviceName}</span><br>
                                <span style="color: #28a745; font-size: 10px;">${confidence}% confirmed</span><br>
                                <span style="color: #888; font-size: 10px;">Δ: ${eventPowerDelta > 0 ? '+' : ''}${eventPowerDelta.toFixed(1)}W</span>
                            </div>
                        `;
                        
                        actionsCell = `
                            <button class="btn btn-secondary" style="padding: 4px 8px; font-size: 11px; margin: 0; background: #6c757d;" 
                                    onclick="showDeviceAssociationDialog(${index}, '${isStartPoint ? 'Start' : type}', ${eventPowerDelta})" 
                                    title="Change association">
                                🔄 Change
                            </button>
                            <button class="btn btn-danger" style="padding: 4px 8px; font-size: 11px; margin: 0; background: #dc3545; margin-left: 4px;" 
                                    onclick="removeDeviceAssociation(${index}, '${isStartPoint ? 'Start' : type}', ${eventPowerDelta})" 
                                    title="Remove association">
                                🗑️ Remove
                            </button>
                        `;
                    } else {
                        // Get device suggestions for unassociated events
                        const suggestions = deviceTracker.analyzeEvent(event);
                        
                        if (suggestions.length > 0) {
                            const topSuggestion = suggestions[0];
                            const confidence = (topSuggestion.confidence * 100).toFixed(0);
                            const isHighConfidence = topSuggestion.confidence > 0.8;
                            
                            deviceCell = `
                                <div style="font-size: 11px;">
                                    <span style="color: ${isHighConfidence ? '#dc3545' : '#fd7e14'}; font-weight: bold;">
                                        ${isHighConfidence ? '🔍' : '💡'} ${topSuggestion.device.name}
                                    </span><br>
                                    <span style="color: ${isHighConfidence ? '#dc3545' : '#fd7e14'}; font-size: 10px;">
                                        ${confidence}% ${isHighConfidence ? 'estimated' : 'suggested'}
                                    </span><br>
                                    <span style="color: #888; font-size: 10px;">Δ: ${eventPowerDelta > 0 ? '+' : ''}${eventPowerDelta.toFixed(1)}W</span>
                                </div>
                            `;
                        }
                        
                        actionsCell = `
                            <button class="btn" style="padding: 4px 8px; font-size: 11px; margin: 0;" 
                                    onclick="showDeviceAssociationDialog(${index}, '${isStartPoint ? 'Start' : type}', ${eventPowerDelta})">
                                🔗 Associate
                            </button>
                        `;
                    }
                }
                
                row.className = cssClass;
                row.innerHTML = `
                    <td>${formattedDate}</td>
                    <td>${value} ${unit}</td>
                    <td class="${deltaClass}">${deltaText}</td>
                    <td class="${accumulatedClass}">${accumulatedText}</td>
                    <td>${type}</td>
                    <td class="${eventRoleClass}">${eventRole}</td>
                    <td>${deviceCell}</td>
                    <td>${actionsCell}</td>
                `;
                
                tableBody.appendChild(row);
            });
            
            // Update stats to show filtered count
            const totalRecords = document.querySelector('.modal-stat-value');
            if (totalRecords && filteredCount !== data.length) {
                totalRecords.textContent = `${filteredCount} (filtered from ${data.length})`;
            }
        }

        function getCurrentReadings(timestamp) {
            // Try to find readings close to the timestamp
            // This is a simplified version - in a real implementation, 
            // you'd interpolate or find the closest actual reading
            const phase_a = document.querySelector('#powerAChart')?.chart?.data?.datasets?.[0]?.data || [];
            const phase_b = document.querySelector('#powerBChart')?.chart?.data?.datasets?.[0]?.data || [];
            const phase_c = document.querySelector('#powerCChart')?.chart?.data?.datasets?.[0]?.data || [];
            
            // Find closest readings to timestamp
            const findClosest = (data) => {
                if (!data.length) return null;
                return data.reduce((closest, current) => {
                    const currentDiff = Math.abs(current.x - timestamp);
                    const closestDiff = Math.abs(closest.x - timestamp);
                    return currentDiff < closestDiff ? current : closest;
                });
            };
            
            const closestA = findClosest(phase_a);
            const closestB = findClosest(phase_b);
            const closestC = findClosest(phase_c);
            
            return {
                apower_a: closestA?.y || 0,
                apower_b: closestB?.y || 0,
                apower_c: closestC?.y || 0,
                voltage_a: 230, // Default values - would be better to get from actual voltage charts
                voltage_b: 0,
                voltage_c: 230,
                current_a: closestA?.y ? closestA.y / 230 : 0,
                current_b: closestB?.y ? closestB.y / 230 : 0,
                current_c: closestC?.y ? closestC.y / 230 : 0,
                pf_a: 0.85, // Default power factor
                pf_b: 0.85,
                pf_c: 0.85,
                ts: Math.floor(timestamp / 1000)
            };
        }
        
        function analyzeChartData(data, chartType = 'other') {
            if (data.length === 0) return { peaks: [], valleys: [], stats: { min: 0, max: 0, avg: 0 } };
            
            const values = data.map(d => d.y);
            const min = Math.min(...values);
            const max = Math.max(...values);
            const avg = values.reduce((sum, val) => sum + val, 0) / values.length;
            
            const peaks = [];
            const valleys = [];
            
            // Calculate gradients (slopes) between consecutive points
            const gradients = [];
            for (let i = 1; i < data.length; i++) {
                const deltaY = data[i].y - data[i - 1].y;
                const deltaX = data[i].x - data[i - 1].x;
                gradients.push(deltaY / deltaX);
            }
            
            // Debug logging for gradient analysis (only for power charts)
            if (chartType === 'power' && data.length > 0) {
                // console.log(`Gradient analysis for ${chartType} chart:`, {
                    dataPoints: data.length,
                    gradients: gradients.slice(0, 10), // Show first 10 gradients
                    gradientRange: {
                        min: Math.min(...gradients),
                        max: Math.max(...gradients)
                    }
                });
                
                // Expected pattern in test data:
                // 220→240→260→280→300 (ascending, peak at index 4)
                // 300→285→270→255→240→225 (descending, valley at index 9)  
                // 225→235→245→255→265→275 (ascending, peak at index 14)
                console.log('Expected peaks at indices: 4, 14');
                console.log('Expected valleys at indices: 9');
            }
            
            // Find peaks and valleys by detecting gradient sign changes
            for (let i = 1; i < gradients.length; i++) {
                const prevGradient = gradients[i - 1];
                const currentGradient = gradients[i];
                
                // Peak: gradient changes from positive to negative (or zero)
                if (prevGradient > 0 && currentGradient <= 0) {
                    peaks.push(i); // Index i corresponds to the peak point
                    if (chartType === 'power') {
                        // console.log(`Peak detected at index ${i}: gradient ${prevGradient.toFixed(3)} → ${currentGradient.toFixed(3)}, value: ${data[i].y}`);
                    }
                }
                
                // Valley: gradient changes from negative to positive (or zero)
                if (prevGradient < 0 && currentGradient >= 0) {
                    valleys.push(i); // Index i corresponds to the valley point
                    if (chartType === 'power') {
                        // console.log(`Valley detected at index ${i}: gradient ${prevGradient.toFixed(3)} → ${currentGradient.toFixed(3)}, value: ${data[i].y}`);
                    }
                }
            }
            
            // Handle edge cases: first and last points
            if (gradients.length > 0) {
                // Check if first point is a peak or valley
                if (gradients[0] < 0) {
                    peaks.unshift(0); // First point is a peak
                } else if (gradients[0] > 0) {
                    valleys.unshift(0); // First point is a valley
                }
                
                // Check if last point is a peak or valley
                const lastGradient = gradients[gradients.length - 1];
                const lastIndex = data.length - 1;
                if (lastGradient > 0) {
                    peaks.push(lastIndex); // Last point is a peak
                } else if (lastGradient < 0) {
                    valleys.push(lastIndex); // Last point is a valley
                }
            }
            
            if (chartType === 'power') {
                console.log(`Final results: ${peaks.length} peaks, ${valleys.length} valleys`);
            }
            
            return {
                peaks: [...new Set(peaks)].sort((a, b) => a - b),
                valleys: [...new Set(valleys)].sort((a, b) => a - b),
                stats: { min, max, avg }
            };
        }
        
        function populateRecordsTableWithTracking(data, peaks, valleys, unit) {
            const tableBody = document.getElementById('recordsTableBody');
            tableBody.innerHTML = '';
            
            // Calculate accumulated deltas until slope changes
            const accumulatedDeltas = calculateAccumulatedDeltas(data, peaks, valleys);
            
            // Create array of data with original indices for sorting
            const dataWithIndices = data.map((point, index) => ({ point, originalIndex: index }));
            
            // Sort by timestamp descending (newest first)
            dataWithIndices.sort((a, b) => b.point.x - a.point.x);
            
            dataWithIndices.forEach(({ point, originalIndex: index }) => {
                const row = document.createElement('tr');
                const date = new Date(point.x);
                const formattedDate = formatDateTime(date);
                const value = point.y.toFixed(3);
                
                // Calculate delta from previous reading (based on chronological order)
                let deltaText = '-';
                let deltaClass = 'delta-zero';
                let deltaValue = 0;
                
                if (index > 0) {
                    deltaValue = point.y - data[index - 1].y;
                    const deltaFormatted = deltaValue.toFixed(3);
                    
                    if (deltaValue > 0) {
                        deltaText = `+${deltaFormatted} ${unit}`;
                        deltaClass = 'delta-positive';
                    } else if (deltaValue < 0) {
                        deltaText = `${deltaFormatted} ${unit}`;
                        deltaClass = 'delta-negative';
                    } else {
                        deltaText = `0.000 ${unit}`;
                        deltaClass = 'delta-zero';
                    }
                }
                
                // Get accumulated delta for this point
                const accumulatedDelta = accumulatedDeltas[index];
                let accumulatedText = '-';
                let accumulatedClass = 'delta-zero';
                
                if (accumulatedDelta !== null) {
                    const accumulatedFormatted = accumulatedDelta.toFixed(3);
                    if (accumulatedDelta > 0) {
                        accumulatedText = `+${accumulatedFormatted} ${unit}`;
                        accumulatedClass = 'delta-positive';
                    } else if (accumulatedDelta < 0) {
                        accumulatedText = `${accumulatedFormatted} ${unit}`;
                        accumulatedClass = 'delta-negative';
                    } else {
                        accumulatedText = `0.000 ${unit}`;
                        accumulatedClass = 'delta-zero';
                    }
                }
                
                let type = 'Normal';
                let cssClass = '';
                let isEvent = false;
                
                // Check if this point is an event start or end
                let eventRole = '-';
                let eventRoleClass = '';
                let eventId = null;
                
                // Get device events for proper event role assignment
                const deviceEvents = deviceTracker?.deviceEvents || [];
                const timeWindow = 5000; // 5 seconds window
                
                // Find device events that overlap with this point
                const relatedEvent = deviceEvents.find(event => {
                    const startDiff = Math.abs(event.startTime - point.x);
                    const endDiff = event.endTime ? Math.abs(event.endTime - point.x) : Infinity;
                    return event.phase === currentModalData.phase && 
                           (startDiff <= timeWindow || endDiff <= timeWindow);
                });
                
                if (relatedEvent) {
                    // Check if this point corresponds to start or end of a device event
                    const config = deviceTracker?.getEnvironmentConfig();
                    const device = config?.devices?.find(d => d.id === relatedEvent.deviceId);
                    const deviceName = device ? device.name : 'Unknown Device';
                    eventId = relatedEvent.id;
                    
                    const startDiff = Math.abs(relatedEvent.startTime - point.x);
                    const endDiff = relatedEvent.endTime ? Math.abs(relatedEvent.endTime - point.x) : Infinity;
                    
                    if (startDiff <= timeWindow && (endDiff > timeWindow || !relatedEvent.endTime)) {
                        // This is the event start
                        eventRole = `🔵 Event Start`;
                        eventRole += `<br><small style="color: #007bff;">${deviceName}`;
                        if (eventId) eventRole += `<br>ID: ${eventId}`;
                        eventRole += `</small>`;
                        eventRoleClass = 'event-start';
                    } else if (relatedEvent.endTime && endDiff <= timeWindow && startDiff > timeWindow) {
                        // This is the event end
                        eventRole = `🔴 Event End`;
                        eventRole += `<br><small style="color: #dc3545;">${deviceName}`;
                        if (eventId) eventRole += `<br>ID: ${eventId}`;
                        eventRole += `</small>`;
                        eventRoleClass = 'event-end';
                    }
                }
                
                // Get event threshold from UI
                const eventThreshold = parseFloat(document.getElementById('eventThreshold')?.value || 10);
                
                if (peaks.includes(index)) {
                    // Check if accumulated delta meets threshold for peak events
                    if (accumulatedDelta !== null && Math.abs(accumulatedDelta) >= eventThreshold) {
                        type = 'Peak';
                        cssClass = 'peak-value';
                        isEvent = true;
                        
                        // If this peak has a device association and is part of an event, mark it as Event Peak
                        if (relatedEvent) {
                            if (eventRole === '-') {
                                const config = deviceTracker?.getEnvironmentConfig();
                                const device = config?.devices?.find(d => d.id === relatedEvent.deviceId);
                                const deviceName = device ? device.name : 'Unknown Device';
                                
                                eventRole = `⚡ Event Peak`;
                                eventRole += `<br><small style="color: #fd7e14;">${deviceName}`;
                                if (eventId) eventRole += `<br>ID: ${eventId}`;
                                eventRole += `</small>`;
                                eventRoleClass = 'event-peak';
                            }
                        }
                    } else {
                        type = 'Normal';
                    }
                } else if (valleys.includes(index)) {
                    // Check if accumulated delta meets threshold for valley events
                    if (accumulatedDelta !== null && Math.abs(accumulatedDelta) >= eventThreshold) {
                        type = 'Valley';
                        cssClass = 'valley-value';
                        isEvent = true;
                        
                        // If this valley should be an END event and we haven't assigned a role yet
                        if (eventRole === '-' && relatedEvent && relatedEvent.endTime) {
                            const endDiff = Math.abs(relatedEvent.endTime - point.x);
                            if (endDiff <= timeWindow) {
                                const config = deviceTracker?.getEnvironmentConfig();
                                const device = config?.devices?.find(d => d.id === relatedEvent.deviceId);
                                const deviceName = device ? device.name : 'Unknown Device';
                                
                                eventRole = `🔴 Event End`;
                                eventRole += `<br><small style="color: #dc3545;">${deviceName}`;
                                if (eventId) eventRole += `<br>ID: ${eventId}`;
                                eventRole += `</small>`;
                                eventRoleClass = 'event-end';
                            }
                        }
                    } else {
                        type = 'Normal';
                    }
                }
                
                // Device association and suggestions
                let deviceCell = '-';
                let actionsCell = '';
                
                // Check if this is a start point that should be editable
                const isStartPoint = relatedEvent && relatedEvent.startTime === point.x;
                
                // Add "Set Event Start" button for NORMAL points
                if (type === 'Normal' && deviceTracker) {
                    actionsCell = `<button onclick="setEventStart(${index})" class="btn btn-sm btn-outline-primary">🎯 Set Event Start</button>`;
                } else if ((isEvent && deviceTracker) || isStartPoint) { // For peaks, valleys, and start points
                    // Use accumulated delta for device association instead of single step delta
                    const eventPowerDelta = accumulatedDelta || deltaValue;
                    
                    const event = {
                        type: isStartPoint ? 'start' : type.toLowerCase(),
                        phase: currentModalData.phase,
                        powerDelta: eventPowerDelta, // Use accumulated delta for full event
                        timestamp: point.x,
                        readings: getCurrentReadings(point.x) // We'll need to implement this
                    };
                    
                    // Check for existing confirmed associations first (including universal associations)
                    const associations = deviceTracker.deviceEvents;
                    const timeWindow = 5000; // 5 seconds window
                    
                    // Find the CLOSEST confirmed association within the time window
                    let confirmedAssociation = null;
                    let closestTimeDiff = Infinity;
                    
                    for (const assoc of associations) {
                        const timeDiff = Math.abs(assoc.timestamp - point.x);
                        if (timeDiff <= timeWindow && 
                            assoc.phase === currentModalData.phase && 
                            timeDiff < closestTimeDiff) {
                            confirmedAssociation = assoc;
                            closestTimeDiff = timeDiff;
                        }
                    }
                    
                    if (confirmedAssociation) {
                        // Show confirmed association with green checkmark
                        const config = deviceTracker.getEnvironmentConfig();
                        const device = config?.devices?.find(d => d.id === confirmedAssociation.deviceId);
                        const deviceName = device ? device.name : 'Unknown Device';
                        const confidence = (confirmedAssociation.confidence * 100).toFixed(0);
                        
                        deviceCell = `
                            <div style="font-size: 11px;">
                                <span style="color: #28a745; font-weight: bold;">✅ ${deviceName}</span><br>
                                <span style="color: #28a745; font-size: 10px;">${confidence}% confirmed</span><br>
                                <span style="color: #888; font-size: 10px;">Δ: ${eventPowerDelta > 0 ? '+' : ''}${eventPowerDelta.toFixed(1)}W</span>
                            </div>
                        `;
                        
                        actionsCell = `
                            <button class="btn btn-secondary" style="padding: 4px 8px; font-size: 11px; margin: 0; background: #6c757d;" 
                                    onclick="showDeviceAssociationDialog(${index}, '${isStartPoint ? 'Start' : type}', ${eventPowerDelta})" 
                                    title="Change association">
                                🔄 Change
                            </button>
                            <button class="btn btn-danger" style="padding: 4px 8px; font-size: 11px; margin: 0; background: #dc3545; margin-left: 4px;" 
                                    onclick="removeDeviceAssociation(${index}, '${isStartPoint ? 'Start' : type}', ${eventPowerDelta})" 
                                    title="Remove association">
                                🗑️ Remove
                            </button>
                        `;
                    } else {
                        // Get device suggestions for unassociated events
                        const suggestions = deviceTracker.analyzeEvent(event);
                        
                        if (suggestions.length > 0) {
                            const topSuggestion = suggestions[0];
                            const confidence = (topSuggestion.confidence * 100).toFixed(0);
                            const isHighConfidence = topSuggestion.confidence > 0.8;
                            
                            deviceCell = `
                                <div style="font-size: 11px;">
                                    <span style="color: ${isHighConfidence ? '#dc3545' : '#fd7e14'}; font-weight: bold;">
                                        ${isHighConfidence ? '🔍' : '💡'} ${topSuggestion.device.name}
                                    </span><br>
                                    <span style="color: ${isHighConfidence ? '#dc3545' : '#fd7e14'}; font-size: 10px;">
                                        ${confidence}% ${isHighConfidence ? 'estimated' : 'suggested'}
                                    </span><br>
                                    <span style="color: #888; font-size: 10px;">Δ: ${eventPowerDelta > 0 ? '+' : ''}${eventPowerDelta.toFixed(1)}W</span>
                                </div>
                            `;
                        }
                        
                        actionsCell = `
                            <button class="btn" style="padding: 4px 8px; font-size: 11px; margin: 0;" 
                                    onclick="showDeviceAssociationDialog(${index}, '${isStartPoint ? 'Start' : type}', ${eventPowerDelta})">
                                🔗 Associate
                            </button>
                        `;
                    }
                }
                
                row.className = cssClass;
                row.innerHTML = `
                    <td>${formattedDate}</td>
                    <td>${value} ${unit}</td>
                    <td class="${deltaClass}">${deltaText}</td>
                    <td class="${accumulatedClass}">${accumulatedText}</td>
                    <td>${type}</td>
                    <td class="${eventRoleClass}">${eventRole}</td>
                    <td>${deviceCell}</td>
                    <td>${actionsCell}</td>
                `;
                
                tableBody.appendChild(row);
            });
        }
        
        // Calculate accumulated deltas until slope changes (peaks/valleys)
        function calculateAccumulatedDeltas(data, peaks, valleys) {
            const accumulatedDeltas = new Array(data.length).fill(null);
            
            // Combine peaks and valleys and sort by index
            const events = [...peaks, ...valleys].sort((a, b) => a - b);
            
            // Process each segment between events
            let currentSegmentStart = 0;
            
            for (let i = 0; i < data.length; i++) {
                // Calculate accumulated delta from the start of current segment
                let accumulated = 0;
                for (let j = currentSegmentStart + 1; j <= i; j++) {
                    const delta = data[j].y - data[j - 1].y;
                    accumulated += delta;
                }
                
                accumulatedDeltas[i] = accumulated;
                
                // Check if current index is an event (peak or valley)
                const isEvent = events.includes(i);
                
                if (isEvent && i > 0) {
                    // After calculating the accumulated value for the peak/valley,
                    // reset the segment start for the next trend
                    currentSegmentStart = i;
                }
            }
            
            return accumulatedDeltas;
        }
        
        function getCurrentReadings(timestamp) {
            // This is a simplified version - in a real implementation,
            // we'd need to get the actual readings from the CSV data at this timestamp
            return {
                voltage_a: 235,
                voltage_b: 0,
                voltage_c: 236,
                current_a: 1.5,
                current_b: 3.0,
                current_c: 2.7,
                pf_a: 0.7,
                pf_b: 0,
                pf_c: 0.85
            };
        }
        
        function showDeviceAssociationDialog(index, type, eventPowerDelta) {
            if (!currentModalData || !deviceTracker) return;
            
            const point = currentModalData.data[index];
            const event = {
                type: type.toLowerCase(),
                phase: currentModalData.phase,
                powerDelta: eventPowerDelta, // This is now the accumulated delta
                timestamp: point.x,
                readings: getCurrentReadings(point.x)
            };
            
            // For start events, we want to show a different message
            const isStartEvent = type.toLowerCase() === 'start';
            
            // Check for existing association
            const associations = deviceTracker.deviceEvents;
            const timeWindow = 5000; // 5 seconds window
            
            // Find the CLOSEST existing association within the time window
            let existingAssociation = null;
            let closestTimeDiff = Infinity;
            
            for (const assoc of associations) {
                const timeDiff = Math.abs(assoc.timestamp - point.x);
                if (timeDiff <= timeWindow && 
                    assoc.phase === currentModalData.phase &&
                    (assoc.type === type.toLowerCase() || assoc.type === 'start') &&
                    timeDiff < closestTimeDiff) {
                    existingAssociation = assoc;
                    closestTimeDiff = timeDiff;
                }
            }
            
            // Get device suggestions
            const suggestions = deviceTracker.analyzeEvent(event);
            const config = deviceTracker.getEnvironmentConfig();
            
            if (!config || !config.devices) {
                alert('No devices configured. Please set up your environment first.');
                return;
            }
            
            // Create device selection dialog
            let dialogContent = `
                <div style="max-width: 500px;">
                    <h3>Associate Device with ${isStartEvent ? 'Event Start' : type} Event</h3>
                    <p><strong>Event:</strong> ${isStartEvent ? 'Event Start' : type} of ${Math.abs(eventPowerDelta).toFixed(1)}W on Phase ${currentModalData.phase}</p>
                    <p><strong>Time:</strong> ${formatDateTime(new Date(point.x))}</p>
                    
                    <h4>Device Suggestions:</h4>
            `;
            
            if (suggestions.length > 0) {
                suggestions.forEach((suggestion, i) => {
                    const confidence = (suggestion.confidence * 100).toFixed(0);
                    dialogContent += `
                        <div style="border: 1px solid #ddd; padding: 10px; margin: 5px 0; border-radius: 5px; cursor: pointer;" 
                             onclick="associateDevice('${suggestion.device.id}', ${suggestion.confidence})">
                            <strong>${suggestion.device.name}</strong> (${confidence}% confidence)<br>
                            <small>📍 ${getDeviceRoom(suggestion.device.roomId, config)} | 🔧 ${suggestion.device.type}</small><br>
                            <small style="color: #666;">${suggestion.reasoning.join(', ')}</small>
                        </div>
                    `;
                });
            } else {
                dialogContent += '<p style="color: #666; font-style: italic;">No automatic suggestions available.</p>';
            }
            
            dialogContent += `
                    <h4>All Devices on Phase ${currentModalData.phase}:</h4>
                    <select id="manualDeviceSelect" style="width: 100%; padding: 8px; margin: 10px 0;">
                        <option value="">Select a device manually...</option>
            `;
            
            const phaseDevices = config.devices.filter(d => d.phase === currentModalData.phase);
            phaseDevices.forEach(device => {
                const roomName = getDeviceRoom(device.roomId, config);
                const isSelected = existingAssociation && existingAssociation.deviceId === device.id ? 'selected' : '';
                dialogContent += `<option value="${device.id}" ${isSelected}>${device.name} (${roomName})</option>`;
            });
            
            dialogContent += `
                    </select>
                    <br>
                    <button class="btn" onclick="associateManualDevice()">Associate Selected Device</button>
                    <button class="btn btn-secondary" onclick="closeAssociationDialog()">Cancel</button>
                </div>
            `;
            
            // Store event data for association
            window.currentEvent = event;
            window.currentEventIndex = index;
            
            // Show dialog (you might want to create a proper modal for this)
            const existingDialog = document.getElementById('associationDialog');
            if (existingDialog) {
                existingDialog.remove();
            }
            
            const dialog = document.createElement('div');
            dialog.id = 'associationDialog';
            dialog.style.cssText = `
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: white;
                padding: 20px;
                border-radius: 10px;
                box-shadow: 0 4px 20px rgba(0,0,0,0.3);
                z-index: 10001;
                max-height: 80vh;
                overflow-y: auto;
            `;
            dialog.innerHTML = dialogContent;
            
            // Add backdrop
            const backdrop = document.createElement('div');
            backdrop.id = 'associationBackdrop';
            backdrop.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0,0,0,0.5);
                z-index: 10000;
            `;
            backdrop.onclick = closeAssociationDialog;
            
            document.body.appendChild(backdrop);
            document.body.appendChild(dialog);
            
            // Add event listener for device selection
            const deviceSelect = document.getElementById('universalDeviceSelect');
            if (deviceSelect) {
                deviceSelect.addEventListener('change', checkAssociateButtonState);
            }
        }
        
        function getDeviceRoom(roomId, config) {
            const room = config.rooms.find(r => r.id === roomId);
            return room ? room.name : 'Unknown Room';
        }
        
        function associateDevice(deviceId, confidence) {
            if (!window.currentEvent || !deviceTracker) return;
            
            deviceTracker.recordDeviceAssociation(window.currentEvent, deviceId, confidence);
            closeAssociationDialog();
            
            // Refresh the table to show the association
            if (currentModalData) {
                populateRecordsTableWithTracking(
                    currentModalData.data, 
                    currentModalData.peaks, 
                    currentModalData.valleys, 
                    currentModalData.unit
                );
            }
            
            // Refresh device annotations on charts
            refreshDeviceAnnotations();
            
            showStatus('Device association recorded successfully', 'success');
        }
        
        function associateManualDevice() {
            const select = document.getElementById('manualDeviceSelect');
            const deviceId = select.value;
            
            if (!deviceId) {
                alert('Please select a device');
                return;
            }
            
            associateDevice(deviceId, 1.0); // Manual associations get 100% confidence
        }
        
        function closeAssociationDialog() {
            const dialog = document.getElementById('associationDialog');
            const backdrop = document.getElementById('associationBackdrop');
            
            if (dialog) dialog.remove();
            if (backdrop) backdrop.remove();
            
            window.currentEvent = null;
            window.currentEventIndex = null;
        }

        function removeDeviceAssociation(index, type, eventPowerDelta) {
            if (!currentModalData || !deviceTracker) return;
            
            const point = currentModalData.data[index];
            const event = {
                type: type.toLowerCase(),
                phase: currentModalData.phase,
                powerDelta: eventPowerDelta,
                timestamp: point.x
            };
            
            console.log('Attempting to remove device association for event:', {
                index,
                type,
                eventPowerDelta,
                point: {
                    x: new Date(point.x).toLocaleTimeString(),
                    y: point.y
                },
                event
            });
            
            // Confirm removal
            const deviceName = getDeviceNameFromAssociation(point.x, currentModalData.phase, type.toLowerCase());
            const confirmMessage = `Are you sure you want to remove ALL device associations for this event (including start and end points)? This will remove the association from all related data points.`;
            
            if (confirm(confirmMessage)) {
                const removedCount = deviceTracker.removeAllEventAssociations(event);
                
                if (removedCount > 0) {
                    // Refresh the table to show the removed associations
                    populateRecordsTableWithTracking(
                        currentModalData.data, 
                        currentModalData.peaks, 
                        currentModalData.valleys, 
                        currentModalData.unit
                    );
                    
                    // Refresh device annotations on charts
                    refreshDeviceAnnotations();
                    
                    showStatus(`Removed ${removedCount} device association(s) successfully`, 'success');
                } else {
                    showStatus('No device associations found to remove', 'warning');
                }
            }
        }

        function removeDeviceAssociationByData(index, associationId, eventId) {
            if (!currentModalData || !deviceTracker) return;
            
            console.log('Attempting to remove device association by ID:', {
                index,
                associationId,
                eventId: eventId !== 'none' ? eventId : null
            });
            
            // Confirm removal
            const confirmMessage = `Are you sure you want to remove ALL device associations for this event? This will remove the association from all related data points.`;
            
            if (confirm(confirmMessage)) {
                let removedCount = 0;
                
                if (eventId && eventId !== 'none') {
                    // Remove by event ID (preferred method)
                    removedCount = deviceTracker.removeByEventId(eventId);
                } else {
                    // Fallback: remove by association ID
                    removedCount = deviceTracker.removeByAssociationId(associationId);
                }
                
                if (removedCount > 0) {
                    // Refresh the table to show the removed associations
                    populateRecordsTableWithTracking(
                        currentModalData.data, 
                        currentModalData.peaks, 
                        currentModalData.valleys, 
                        currentModalData.unit
                    );
                    
                    // Refresh device annotations on charts
                    refreshDeviceAnnotations();
                    
                    showStatus(`Removed ${removedCount} device association(s) successfully`, 'success');
                } else {
                    showStatus('No device associations found to remove', 'warning');
                }
            }
        }

        function getDeviceNameFromAssociation(timestamp, phase, eventType) {
            if (!deviceTracker) return 'Unknown Device';
            
            const associations = deviceTracker.deviceEvents;
            const timeWindow = 5000; // 5 seconds window
            const matchingAssociation = associations.find(assoc => {
                return Math.abs(assoc.timestamp - timestamp) <= timeWindow &&
                       assoc.phase === phase &&
                       (assoc.type === eventType || assoc.type === 'start');
            });
            
            if (matchingAssociation && matchingAssociation.deviceId) {
                const config = deviceTracker.getEnvironmentConfig();
                if (config && config.devices) {
                    const device = config.devices.find(d => d.id === matchingAssociation.deviceId);
                    if (device) {
                        return device.name;
                    }
                }
            }
            
            return 'Unknown Device';
        }
        
        function formatDateTime(date) {
            const day = String(date.getDate()).padStart(2, '0');
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const year = date.getFullYear();
            const hours = String(date.getHours()).padStart(2, '0');
            const minutes = String(date.getMinutes()).padStart(2, '0');
            const seconds = String(date.getSeconds()).padStart(2, '0');
            
            return `${day}-${month}-${year} ${hours}:${minutes}:${seconds}`;
        }
        
        function toggleFullscreen(sectionId, chartId) {
            const section = document.getElementById(sectionId);
            const button = document.getElementById(sectionId.replace('Section', 'FullscreenBtn'));
            const chart = charts[chartId];
            
            if (section.classList.contains('fullscreen')) {
                // Exit fullscreen
                section.classList.remove('fullscreen');
                button.textContent = '🔍 Fullscreen';
                button.classList.remove('exit-fullscreen');
                
                // Remove fullscreen device filters
                const fullscreenFilters = section.querySelector('.fullscreen-device-filters');
                if (fullscreenFilters) {
                    fullscreenFilters.remove();
                }
                
                // Re-enable body scroll
                document.body.style.overflow = '';
                
                // Resize chart after exiting fullscreen
                setTimeout(() => {
                    if (chart) {
                        chart.resize();
                    }
                }, 100);
                
            } else {
                // Enter fullscreen
                section.classList.add('fullscreen');
                button.textContent = '❌ Exit Fullscreen';
                button.classList.add('exit-fullscreen');
                
                // Add device filters to fullscreen view
                addFullscreenDeviceFilters(section);
                
                // Disable body scroll to prevent scrolling behind fullscreen
                document.body.style.overflow = 'hidden';
                
                // Resize chart after entering fullscreen
                setTimeout(() => {
                    if (chart) {
                        chart.resize();
                    }
                }, 100);
            }
        }
        
        // Add device filters to fullscreen view
        function addFullscreenDeviceFilters(section) {
            if (!deviceTracker) return;
            
            const config = deviceTracker.getEnvironmentConfig();
            if (!config || !config.devices || config.devices.length === 0) return;
            
            // Get only devices that have events in the current graph data
            const devicesWithEvents = getDevicesWithEvents();
            
            if (devicesWithEvents.length === 0) return; // Don't show filters if no devices have events
            
            // Create fullscreen device filter container
            const filtersContainer = document.createElement('div');
            filtersContainer.className = 'fullscreen-device-filters';
            filtersContainer.style.cssText = `
                position: absolute;
                top: 20px;
                right: 20px;
                min-width: 250px;
                min-height: 150px;
                max-height: 80vh;
                background: rgba(255, 255, 255, 0.08);
                border-radius: 15px;
                padding: 15px;
                box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
                backdrop-filter: blur(20px);
                -webkit-backdrop-filter: blur(20px);
                border: 1px solid rgba(255, 255, 255, 0.15);
                cursor: default;
                z-index: 10000;
                overflow: auto;
                pointer-events: auto;
            `;
            
            // Add drag handle (title bar) - ONLY this area should allow dragging
            const titleBar = document.createElement('div');
            titleBar.className = 'title-bar';
            titleBar.style.cssText = `
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 10px;
                padding-bottom: 8px;
                border-bottom: 1px solid rgba(255, 255, 255, 0.3);
                cursor: move;
                user-select: none;
            `;
            
            const title = document.createElement('h4');
            title.textContent = '🔍 Device Filters';
            title.style.cssText = `
                margin: 0;
                color: white;
                font-size: 14px;
                font-weight: bold;
            `;
            
            const closeButton = document.createElement('button');
            closeButton.textContent = '×';
            closeButton.style.cssText = `
                background: none;
                border: none;
                color: white;
                font-size: 18px;
                cursor: pointer;
                padding: 0;
                width: 20px;
                height: 20px;
                display: flex;
                align-items: center;
                justify-content: center;
                border-radius: 50%;
                transition: background-color 0.2s;
            `;
            closeButton.onmouseover = () => closeButton.style.backgroundColor = 'rgba(255, 255, 255, 0.2)';
            closeButton.onmouseout = () => closeButton.style.backgroundColor = 'transparent';
            closeButton.onclick = () => filtersContainer.remove();
            
            titleBar.appendChild(title);
            titleBar.appendChild(closeButton);
            filtersContainer.appendChild(titleBar);
            
            const buttonsContainer = document.createElement('div');
            buttonsContainer.className = 'device-filter-buttons';
            buttonsContainer.style.cssText = `
                display: flex;
                flex-wrap: wrap;
                gap: 8px;
                max-height: calc(100% - 50px);
                overflow-y: auto;
                align-content: flex-start;
            `;
            
            // Create device filter buttons
            devicesWithEvents.forEach(device => {
                const isHidden = hiddenDevices.has(device.id);
                const button = document.createElement('button');
                button.className = `device-filter-btn ${isHidden ? 'hidden' : 'active'}`;
                button.setAttribute('data-device-id', device.id);
                button.onclick = () => toggleDeviceFilter(device.id);
                button.style.cssText = `
                    display: flex;
                    align-items: center;
                    gap: 8px;
                    padding: 8px 12px;
                    border: none;
                    border-radius: 8px;
                    background: ${isHidden ? 'rgba(255, 255, 255, 0.1)' : 'rgba(255, 255, 255, 0.2)'};
                    color: white;
                    cursor: pointer;
                    font-size: 12px;
                    transition: all 0.2s;
                    white-space: nowrap;
                    overflow: hidden;
                    text-overflow: ellipsis;
                    width: 180px;
                    flex: 0 0 180px;
                `;
                
                const colorIndicator = document.createElement('div');
                colorIndicator.className = 'device-color-indicator';
                colorIndicator.style.cssText = `
                    width: 12px;
                    height: 12px;
                    border-radius: 50%;
                    background-color: ${device.color || '#cccccc'};
                    flex-shrink: 0;
                `;
                
                const deviceName = document.createElement('span');
                deviceName.textContent = device.name;
                deviceName.style.cssText = `
                    flex: 1;
                    overflow: hidden;
                    text-overflow: ellipsis;
                    white-space: nowrap;
                `;
                
                const statusIcon = document.createElement('span');
                statusIcon.textContent = isHidden ? '👁️‍🗨️' : '👁️';
                statusIcon.style.cssText = `
                    font-size: 10px;
                    flex-shrink: 0;
                `;
                
                button.appendChild(colorIndicator);
                button.appendChild(deviceName);
                button.appendChild(statusIcon);
                
                // Add hover effects
                button.onmouseover = () => {
                    button.style.background = isHidden ? 'rgba(255, 255, 255, 0.2)' : 'rgba(255, 255, 255, 0.3)';
                };
                button.onmouseout = () => {
                    button.style.background = isHidden ? 'rgba(255, 255, 255, 0.1)' : 'rgba(255, 255, 255, 0.2)';
                };
                
                buttonsContainer.appendChild(button);
            });
            
            filtersContainer.appendChild(buttonsContainer);
            section.appendChild(filtersContainer);
            
            // Add drag functionality ONLY from title bar
            makeDraggable(filtersContainer, titleBar);
            
            // Add resize functionality ONLY from resize handle
            makeResizable(filtersContainer);
        }
        
        // Simple drag functionality - ONLY works on title bar
        function makeDraggable(container, titleBar) {
            let dragState = null;
            
            function handleMouseMove(e) {
                if (!dragState) return;
                
                const deltaX = e.clientX - dragState.startX;
                const deltaY = e.clientY - dragState.startY;
                
                const newLeft = dragState.initialLeft + deltaX;
                const newTop = dragState.initialTop + deltaY;
                
                // Keep within bounds
                const maxLeft = window.innerWidth - container.offsetWidth;
                const maxTop = window.innerHeight - container.offsetHeight;
                
                container.style.left = Math.max(0, Math.min(newLeft, maxLeft)) + 'px';
                container.style.top = Math.max(0, Math.min(newTop, maxTop)) + 'px';
            }
            
            function handleMouseUp() {
                if (dragState) {
                    dragState = null;
                    document.body.style.userSelect = '';
                    document.removeEventListener('mousemove', handleMouseMove);
                    document.removeEventListener('mouseup', handleMouseUp);
                }
            }
            
            titleBar.onmousedown = function(e) {
                // Don't drag if clicking close button
                if (e.target.innerHTML === '×') return;
                
                dragState = {
                    startX: e.clientX,
                    startY: e.clientY,
                    initialLeft: container.offsetLeft,
                    initialTop: container.offsetTop
                };
                
                document.body.style.userSelect = 'none';
                document.addEventListener('mousemove', handleMouseMove);
                document.addEventListener('mouseup', handleMouseUp);
                e.preventDefault();
            };
        }
        
        // Simple resize functionality - ONLY works on resize handle
        function makeResizable(container) {
            // Create resize handle
            const resizeHandle = document.createElement('div');
            resizeHandle.className = 'resize-handle';
            resizeHandle.innerHTML = '↘';
            resizeHandle.style.cssText = `
                position: absolute;
                bottom: 0;
                right: 0;
                width: 25px;
                height: 25px;
                cursor: se-resize;
                background: rgba(255, 255, 255, 0.5);
                color: white;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 14px;
                border-radius: 0 0 8px 0;
                user-select: none;
                z-index: 1000;
            `;
            container.appendChild(resizeHandle);
            
            let resizeState = null;
            
            function handleMouseMove(e) {
                if (!resizeState) return;
                
                const deltaX = e.clientX - resizeState.startX;
                const deltaY = e.clientY - resizeState.startY;
                
                const newWidth = Math.max(250, resizeState.initialWidth + deltaX);
                const newHeight = Math.max(150, resizeState.initialHeight + deltaY);
                
                const maxWidth = window.innerWidth - 40;
                const maxHeight = window.innerHeight * 0.8;
                
                container.style.width = Math.min(newWidth, maxWidth) + 'px';
                container.style.height = Math.min(newHeight, maxHeight) + 'px';
            }
            
            function handleMouseUp() {
                if (resizeState) {
                    resizeState = null;
                    document.body.style.userSelect = '';
                    document.removeEventListener('mousemove', handleMouseMove);
                    document.removeEventListener('mouseup', handleMouseUp);
                }
            }
            
            resizeHandle.onmousedown = function(e) {
                resizeState = {
                    startX: e.clientX,
                    startY: e.clientY,
                    initialWidth: container.offsetWidth,
                    initialHeight: container.offsetHeight
                };
                
                document.body.style.userSelect = 'none';
                document.addEventListener('mousemove', handleMouseMove);
                document.addEventListener('mouseup', handleMouseUp);
                e.preventDefault();
                e.stopPropagation();
            };
        }
        


        // Global click listener to close context menu
        document.addEventListener('click', function(event) {
            const contextMenu = document.getElementById('chartContextMenu');
            if (contextMenu && !contextMenu.contains(event.target)) {
                removeContextMenu();
            }
        });

        // Find the nearest data point to a canvas position
        function findNearestDataPoint(chart, canvasPosition) {
            if (!chart || !chart.data.datasets[0].data.length) return null;
            
            const data = chart.data.datasets[0].data;
            let nearestPoint = null;
            let minDistance = Infinity;
            const maxDistance = 20; // Maximum distance in pixels to consider a "hit"
            
            data.forEach((point, index) => {
                // Convert data coordinates to canvas coordinates
                const pixelX = chart.scales.x.getPixelForValue(point.x);
                const pixelY = chart.scales.y.getPixelForValue(point.y);
                
                // Calculate distance from click position
                const distance = Math.sqrt(
                    Math.pow(canvasPosition.x - pixelX, 2) + 
                    Math.pow(canvasPosition.y - pixelY, 2)
                );
                
                if (distance < minDistance && distance <= maxDistance) {
                    minDistance = distance;
                    nearestPoint = { index, point, distance };
                }
            });
            
            return nearestPoint;
        }

        // Handle double-click on a data point
        function handleDataPointDoubleClick(chartId, pointIndex, dataPoint) {
            if (!deviceTracker) {
                showError('Device tracker not available. Please ensure the environment is properly configured.');
                return;
            }
            
            const phase = getPhaseFromChartId(chartId);
            
            // Check if this is from the details dialog
            const isFromDetailsDialog = chartId.startsWith('details-');
            
            let eventType = 'generic';
            let eventPowerDelta = 0;
            
            if (isFromDetailsDialog) {
                // For details dialog, use the point's power value and mark as normal
                eventType = 'normal';
                eventPowerDelta = dataPoint.y;
            } else {
                // Get chart data to determine if this is a peak or valley
                const data = charts[chartId].data.datasets[0].data;
                const eventThreshold = parseFloat(document.getElementById('eventThreshold')?.value || 10);
                
                // Analyze the chart data to find peaks and valleys
                const { peaks, valleys } = analyzeChartData(data, 'power');
                const accumulatedDeltas = calculateAccumulatedDeltas(data, peaks, valleys);
                
                // Check if this point is a significant event
                const isPeak = peaks.includes(pointIndex);
                const isValley = valleys.includes(pointIndex);
                const accumulatedDelta = accumulatedDeltas[pointIndex];
                
                if (isPeak) {
                    eventType = 'peak';
                    eventPowerDelta = accumulatedDelta || 0;
                } else if (isValley) {
                    eventType = 'valley';
                    eventPowerDelta = accumulatedDelta || 0;
                } else {
                    // For generic points, use the power value as delta
                    eventPowerDelta = dataPoint.y;
                }
            }
            
            // Show visual feedback
            const eventDescription = eventType === 'peak' ? 'peak' : eventType === 'valley' ? 'valley' : 'generic point';
            showStatus(`Double-clicked on ${eventDescription}: ${Math.abs(eventPowerDelta).toFixed(1)}W on Phase ${phase}`, 'connected');
            
            // Create and show the universal device association dialog
            showUniversalAssociationDialog(pointIndex, eventType, eventPowerDelta, dataPoint, phase, isFromDetailsDialog);
        }

        // Show universal device association dialog with START/PEAK/END selection
        function showUniversalAssociationDialog(pointIndex, eventType, eventPowerDelta, dataPoint, phase, isFromDetailsDialog = false) {
            const event = {
                type: eventType,
                phase: phase,
                powerDelta: eventPowerDelta,
                timestamp: dataPoint.x,
                readings: getCurrentReadings(dataPoint.x)
            };
            
            // Check for existing association
            const associations = deviceTracker.deviceEvents;
            const timeWindow = 5000; // 5 seconds window
            
            // Find the CLOSEST existing association within the time window
            let existingAssociation = null;
            let closestTimeDiff = Infinity;
            
            for (const assoc of associations) {
                const timeDiff = Math.abs(assoc.timestamp - dataPoint.x);
                if (timeDiff <= timeWindow && 
                    assoc.phase === phase &&
                    (assoc.type === eventType || assoc.type === 'start') &&
                    timeDiff < closestTimeDiff) {
                    existingAssociation = assoc;
                    closestTimeDiff = timeDiff;
                }
            }
            
            // Get device suggestions
            const suggestions = deviceTracker.analyzeEvent(event);
            const config = deviceTracker.getEnvironmentConfig();
            
            if (!config || !config.devices) {
                alert('No devices configured. Please set up your environment first by clicking "⚙️ Environment Setup".');
                return;
            }
            
            // Determine pattern type
            let patternType = 'unknown';
            let patternDescription = '';
            if (eventPowerDelta > 50) {
                patternType = 'turn_on';
                patternDescription = '🟢 Device Turn-On Pattern (positive power slope)';
            } else if (eventPowerDelta < -50) {
                patternType = 'turn_off';
                patternDescription = '🔴 Device Turn-Off Pattern (negative power slope)';
            } else if (Math.abs(eventPowerDelta) < 20 && dataPoint.y > 100) {
                patternType = 'stabilization';
                patternDescription = '🟡 Power Stabilization Pattern (steady consumption)';
            } else {
                patternDescription = '⚪ Minor Power Fluctuation';
            }

            // Create universal device selection dialog with event type selection
            let dialogContent = `
                <div style="max-width: 700px;">
                    <h3>🔗 Associate Device with Event</h3>
                    <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
                        <p><strong>📊 Point Details:</strong></p>
                        <ul style="margin: 10px 0; padding-left: 20px;">
                            <li><strong>Power Value:</strong> ${dataPoint.y.toFixed(1)}W</li>
                            <li><strong>Power Change:</strong> ${eventPowerDelta > 0 ? '+' : ''}${eventPowerDelta.toFixed(1)}W</li>
                            <li><strong>Phase:</strong> ${phase}</li>
                            <li><strong>Time:</strong> ${formatDateTime(new Date(dataPoint.x))}</li>
                            <li><strong>Point Type:</strong> ${eventType === 'peak' ? 'Peak' : eventType === 'valley' ? 'Valley' : 'Normal Point'}</li>
                        </ul>
                    </div>
                    
                    <h4>🎯 Select Event Type:</h4>
                    <div style="display: flex; gap: 15px; margin-bottom: 20px; justify-content: center;">
                        <button id="eventTypeStart" onclick="selectEventType('start')" style="
                            padding: 15px 25px; 
                            border: 2px solid #28a745; 
                            background: white; 
                            color: #28a745; 
                            border-radius: 8px; 
                            cursor: pointer; 
                            font-size: 16px; 
                            font-weight: bold;
                            transition: all 0.3s ease;
                            display: flex;
                            flex-direction: column;
                            align-items: center;
                            gap: 5px;
                        " onmouseover="this.style.background='#28a745'; this.style.color='white'" onmouseout="this.style.background='white'; this.style.color='#28a745'">
                            <span style="font-size: 24px;">▶️</span>
                            <span>START</span>
                        </button>
                        
                        <button id="eventTypePeak" onclick="selectEventType('peak')" style="
                            padding: 15px 25px; 
                            border: 2px solid #fd7e14; 
                            background: white; 
                            color: #fd7e14; 
                            border-radius: 8px; 
                            cursor: pointer; 
                            font-size: 16px; 
                            font-weight: bold;
                            transition: all 0.3s ease;
                            display: flex;
                            flex-direction: column;
                            align-items: center;
                            gap: 5px;
                        " onmouseover="this.style.background='#fd7e14'; this.style.color='white'" onmouseout="this.style.background='white'; this.style.color='#fd7e14'">
                            <span style="font-size: 24px;">⚡</span>
                            <span>PEAK</span>
                        </button>
                        
                        <button id="eventTypeEnd" onclick="selectEventType('end')" style="
                            padding: 15px 25px; 
                            border: 2px solid #dc3545; 
                            background: white; 
                            color: #dc3545; 
                            border-radius: 8px; 
                            cursor: pointer; 
                            font-size: 16px; 
                            font-weight: bold;
                            transition: all 0.3s ease;
                            display: flex;
                            flex-direction: column;
                            align-items: center;
                            gap: 5px;
                        " onmouseover="this.style.background='#dc3545'; this.style.color='white'" onmouseout="this.style.background='white'; this.style.color='#dc3545'">
                            <span style="font-size: 24px;">⏹️</span>
                            <span>END</span>
                        </button>
                    </div>
                    
                    <div id="selectedEventTypeInfo" style="
                        background: #e9ecef; 
                        padding: 10px; 
                        border-radius: 6px; 
                        margin-bottom: 20px; 
                        text-align: center; 
                        display: none;
                    ">
                        <strong>Selected Event Type: <span id="selectedEventTypeText"></span></strong>
                    </div>
                    
                    <h4>📋 Select Device:</h4>
                    <select id="universalDeviceSelect" style="width: 100%; padding: 10px; margin: 10px 0; border: 1px solid #ced4da; border-radius: 6px; font-size: 14px;">
                        <option value="">Select a device...</option>
            `;
            
            const phaseDevices = config.devices.filter(d => d.phase === phase);
            phaseDevices.forEach(device => {
                const roomName = getDeviceRoom(device.roomId, config);
                dialogContent += `<option value="${device.id}">${device.name} (${roomName} - ${device.type})</option>`;
            });
            
            dialogContent += `
                    </select>
                    
                    <div style="margin-top: 20px; display: flex; gap: 10px; justify-content: flex-end;">
                        <button id="associateButton" onclick="associateUniversalEvent()" style="background: #007bff; color: white; border: none; padding: 10px 20px; border-radius: 6px; cursor: pointer; font-weight: bold; opacity: 0.5; pointer-events: none;" disabled>
                            🔗 Associate Event
                        </button>
                        <button class="btn btn-secondary" onclick="closeUniversalAssociationDialog()" style="background: #6c757d; color: white; border: none; padding: 10px 20px; border-radius: 6px; cursor: pointer;">
                            ❌ Cancel
                        </button>
                    </div>
                </div>
            `;
            
            // Store universal event data for association
            universalEventData = {
                pointIndex: pointIndex,
                eventType: eventType,
                eventPowerDelta: eventPowerDelta,
                dataPoint: dataPoint,
                phase: phase,
                isFromDetailsDialog: isFromDetailsDialog
            };
            
            // Show dialog
            const existingDialog = document.getElementById('universalAssociationDialog');
            if (existingDialog) {
                existingDialog.remove();
            }
            
            const dialog = document.createElement('div');
            dialog.id = 'universalAssociationDialog';
            dialog.style.cssText = `
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: white;
                padding: 25px;
                border-radius: 15px;
                box-shadow: 0 10px 40px rgba(0,0,0,0.3);
                z-index: 10001;
                max-height: 85vh;
                overflow-y: auto;
                max-width: 90vw;
                border: 2px solid #007bff;
            `;
            dialog.innerHTML = dialogContent;
            
            // Add backdrop
            const backdrop = document.createElement('div');
            backdrop.id = 'universalAssociationBackdrop';
            backdrop.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0,0,0,0.6);
                z-index: 10000;
                backdrop-filter: blur(3px);
                -webkit-backdrop-filter: blur(3px);
            `;
            backdrop.onclick = closeUniversalAssociationDialog;
            
            document.body.appendChild(backdrop);
            document.body.appendChild(dialog);
            
            // Add event listener to device select to check button state
            const deviceSelect = document.getElementById('universalDeviceSelect');
            if (deviceSelect) {
                deviceSelect.addEventListener('change', () => {
                    console.log('Device select changed, selectedEventType:', selectedEventType);
                    checkAssociateButtonState();
                });
            }
            
            // Add keyboard listener for ESC key
            const escapeHandler = (e) => {
                if (e.key === 'Escape') {
                    closeUniversalAssociationDialog();
                    document.removeEventListener('keydown', escapeHandler);
                }
            };
            document.addEventListener('keydown', escapeHandler);
        }

        // Find the actual event start time by looking backwards from peak
        function findEventStart(data, peakIndex, baselinePower = null) {
            if (peakIndex <= 0) return data[0].x;
            
            const peakPower = data[peakIndex].y;
            const peakTime = data[peakIndex].x;
            const startSearchIndex = Math.max(0, peakIndex - 50); // Look back up to 50 points
            
            // If no baseline provided, estimate it from nearby low points
            if (baselinePower === null) {
                const nearbyPoints = data.slice(Math.max(0, peakIndex - 20), peakIndex - 5);
                baselinePower = nearbyPoints.length > 0 ? 
                    Math.min(...nearbyPoints.map(p => p.y)) : 
                    data[Math.max(0, peakIndex - 10)].y;
            }
            
            // Find where the curve starts rising significantly
            // Use a more sophisticated approach: look for the first significant change in gradient
            const powerRange = peakPower - baselinePower;
            const minThreshold = baselinePower + Math.max(10, powerRange * 0.02); // At least 10W or 2% of range
            
            console.log(`Finding event start: Peak=${peakPower.toFixed(2)}W, Baseline=${baselinePower.toFixed(2)}W, MinThreshold=${minThreshold.toFixed(2)}W`);
            
            // Simplified approach: look for the first significant drop in power going backwards
            let bestStartIndex = peakIndex;
            let minPowerFound = peakPower;
            
            // First, find the lowest power point in the search range
            for (let i = peakIndex - 1; i >= startSearchIndex; i--) {
                const currentPower = data[i].y;
                console.log(`Checking point ${i}: power=${currentPower.toFixed(2)}W, minFound=${minPowerFound.toFixed(2)}W`);
                
                if (currentPower < minPowerFound) {
                    minPowerFound = currentPower;
                    bestStartIndex = i;
                }
            }
            
            // If we found a significantly lower point, use it as the start
            if (bestStartIndex !== peakIndex && (peakPower - minPowerFound) > 20) {
                const actualStart = data[bestStartIndex].x;
                console.log(`✅ Event start found: Peak at ${new Date(peakTime).toLocaleTimeString()}, actual start at ${new Date(actualStart).toLocaleTimeString()}, diff: ${((peakTime - actualStart) / 1000).toFixed(1)}s`);
                console.log(`Power drop: ${peakPower.toFixed(2)}W -> ${minPowerFound.toFixed(2)}W (${(peakPower - minPowerFound).toFixed(2)}W difference)`);
                return actualStart;
            }
            
            console.log(`No significant power drop found, using fallback approach`);
            
            // Fallback: look for any point that's significantly lower than the peak
            for (let i = peakIndex - 1; i >= startSearchIndex; i--) {
                const currentPower = data[i].y;
                const powerDrop = peakPower - currentPower;
                
                if (powerDrop > 30) { // At least 30W drop from peak
                    const actualStart = data[i + 1].x;
                    console.log(`⚠️ Event start found (fallback): Peak at ${new Date(peakTime).toLocaleTimeString()}, actual start at ${new Date(actualStart).toLocaleTimeString()}, diff: ${((peakTime - actualStart) / 1000).toFixed(1)}s`);
                    console.log(`Power drop: ${peakPower.toFixed(2)}W -> ${currentPower.toFixed(2)}W (${powerDrop.toFixed(2)}W difference)`);
                    return actualStart;
                }
            }
            
            // If we can't find a clear start, return a point a few steps before the peak
            const fallbackIndex = Math.max(0, peakIndex - 3); // Go back 3 points from peak
            const fallbackStart = data[fallbackIndex].x;
            console.log(`❌ Event start fallback: Peak at ${new Date(peakTime).toLocaleTimeString()}, fallback start at ${new Date(fallbackStart).toLocaleTimeString()}, diff: ${((peakTime - fallbackStart) / 1000).toFixed(1)}s`);
            console.log(`Using fallback because no significant power drop found. Peak power: ${peakPower.toFixed(2)}W, Min power found: ${minPowerFound.toFixed(2)}W`);
            return fallbackStart;
        }
        
        // Find the actual event end time by looking forward from valley
        function findEventEnd(data, valleyIndex, baselinePower = null) {
            if (valleyIndex >= data.length - 1) return data[data.length - 1].x;
            
            const valleyPower = data[valleyIndex].y;
            const endSearchIndex = Math.min(data.length - 1, valleyIndex + 50); // Look forward up to 50 points
            
            // If no baseline provided, estimate it from nearby points after the valley
            if (baselinePower === null) {
                const nearbyPoints = data.slice(valleyIndex + 5, Math.min(data.length, valleyIndex + 20));
                baselinePower = nearbyPoints.length > 0 ? 
                    Math.min(...nearbyPoints.map(p => p.y)) : 
                    data[Math.min(data.length - 1, valleyIndex + 10)].y;
            }
            
            // Find where the curve stabilizes after the valley
            const powerThreshold = baselinePower + Math.abs(valleyPower - baselinePower) * 0.1; // 10% above baseline
            
            for (let i = valleyIndex + 1; i <= endSearchIndex; i++) {
                if (data[i].y <= powerThreshold) {
                    // Found where it stabilizes
                    return data[i].x;
                }
            }
            
            // If we can't find a clear end, return a point a few steps after the valley
            return data[Math.min(data.length - 1, valleyIndex + 5)].x;
        }
        
        // Find corresponding valley for a peak (or vice versa) to create complete events
        function findCorrespondingEvent(data, eventIndex, eventType, searchDirection = 'forward') {
            const targetType = eventType === 'peak' ? 'valley' : 'peak';
            const { peaks, valleys } = analyzeChartData(data, 'power');
            const targetEvents = targetType === 'peak' ? peaks : valleys;
            
            const eventTime = data[eventIndex].x;
            const maxSearchTime = 8 * 60 * 60 * 1000; // 8 hours in milliseconds
            
            let bestMatch = null;
            let bestTimeDiff = Infinity;
            
            targetEvents.forEach(targetIndex => {
                const targetTime = data[targetIndex].x;
                const timeDiff = Math.abs(targetTime - eventTime);
                
                // Check if it's in the right direction and within time limit
                const isRightDirection = searchDirection === 'forward' ? 
                    targetTime > eventTime : targetTime < eventTime;
                
                if (isRightDirection && timeDiff < maxSearchTime && timeDiff < bestTimeDiff) {
                    bestMatch = targetIndex;
                    bestTimeDiff = timeDiff;
                }
            });
            
            return bestMatch;
        }

        // Associate device from chart dialog
        function associateDeviceFromChart(deviceId, confidence) {
            if (!window.currentChartEvent || !deviceTracker) {
                console.error('Cannot associate device: currentChartEvent or deviceTracker is null');
                return;
            }
            
            // Record the basic association (peak/valley for device identification)
            deviceTracker.recordDeviceAssociation(window.currentChartEvent, deviceId, confidence);
            
            // Get the chart data to find actual event boundaries
            const chartId = Object.keys(charts).find(id => 
                getPhaseFromChartId(id) === window.currentChartEvent.phase && id.includes('power')
            );
            
            if (!chartId || !charts[chartId]) {
                console.warn('Could not find chart for phase', window.currentChartEvent.phase);
                return;
            }
            
            const data = charts[chartId].data.datasets[0].data;
            const eventIndex = window.currentChartEventIndex;
            const eventType = window.currentChartEvent.type;
            
            // Find the corresponding event (peak->valley or valley->peak)
            let startEvent, endEvent;
            
            if (eventType === 'peak') {
                // This is a turn-on event, find the corresponding turn-off (valley)
                const valleyIndex = findCorrespondingEvent(data, eventIndex, 'peak', 'forward');
                
                if (valleyIndex !== null) {
                    // Find actual event boundaries
                    const actualStartTime = findEventStart(data, eventIndex);
                    const actualEndTime = findEventEnd(data, valleyIndex);
                    
                    // Create a proper start event (not peak type, but start type)
                    startEvent = {
                        type: 'start', // Mark as start event, not peak
                        phase: window.currentChartEvent.phase,
                        powerDelta: data[eventIndex].y - data[Math.max(0, eventIndex - 1)].y, // Power change from previous point to peak
                        timestamp: actualStartTime, // Use actual start time, not peak time
                        readings: getCurrentReadings(actualStartTime)
                    };
                    
                    endEvent = {
                        type: 'valley',
                        phase: window.currentChartEvent.phase,
                        powerDelta: data[valleyIndex].y - data[eventIndex].y, // Power change from peak to valley
                        timestamp: actualEndTime, // Use actual end time, not valley time
                        readings: getCurrentReadings(actualEndTime)
                    };
                    
                    // Record the complete device event with proper boundaries
                    deviceTracker.recordDeviceEvent(deviceId, startEvent, endEvent, 'usage');
                    
                    const durationMinutes = ((actualEndTime - actualStartTime) / (1000 * 60)).toFixed(1);
                    showStatus(`✅ Recorded complete usage event for device (${durationMinutes} minutes)`, 'connected');
                } else {
                    console.log('No corresponding valley found for peak event');
                }
                
            } else if (eventType === 'valley') {
                // This is a turn-off event, find the corresponding turn-on (peak)
                const peakIndex = findCorrespondingEvent(data, eventIndex, 'valley', 'backward');
                
                if (peakIndex !== null) {
                    // Find actual event boundaries
                    const actualStartTime = findEventStart(data, peakIndex);
                    const actualEndTime = findEventEnd(data, eventIndex);
                    
                    startEvent = {
                        type: 'start', // Mark as start event, not peak
                        phase: window.currentChartEvent.phase,
                        powerDelta: data[peakIndex].y - data[Math.max(0, peakIndex - 1)].y, // Power change from previous point to peak
                        timestamp: actualStartTime, // Use actual start time, not peak time
                        readings: getCurrentReadings(actualStartTime)
                    };
                    
                    endEvent = {
                        type: 'valley',
                        phase: window.currentChartEvent.phase,
                        powerDelta: data[valleyIndex].y - data[peakIndex].y, // Power change from peak to valley
                        timestamp: actualEndTime, // Use actual end time, not valley time
                        readings: getCurrentReadings(actualEndTime)
                    };
                    
                    // Record the complete device event with proper boundaries
                    deviceTracker.recordDeviceEvent(deviceId, startEvent, endEvent, 'usage');
                    
                    const durationMinutes = ((actualEndTime - actualStartTime) / (1000 * 60)).toFixed(1);
                    showStatus(`✅ Recorded complete usage event for device (${durationMinutes} minutes)`, 'connected');
                } else {
                    console.log('No corresponding peak found for valley event');
                }
            }
            
            closeChartAssociationDialog();
            
            // Get device name for feedback
            const config = deviceTracker.getEnvironmentConfig();
            const device = config?.devices?.find(d => d.id === deviceId);
            const deviceName = device ? device.name : 'Unknown Device';
            
            // Refresh device annotations on charts
            refreshDeviceAnnotations();
            
            const currentEventType = window.currentChartEvent ? window.currentChartEvent.type : 'unknown';
            showStatus(`✅ Associated ${currentEventType} event with "${deviceName}" (${(confidence * 100).toFixed(0)}% confidence)`, 'connected');
        }

        // Associate manual device from chart dialog
        function associateManualDeviceFromChart() {
            const select = document.getElementById('manualDeviceSelectChart');
            const deviceId = select.value;
            
            if (!deviceId) {
                alert('Please select a device from the dropdown list.');
                return;
            }
            
            associateDeviceFromChart(deviceId, 1.0); // Manual associations get 100% confidence
        }

        // Close chart association dialog
        function closeChartAssociationDialog() {
            const dialog = document.getElementById('chartAssociationDialog');
            const backdrop = document.getElementById('chartAssociationBackdrop');
            
            if (dialog) dialog.remove();
            if (backdrop) backdrop.remove();
            
            window.currentChartEvent = null;
            window.currentChartEventIndex = null;
        }
        
        function closeModal() {
            document.getElementById('chartDetailsModal').style.display = 'none';
        }
        
        // Close modal when clicking outside of it
        window.onclick = function(event) {
            const modal = document.getElementById('chartDetailsModal');
            if (event.target === modal) {
                closeModal();
            }
        }
        
        // Force update all charts to use 24-hour format
        function forceUpdate24HourFormat() {
            Object.keys(charts).forEach(chartId => {
                try {
                    const chart = charts[chartId];
                    if (chart && chart.options && chart.options.scales && chart.options.scales.x) {
                        // Ensure 24-hour format is applied
                        if (!chart.options.scales.x.time) {
                            chart.options.scales.x.time = {};
                        }
                        chart.options.scales.x.time.displayFormats = {
                            millisecond: 'HH:mm:ss.SSS',
                            second: 'HH:mm:ss',
                            minute: 'HH:mm',
                            hour: 'HH:mm',
                            day: 'HH:mm',
                            week: 'HH:mm',
                            month: 'HH:mm',
                            quarter: 'HH:mm',
                            year: 'HH:mm'
                        };
                        chart.options.scales.x.time.tooltipFormat = 'dd-MM-yyyy HH:mm:ss';
                        chart.update('none');
                    }
                } catch (error) {
                    console.warn(`Failed to update time format for chart ${chartId}:`, error);
                }
            });
        }

        // Initialize the dashboard
        async function initialize() {
            try {
                deviceTracker = new DeviceTracker();
                // Wait for DeviceTracker to fully initialize before proceeding
                await waitForDeviceTrackerInitialization();
            } catch (error) {
                console.warn('DeviceTracker not available:', error);
                deviceTracker = null;
            }
            initializeCharts();
            // Force 24-hour format after charts are created
            setTimeout(() => {
                try {
                    forceUpdate24HourFormat();
                } catch (error) {
                    console.warn('Error applying 24-hour format during initialization:', error);
                }
            }, 100);
            loadData();
            startAutoRefresh();
            
            // Initialize threshold lines after charts are created and data is loaded
            setTimeout(() => {
                try {
                    updateThresholds();
                    console.log('Threshold lines initialized');
                } catch (error) {
                    console.warn('Error initializing threshold lines:', error);
                }
            }, 1000);
            
            // Update refresh interval when changed
            document.getElementById('refreshInterval').addEventListener('change', () => {
                if (isAutoRefreshEnabled) {
                    startAutoRefresh();
                }
            });
            
            // Update charts when time range changes
            document.getElementById('timeRange').addEventListener('change', () => {
                if (lastDataUpdate) {
                    loadData(); // Reload to apply new time range
                }
            });
            
            // Update charts when average voltage changes
            document.getElementById('averageVoltage').addEventListener('change', () => {
                if (lastDataUpdate) {
                    loadData(); // Reload to apply new average voltage
                }
            });
            
            // Update layout when charts per row changes
            document.getElementById('chartsPerRow').addEventListener('change', updateChartsLayout);

        // Helper function to wait for DeviceTracker initialization
        async function waitForDeviceTrackerInitialization() {
            if (!deviceTracker) return;
            
            // Wait for the configManager to be initialized
            let attempts = 0;
            const maxAttempts = 50; // 5 seconds max wait time
            
            while (attempts < maxAttempts) {
                if (deviceTracker.configManager !== null) {
                    // Give it a bit more time to load the data
                    await new Promise(resolve => setTimeout(resolve, 100));
                    
                    // Verify that the tracking data is loaded
                    if (deviceTracker.deviceAssociations && deviceTracker.deviceAssociations.length >= 0) {
                        console.log('DeviceTracker fully initialized with', deviceTracker.deviceAssociations.length, 'associations');
                        break;
                    }
                }
                await new Promise(resolve => setTimeout(resolve, 100));
                attempts++;
            }
            
            if (attempts >= maxAttempts) {
                console.warn('DeviceTracker initialization timeout, proceeding anyway');
            }
        }
            
            // Refresh modal data when event threshold changes
            document.getElementById('eventThreshold').addEventListener('change', () => {
                // If modal is open, refresh the table to apply new threshold
                const modal = document.getElementById('chartDetailsModal');
                if (modal && modal.style.display === 'block' && currentModalData) {
                    populateRecordsTableWithTracking(
                        currentModalData.data, 
                        currentModalData.peaks, 
                        currentModalData.valleys, 
                        currentModalData.unit
                    );
                }
            });
        }
        
        // Data collection control functions
        async function startDataCollection() {
            const deviceIP = document.getElementById('deviceIP').value.trim();
            const connectionType = document.getElementById('connectionType').value;
            const deviceId = document.getElementById('deviceId').value.trim();
            const authKey = document.getElementById('authKey').value.trim();
            let deviceType = 'trifase';
            if (connectionType === 'WEB') {
                deviceType = document.getElementById('deviceType').value;
            }
            if (isDataCollectionRunning) {
                showError('Data collection is already running');
                return;
            }
            try {
                updateStatus('connected', 'Starting data collection...');
                const body = {
                    deviceIP,
                    connectionType,
                    deviceId,
                    authKey,
                    deviceType // Include deviceType for data collector logic
                };
                const response = await fetch('/start-collection', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(body)
                });
                if (response.ok) {
                    isDataCollectionRunning = true;
                    if (!isAutoRefreshEnabled) {
                        startAutoRefresh();
                    }
                    const connectionInfo = connectionType === 'WEB' ? `Device ID: ${deviceId}` : `IP: ${deviceIP}`;
                    updateStatus('connected', `Data collection started (${connectionType} - ${connectionInfo})`);
                    clearError();
                } else {
                    throw new Error(`Server error: ${response.status}`);
                }
            } catch (error) {
                console.error('Error starting data collection:', error);
                updateStatus('error', 'Failed to start data collection');
                showError(`Failed to start data collection: ${error.message}`);
            }
        }
        
        async function stopDataCollection() {
            try {
                updateStatus('connected', 'Stopping data collection...');
                const response = await fetch('/stop-collection', {
                    method: 'POST'
                });
                if (response.ok) {
                    isDataCollectionRunning = false;
                    stopAutoRefresh();
                    updateStatus('error', 'Data collection stopped');
                    clearError();
                } else {
                    throw new Error(`Server error: ${response.status}`);
                }
            } catch (error) {
                console.error('Error stopping data collection:', error);
                updateStatus('error', 'Failed to stop data collection');
                showError(`Failed to stop data collection: ${error.message}`);
            }
        }
        
        // Check collection status on page load
        async function checkCollectionStatus() {
            try {
                const response = await fetch('/collection-status');
                if (response.ok) {
                    const status = await response.json();
                    isDataCollectionRunning = status.processRunning || status.isRunning;
                    
                    const statusElement = document.getElementById('status');
                    
                    if (status.isRunning) {
                        // Enhanced status display with detailed information
                        const readingCount = status.readingCount || 0;
                        const lastReading = status.lastSuccessfulReading ? 
                            new Date(status.lastSuccessfulReading).toLocaleTimeString('en-GB', { hour12: false }) : 
                            'Unknown';
                        const uptime = status.startTime ? 
                            Math.round((Date.now() - new Date(status.startTime).getTime()) / 1000 / 60) : 
                            0;
                        
                        // Update the status element directly with enhanced display
                        if (statusElement) {
                            statusElement.className = 'status connected';
                            statusElement.innerHTML = `
                                <div style="display: flex; align-items: center; gap: 10px;">
                                    <div style="width: 8px; height: 8px; background: #28a745; border-radius: 50%; animation: pulse 2s infinite;"></div>
                                    <div>
                                        <strong>Data Collection Active</strong><br>
                                        <small>${readingCount} readings • ${uptime}min uptime • Last: ${lastReading}</small>
                                        ${status.consecutiveErrors > 0 ? `<br><small style="color: #ffc107;">⚠️ ${status.consecutiveErrors} recent errors</small>` : ''}
                                    </div>
                                </div>
                            `;
                        }
                    } else if (status.processRunning) {
                        updateStatus('connected', '🔄 Data collection starting...');
                    } else {
                        updateStatus('error', '⏹️ Data collection stopped');
                    }
                } else {
                    console.warn('Failed to get collection status:', response.status);
                }
            } catch (error) {
                // Ignore errors - server might not support this endpoint yet
                console.warn('Collection status check failed:', error.message);
            }
        }
        
        // Clear all tracking data
        async function clearTrackingData() {
            if (!deviceTracker) {
                showError('Device tracker not available');
                return;
            }
            
            // Show confirmation dialog
            const confirmed = confirm(
                '⚠️ Clear All Data?\n\n' +
                'This will permanently delete:\n' +
                '• All device associations\n' +
                '• Event history\n' +
                '• Learning data and statistics\n' +
                '• All power consumption data (CSV file)\n' +
                '• All chart data\n\n' +
                'Your device configuration will be preserved.\n\n' +
                'Are you sure you want to continue?'
            );
            
            if (!confirmed) {
                return;
            }
            
            try {
                updateStatus('connected', 'Clearing all data...');
                
                // Clear device tracking data
                const trackingSuccess = deviceTracker.clearTrackingData();
                
                if (!trackingSuccess) {
                    throw new Error('Failed to clear device tracking data');
                }
                
                // Clear CSV data via server endpoint
                const response = await fetch('/clear-data', {
                    method: 'POST'
                });
                
                if (!response.ok) {
                    throw new Error(`Server error: ${response.status}`);
                }
                
                const result = await response.json();
                
                if (!result.success) {
                    throw new Error(result.error || 'Failed to clear CSV data');
                }
                
                // Clear charts by updating with empty data
                Object.keys(charts).forEach(chartId => {
                    if (charts[chartId]) {
                        charts[chartId].data.datasets[0].data = [];
                        // Clear interpolated curve for power charts
                        if (chartId.includes('power') && charts[chartId].data.datasets.length > 1) {
                            charts[chartId].data.datasets[1].data = [];
                        }
                        charts[chartId].update('none');
                        updateChartStats(chartId, []);
                    }
                });
                
                showStatus('All data cleared successfully', 'connected');
                
                // Show success message with details
                setTimeout(() => {
                    alert(
                        '✅ All Data Cleared\n\n' +
                        'Successfully deleted:\n' +
                        '• Device associations\n' +
                        '• Event history\n' +
                        '• Learning data\n' +
                        '• Power consumption data\n' +
                        '• Chart data\n\n' +
                        'Your device configuration remains intact.\n' +
                        'You can start fresh data collection now.'
                    );
                }, 500);
                
            } catch (error) {
                console.error('Error clearing data:', error);
                showError(`Error clearing data: ${error.message}`);
                updateStatus('error', 'Failed to clear all data');
            }
        }
        
        // Device Discovery Functions
        let shellyDiscovery = null;
        let discoveredDevicesData = [];
        let selectedRanges = [];
        let suggestedRanges = [];

        async function startDeviceDiscovery() {
            document.getElementById('deviceDiscoveryModal').style.display = 'block';
            await loadSuggestedRanges();
        }

        function closeDiscoveryModal() {
            if (shellyDiscovery && shellyDiscovery.isScanning) {
                shellyDiscovery.stopDiscovery();
            }
            document.getElementById('deviceDiscoveryModal').style.display = 'none';
            resetDiscoveryUI();
        }

        function resetDiscoveryUI() {
            document.getElementById('discoveryProgress').style.display = 'none';
            document.getElementById('discoveredDevices').style.display = 'none';
            document.getElementById('rangeSelection').style.display = 'block';
            document.getElementById('startDiscoveryBtn').style.display = 'inline-block';
            document.getElementById('stopDiscoveryBtn').style.display = 'none';
            document.getElementById('progressFill').style.width = '0%';
            document.getElementById('progressText').textContent = 'Scanning...';
            document.getElementById('discoveryStatus').innerHTML = '<p>Select IP ranges to scan for Shelly devices on your network.</p>';
            document.getElementById('devicesList').innerHTML = '';
            discoveredDevicesData = [];
            selectedRanges = [];
            updateSelectedRangesDisplay();
        }

        async function loadSuggestedRanges() {
            if (!shellyDiscovery) {
                shellyDiscovery = new ShellyDiscovery();
            }

            try {
                suggestedRanges = await shellyDiscovery.getSuggestedRanges();
                displayRangeOptions();
            } catch (error) {
                console.error('Error loading suggested ranges:', error);
                document.getElementById('rangeOptions').innerHTML = '<p style="color: #dc3545;">Error loading suggested ranges. Please add custom ranges.</p>';
            }
        }

        function displayRangeOptions() {
            const rangeOptionsContainer = document.getElementById('rangeOptions');
            
            if (suggestedRanges.length === 0) {
                rangeOptionsContainer.innerHTML = '<p style="color: #6c757d; font-style: italic;">No suggested ranges available. Please add custom ranges.</p>';
                return;
            }

            rangeOptionsContainer.innerHTML = suggestedRanges.map((range, index) => `
                <div class="range-option ${range.recommended ? 'recommended' : ''}">
                    <input type="checkbox" id="range_${index}" value="${range.range}" onchange="toggleRangeSelection('${range.range}')">
                    <div class="range-option-info">
                        <div class="range-option-range">${range.range}.1-254</div>
                        <div class="range-option-description">${range.description}</div>
                    </div>
                    ${range.recommended ? '<div class="range-option-badge">Recommended</div>' : ''}
                </div>
            `).join('');

            // Auto-select recommended ranges
            suggestedRanges.forEach((range, index) => {
                if (range.recommended) {
                    document.getElementById(`range_${index}`).checked = true;
                    toggleRangeSelection(range.range);
                }
            });
        }

        function toggleRangeSelection(range) {
            const index = selectedRanges.indexOf(range);
            if (index > -1) {
                selectedRanges.splice(index, 1);
            } else {
                selectedRanges.push(range);
            }
            updateSelectedRangesDisplay();
        }

        function addCustomRange() {
            const customRangeInput = document.getElementById('customRange');
            const customRange = customRangeInput.value.trim();
            
            if (!customRange) {
                alert('❌ Please enter a valid IP range.\n\nExamples:\n• 192.168.1.45-55\n• 192.168.1\n• 192.168.1.50');
                customRangeInput.focus();
                return;
            }

            let rangeInfo;
            try {
                rangeInfo = parseIPRange(customRange);
            } catch (error) {
                alert(`❌ ${error.message}`);
                customRangeInput.focus();
                customRangeInput.select();
                return;
            }

            // Check if range already exists
            const rangeKey = rangeInfo.key;
            if (selectedRanges.find(r => r.key === rangeKey)) {
                alert(`⚠️ Range "${rangeInfo.display}" is already selected.`);
                customRangeInput.value = '';
                customRangeInput.focus();
                return;
            }

            selectedRanges.push(rangeInfo);
            customRangeInput.value = '';
            updateSelectedRangesDisplay();
            
            // Show success feedback
            updateDiscoveryStatus(`✅ Added range: ${rangeInfo.display} (${selectedRanges.length} range(s) selected)`);
        }

        function parseIPRange(input) {
            // Pattern 1: 192.168.1.45-55 (specific range)
            const specificRangePattern = /^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})-(\d{1,3})$/;
            let match = input.match(specificRangePattern);
            
            if (match) {
                const [, oct1, oct2, oct3, start, end] = match.map(Number);
                
                // Validate octets
                if ([oct1, oct2, oct3, start, end].some(n => n < 0 || n > 255)) {
                    throw new Error('Invalid IP range. Each number must be between 0 and 255.');
                }
                
                if (start > end) {
                    throw new Error('Invalid range. Start IP must be less than or equal to end IP.');
                }
                
                const baseIP = `${oct1}.${oct2}.${oct3}`;
                return {
                    type: 'specific',
                    baseIP: baseIP,
                    start: start,
                    end: end,
                    key: `${baseIP}.${start}-${end}`,
                    display: `${baseIP}.${start}-${end}`
                };
            }
            
            // Pattern 2: 192.168.1.50 (single IP)
            const singleIPPattern = /^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/;
            match = input.match(singleIPPattern);
            
            if (match) {
                const [, oct1, oct2, oct3, oct4] = match.map(Number);
                
                // Validate octets
                if ([oct1, oct2, oct3, oct4].some(n => n < 0 || n > 255)) {
                    throw new Error('Invalid IP address. Each number must be between 0 and 255.');
                }
                
                const fullIP = `${oct1}.${oct2}.${oct3}.${oct4}`;
                return {
                    type: 'single',
                    baseIP: `${oct1}.${oct2}.${oct3}`,
                    start: oct4,
                    end: oct4,
                    key: fullIP,
                    display: fullIP
                };
            }
            
            // Pattern 3: 192.168.1 (full subnet)
            const subnetPattern = /^(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/;
            match = input.match(subnetPattern);
            
            if (match) {
                const [, oct1, oct2, oct3] = match.map(Number);
                
                // Validate octets
                if ([oct1, oct2, oct3].some(n => n < 0 || n > 255)) {
                    throw new Error('Invalid IP range. Each number must be between 0 and 255.');
                }
                
                const baseIP = `${oct1}.${oct2}.${oct3}`;
                return {
                    type: 'subnet',
                    baseIP: baseIP,
                    start: 1,
                    end: 254,
                    key: `${baseIP}.1-254`,
                    display: `${baseIP}.1-254`
                };
            }
            
            throw new Error('Invalid format. Use:\n• 192.168.1.45-55 (range)\n• 192.168.1.50 (single IP)\n• 192.168.1 (full subnet)');
        }

        function updateSelectedRangesDisplay() {
            const selectedRangesContainer = document.getElementById('selectedRangesList');
            
            if (selectedRanges.length === 0) {
                selectedRangesContainer.innerHTML = '<p style="color: #6c757d; font-style: italic;">No ranges selected</p>';
                return;
            }

            selectedRangesContainer.innerHTML = selectedRanges.map((range, index) => `
                <div class="selected-range-tag">
                    ${range.display}
                    <span class="remove-range" onclick="removeSelectedRange(${index})">&times;</span>
                </div>
            `).join('');
        }

        function removeSelectedRange(index) {
            if (index >= 0 && index < selectedRanges.length) {
                const removedRange = selectedRanges[index];
                selectedRanges.splice(index, 1);
                updateSelectedRangesDisplay();
                
                // Uncheck the corresponding checkbox if it exists
                const checkbox = document.querySelector(`input[value="${removedRange.baseIP}"]`);
                if (checkbox) {
                    checkbox.checked = false;
                }
                
                // Update status
                if (selectedRanges.length === 0) {
                    updateDiscoveryStatus('No ranges selected. Please select at least one range to scan.');
                } else {
                    updateDiscoveryStatus(`${selectedRanges.length} range(s) selected`);
                }
            }
        }

        function confirmAndStartScan() {
            if (selectedRanges.length === 0) {
                alert('Please select at least one IP range to scan.');
                return;
            }

            // Calculate total IPs to scan
            const totalIPs = selectedRanges.reduce((total, range) => {
                return total + (range.end - range.start + 1);
            }, 0);
            
            const estimatedTime = Math.ceil(totalIPs / 10 * 3); // 10 IPs per batch, 3 seconds timeout

            const confirmed = confirm(
                `Ready to scan ${selectedRanges.length} IP range(s):\n\n` +
                selectedRanges.map(range => `• ${range.display}`).join('\n') +
                `\n\nThis will scan approximately ${totalIPs} IP addresses.\n` +
                `Estimated time: ${estimatedTime} seconds.\n\n` +
                `Continue with discovery?`
            );

            if (confirmed) {
                startNetworkScan();
            }
        }

        async function startNetworkScan() {
            if (!shellyDiscovery) {
                shellyDiscovery = new ShellyDiscovery();
            }

            // Update UI
            document.getElementById('rangeSelection').style.display = 'none';
            document.getElementById('startDiscoveryBtn').style.display = 'none';
            document.getElementById('stopDiscoveryBtn').style.display = 'inline-block';
            document.getElementById('discoveryProgress').style.display = 'block';
            document.getElementById('discoveredDevices').style.display = 'none';
            document.getElementById('discoveryStatus').innerHTML = `<p>🔍 Scanning ${selectedRanges.length} IP range(s) for Shelly devices...</p>`;

            // Reset discovered devices
            discoveredDevicesData = [];
            document.getElementById('devicesList').innerHTML = '';

            // Set up event handlers
            shellyDiscovery.onDeviceFound = (device) => {
                discoveredDevicesData.push(device);
                updateDiscoveredDevicesList();
                updateDiscoveryStatus(`Found ${discoveredDevicesData.length} device(s)`);
            };

            shellyDiscovery.onDiscoveryProgress = (progress) => {
                const percentage = Math.round((progress.current / progress.total) * 100);
                document.getElementById('progressFill').style.width = `${percentage}%`;
                document.getElementById('progressText').textContent = 
                    `Scanning ${progress.range}.${progress.current}/${progress.total} (Found: ${progress.found})`;
            };

            shellyDiscovery.onDiscoveryComplete = (devices) => {
                document.getElementById('startDiscoveryBtn').style.display = 'inline-block';
                document.getElementById('stopDiscoveryBtn').style.display = 'none';
                document.getElementById('discoveryProgress').style.display = 'none';
                
                if (devices.length > 0) {
                    document.getElementById('discoveredDevices').style.display = 'block';
                    updateDiscoveryStatus(`✅ Discovery complete! Found ${devices.length} Shelly device(s).`);
                } else {
                    updateDiscoveryStatus('❌ No Shelly devices found in the selected ranges. Make sure devices are powered on and connected to the same network.');
                }
            };

            // Start discovery with selected ranges
            try {
                await shellyDiscovery.discoverDevices(selectedRanges);
            } catch (error) {
                console.error('Discovery error:', error);
                updateDiscoveryStatus(`❌ Discovery failed: ${error.message}`);
                document.getElementById('rangeSelection').style.display = 'block';
                document.getElementById('startDiscoveryBtn').style.display = 'inline-block';
                document.getElementById('stopDiscoveryBtn').style.display = 'none';
                document.getElementById('discoveryProgress').style.display = 'none';
            }
        }

        function stopNetworkScan() {
            if (shellyDiscovery) {
                shellyDiscovery.stopDiscovery();
            }
            
            document.getElementById('startDiscoveryBtn').style.display = 'inline-block';
            document.getElementById('stopDiscoveryBtn').style.display = 'none';
            document.getElementById('discoveryProgress').style.display = 'none';
            updateDiscoveryStatus('🛑 Discovery stopped by user.');
        }

        function updateDiscoveryStatus(message) {
            document.getElementById('discoveryStatus').innerHTML = `<p>${message}</p>`;
        }

        function updateDiscoveredDevicesList() {
            const devicesList = document.getElementById('devicesList');
            
            if (discoveredDevicesData.length === 0) {
                devicesList.innerHTML = '<p style="color: #6c757d; font-style: italic;">No devices discovered yet...</p>';
                return;
            }

            devicesList.innerHTML = discoveredDevicesData.map(device => {
                const deviceName = device.displayName || device.name || `Device at ${device.ip}`;
                const deviceType = device.deviceType || device.type || 'Unknown Type';
                const firmware = device.firmware || device.fw || 'Unknown';
                const macAddress = device.macAddress || device.mac || 'Unknown';
                
                const compatibilityClass = device.isCompatible ? 'compatible' : 'incompatible';
                const compatibilityIcon = device.isCompatible ? '✅' : '❌';
                
                return `
                    <div class="device-card ${compatibilityClass}">
                        <div class="device-header">
                            <div class="device-name">${deviceName}</div>
                            <div class="device-type">${deviceType}</div>
                        </div>
                        <div class="device-details">
                            <div class="device-detail">
                                <div class="device-detail-label">IP Address</div>
                                <div class="device-detail-value">${device.ip}</div>
                            </div>
                            <div class="device-detail">
                                <div class="device-detail-label">MAC Address</div>
                                <div class="device-detail-value">${macAddress}</div>
                            </div>
                            <div class="device-detail">
                                <div class="device-detail-label">Firmware</div>
                                <div class="device-detail-value">${firmware}</div>
                            </div>
                            <div class="device-detail">
                                <div class="device-detail-label">Last Seen</div>
                                <div class="device-detail-value">${new Date(device.lastSeen).toLocaleString()}</div>
                            </div>
                        </div>
                        <div class="device-actions">
                            <button class="btn btn-use-device" onclick="useDevice('${device.ip}', '${deviceName}')">
                                ✅ Use This Device
                            </button>

                            <button class="btn btn-secondary" onclick="showDeviceDetails('${device.ip}')">
                                📋 Details
                            </button>
                        </div>
                    </div>
                `;
            }).join('');
        }

        function useDevice(ip, name) {
            // Set the device IP in the main form
            document.getElementById('deviceIP').value = ip;
            
            // Close the discovery modal
            closeDiscoveryModal();
            
            // Show success message
            showStatus(`Device selected: ${name} (${ip})`, 'connected');
            
            // Optional: Auto-start data collection
            const autoStart = confirm(`Device "${name}" selected!\n\nWould you like to start data collection immediately?`);
            if (autoStart) {
                startDataCollection();
            }
        }



        function showDeviceDetails(ip) {
            const device = discoveredDevicesData.find(d => d.ip === ip);
            if (!device) return;
            
            const details = Object.entries(device)
                .filter(([key, value]) => value !== null && value !== undefined && value !== '')
                .map(([key, value]) => `${key}: ${JSON.stringify(value)}`)
                .join('\n');
            
            alert(`Device Details for ${ip}:\n\n${details}`);
        }

        // Start the dashboard when page loads
        document.addEventListener('DOMContentLoaded', async () => {
            await initialize();
            checkCollectionStatus();
            
            // Add event listener for time range changes
            document.getElementById('timeRange').addEventListener('change', onTimeRangeChange);
            
            // Set up automatic status refresh every 5 seconds
            setInterval(() => {
                checkCollectionStatus();
            }, 5000);
            
            // Initialize thresholds from UI
            updateThresholds();
            
            // Initialize device filters after a short delay to ensure DeviceTracker is ready
            setTimeout(() => {
                initializeDeviceFilters();
            }, 1000);
        });

        // Power Consumption Thresholds Functions
        function updateThresholds() {
            const lowThreshold = parseFloat(document.getElementById('lowThreshold').value) || 300;
            const mediumThreshold = parseFloat(document.getElementById('mediumThreshold').value) || 1000;
            
            // Validate thresholds
            if (lowThreshold >= mediumThreshold) {
                alert('Low threshold must be less than medium threshold');
                document.getElementById('lowThreshold').value = powerThresholds.low;
                document.getElementById('mediumThreshold').value = powerThresholds.medium;
                return;
            }
            
            powerThresholds.low = lowThreshold;
            powerThresholds.medium = mediumThreshold;
            
            console.log('Updated thresholds:', powerThresholds);
            
            // Update threshold lines on all power charts
            if (powerThresholds.enabled) {
                updateThresholdLines();
            }
        }

        function toggleThresholds() {
            powerThresholds.enabled = document.getElementById('enableThresholds').checked;
            
            if (powerThresholds.enabled) {
                updateThresholdLines();
            } else {
                removeThresholdLines();
            }
        }

        function updateThresholdLines() {
            const powerCharts = ['powerAChart', 'powerBChart', 'powerCChart'];
            
            console.log('Updating threshold lines...', powerThresholds);
            
            powerCharts.forEach(chartId => {
                const chart = charts[chartId];
                if (!chart) {
                    console.warn(`Chart ${chartId} not found`);
                    return;
                }
                
                // Check if there's data that exceeds the medium threshold
                let hasDataAboveMedium = false;
                if (chart.data && chart.data.datasets && chart.data.datasets.length > 0) {
                    const dataset = chart.data.datasets[0];
                    if (dataset.data && dataset.data.length > 0) {
                        hasDataAboveMedium = dataset.data.some(point => {
                            const value = typeof point === 'object' ? point.y : point;
                            return value > powerThresholds.medium;
                        });
                    }
                }
                
                console.log(`Chart ${chartId}: hasDataAboveMedium = ${hasDataAboveMedium}`);
                
                // Ensure plugins and annotation objects exist
                if (!chart.options.plugins) {
                    chart.options.plugins = {};
                }
                if (!chart.options.plugins.annotation) {
                    chart.options.plugins.annotation = {};
                }
                if (!chart.options.plugins.annotation.annotations) {
                    chart.options.plugins.annotation.annotations = {};
                }
                
                // Remove existing threshold annotations
                Object.keys(chart.options.plugins.annotation.annotations).forEach(key => {
                    if (key.startsWith('threshold_')) {
                        delete chart.options.plugins.annotation.annotations[key];
                    }
                });
                
                // Always add LOW threshold line (green)
                chart.options.plugins.annotation.annotations.threshold_low = {
                    type: 'line',
                    yMin: powerThresholds.low,
                    yMax: powerThresholds.low,
                    borderColor: 'rgba(40, 167, 69, 0.8)',
                    borderWidth: 2,
                    borderDash: [5, 5],
                    label: {
                        content: `Low: ${powerThresholds.low}W`,
                        enabled: true,
                        position: 'end',
                        backgroundColor: 'rgba(40, 167, 69, 0.8)',
                        color: 'white',
                        font: {
                            size: 10
                        }
                    }
                };
                
                // Add MEDIUM threshold line (yellow) only if there's data above it
                if (hasDataAboveMedium) {
                    chart.options.plugins.annotation.annotations.threshold_medium = {
                        type: 'line',
                        yMin: powerThresholds.medium,
                        yMax: powerThresholds.medium,
                        borderColor: 'rgba(255, 193, 7, 0.8)',
                        borderWidth: 2,
                        borderDash: [5, 5],
                        label: {
                            content: `Medium: ${powerThresholds.medium}W`,
                            enabled: true,
                            position: 'end',
                            backgroundColor: 'rgba(255, 193, 7, 0.8)',
                            color: 'white',
                            font: {
                                size: 10
                            }
                        }
                    };
                    console.log(`Added MEDIUM threshold line to ${chartId}`);
                } else {
                    console.log(`MEDIUM threshold line hidden for ${chartId} (no data above ${powerThresholds.medium}W)`);
                }
                
                // HIGH threshold remains logic-only (no visual line)
                // High consumption is anything above medium threshold
                
                console.log(`Updated threshold lines for ${chartId}:`, Object.keys(chart.options.plugins.annotation.annotations));
                chart.update('none');
            });
        }

        function removeThresholdLines() {
            const powerCharts = ['powerAChart', 'powerBChart', 'powerCChart'];
            
            powerCharts.forEach(chartId => {
                const chart = charts[chartId];
                if (!chart) return;
                
                // Remove threshold annotations
                if (chart.options.plugins.annotation.annotations) {
                    Object.keys(chart.options.plugins.annotation.annotations).forEach(key => {
                        if (key.startsWith('threshold_')) {
                            delete chart.options.plugins.annotation.annotations[key];
                        }
                    });
                }
                
                chart.update('none');
            });
        }

        function onConnectionTypeChange() {
            const type = document.getElementById('connectionType').value;
            document.getElementById('webParams').style.display = (type === 'WEB') ? '' : 'none';
        }

        let lastConnectionType = document.getElementById('connectionType').value;

        // Restart collection if connection type changes while running
        document.getElementById('connectionType').addEventListener('change', async function() {
            const newType = this.value;
            if (isDataCollectionRunning && newType !== lastConnectionType) {
                await stopDataCollection();
                setTimeout(() => startDataCollection(), 500);
            }
            lastConnectionType = newType;
        });

        function onDeviceTypeChange() {
            const select = document.getElementById('deviceType');
            const selectedOption = select.options[select.selectedIndex];
            const defaultDeviceId = selectedOption.getAttribute('data-default-deviceid');
            if (defaultDeviceId) {
                document.getElementById('deviceId').value = defaultDeviceId;
            }
        }

        // Handle click on event start markers
        function handleEventStartClick(deviceId, originalStartTime, clickedX, clickedY) {
            console.log('Event start clicked:', { deviceId, originalStartTime, clickedX, clickedY });
            
            // Show editing dialog or enable drag mode
            showEventStartEditDialog(deviceId, originalStartTime, clickedX, clickedY);
        }
        
        // Show dialog for editing event start time
        function showEventStartEditDialog(deviceId, originalStartTime, clickedX, clickedY) {
            // Create dialog HTML
            const dialogHTML = `
                <div id="eventStartEditBackdrop" class="modal-backdrop">
                    <div id="eventStartEditDialog" class="modal-dialog" style="max-width: 500px;">
                        <div class="modal-header">
                            <h3>Edit Event Start Time</h3>
                            <button onclick="closeEventStartEditDialog()" class="close-btn">&times;</button>
                        </div>
                        <div class="modal-body">
                            <div class="form-group">
                                <label>Device:</label>
                                <span id="editDeviceName">Loading...</span>
                            </div>
                            <div class="form-group">
                                <label>Original Start Time:</label>
                                <span id="originalStartTime">${new Date(originalStartTime).toLocaleString()}</span>
                            </div>
                            <div class="form-group">
                                <label>New Start Time:</label>
                                <input type="datetime-local" id="newStartTime" value="${formatDateTimeLocal(originalStartTime)}">
                            </div>
                            <div class="form-group">
                                <label>Or click on the chart to select a new start point</label>
                                <div class="form-note">Click anywhere on the power curve to set the new event start time</div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button onclick="updateEventStartTime('${deviceId}', ${originalStartTime})" class="btn btn-primary">Update Start Time</button>
                            <button onclick="closeEventStartEditDialog()" class="btn btn-secondary">Cancel</button>
                        </div>
                    </div>
                </div>
            `;
            
            // Remove existing dialog if any
            const existingDialog = document.getElementById('eventStartEditDialog');
            if (existingDialog) existingDialog.remove();
            const existingBackdrop = document.getElementById('eventStartEditBackdrop');
            if (existingBackdrop) existingBackdrop.remove();
            
            // Add dialog to page
            document.body.insertAdjacentHTML('beforeend', dialogHTML);
            
            // Load device name
            const config = deviceTracker.getEnvironmentConfig();
            const device = config?.devices?.find(d => d.id === deviceId);
            document.getElementById('editDeviceName').textContent = device ? device.name : 'Unknown Device';
            
            // Enable chart click mode for selecting new start point
            enableEventStartSelectionMode(deviceId, originalStartTime);
        }
        
        // Enable chart click mode for selecting new event start point
        function enableEventStartSelectionMode(deviceId, originalStartTime) {
            // Add visual indicator that we're in selection mode
            showStatus('Click on the chart to select a new event start point', 'info');
            
            // Store current selection state
            window.eventStartSelectionMode = {
                active: true,
                deviceId: deviceId,
                originalStartTime: originalStartTime
            };
            
            // Add click handlers to power charts
            ['powerAChart', 'powerBChart', 'powerCChart'].forEach(chartId => {
                const chart = charts[chartId];
                if (chart) {
                    chart.canvas.style.cursor = 'crosshair';
                    chart.canvas.addEventListener('click', handleChartClickForEventStart);
                }
            });
        }
        
        // Handle chart click for event start selection
        function handleChartClickForEventStart(event) {
            if (!window.eventStartSelectionMode || !window.eventStartSelectionMode.active) return;
            
            const chartId = event.target.id.replace('Chart', 'Chart');
            const chart = charts[chartId];
            if (!chart) return;
            
            // Get the clicked time value
            const canvasPosition = Chart.helpers.getRelativePosition(event, chart);
            const newStartTime = chart.scales.x.getValueForPixel(canvasPosition.x);
            
            if (newStartTime) {
                // Update the datetime input
                document.getElementById('newStartTime').value = formatDateTimeLocal(newStartTime);
                
                // Visual feedback
                showStatus(`Selected new start time: ${new Date(newStartTime).toLocaleString()}`, 'success');
            }
        }
        
        // Update event start time
        function updateEventStartTime(deviceId, originalStartTime) {
            const newStartTimeInput = document.getElementById('newStartTime');
            const newStartTime = new Date(newStartTimeInput.value).getTime();
            
            if (!newStartTime || isNaN(newStartTime)) {
                alert('Please select a valid start time');
                return;
            }
            
            // Find and update the device event
            const deviceEvents = deviceTracker.deviceEvents || [];
            const eventIndex = deviceEvents.findIndex(event => 
                event.deviceId === deviceId && 
                Math.abs(event.startTime - originalStartTime) < 1000 // Within 1 second
            );
            
            if (eventIndex !== -1) {
                const event = deviceEvents[eventIndex];
                const oldDuration = event.duration;
                
                // Update start time and recalculate duration
                event.startTime = newStartTime;
                event.duration = event.endTime - newStartTime;
                
                // Save changes
                deviceTracker.saveTrackingData();
                
                // Refresh charts
                refreshDeviceAnnotations();
                
                // Close dialog
                closeEventStartEditDialog();
                
                showStatus(`Event start time updated. Duration changed from ${(oldDuration / 60000).toFixed(1)} to ${(event.duration / 60000).toFixed(1)} minutes`, 'success');
            } else {
                alert('Could not find the event to update');
            }
        }
        
        // Close event start edit dialog
        function closeEventStartEditDialog() {
            const dialog = document.getElementById('eventStartEditDialog');
            const backdrop = document.getElementById('eventStartEditBackdrop');
            
            if (dialog) dialog.remove();
            if (backdrop) backdrop.remove();
            
            // Disable selection mode
            if (window.eventStartSelectionMode) {
                window.eventStartSelectionMode.active = false;
                
                // Remove click handlers and restore cursor
                ['powerAChart', 'powerBChart', 'powerCChart'].forEach(chartId => {
                    const chart = charts[chartId];
                    if (chart) {
                        chart.canvas.style.cursor = 'default';
                        chart.canvas.removeEventListener('click', handleChartClickForEventStart);
                    }
                });
            }
        }
        
        // Helper function to format date for datetime-local input
        function formatDateTimeLocal(timestamp) {
            const date = new Date(timestamp);
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            const hours = String(date.getHours()).padStart(2, '0');
            const minutes = String(date.getMinutes()).padStart(2, '0');
            
            return `${year}-${month}-${day}T${hours}:${minutes}`;
        }
        
        // Set event start from a NORMAL point - now uses universal event association
        function setEventStart(index) {
            console.log('Setting event start from NORMAL point at index:', index);
            
            const data = currentModalData.data;
            const point = data[index];
            
            if (!point) {
                console.error('No data point found at index:', index);
                return;
            }
            
            // Use the universal event association dialog instead
            // Create a mock chartId for the details dialog context
            const mockChartId = `details-${currentModalData.phase}-power`;
            handleDataPointDoubleClick(mockChartId, index, point);
        }
        
        // Show dialog for selecting device for event start
        function showEventStartDeviceDialog(point, index) {
            if (!deviceTracker) {
                alert('Device tracker not available');
                return;
            }
            
            const config = deviceTracker.getEnvironmentConfig();
            if (!config || !config.devices || config.devices.length === 0) {
                alert('No devices configured. Please add devices first.');
                return;
            }
            
            // Create dialog HTML
            const deviceOptions = config.devices.map(device => 
                `<option value="${device.id}">${device.name}</option>`
            ).join('');
            
            const dialogHTML = `
                <div id="eventStartDeviceBackdrop" class="modal-backdrop">
                    <div id="eventStartDeviceDialog" class="modal-dialog" style="max-width: 500px;">
                        <div class="modal-header">
                            <h3>Set Event Start</h3>
                            <button onclick="closeEventStartDeviceDialog()" class="close-btn">&times;</button>
                        </div>
                        <div class="modal-body">
                            <div class="form-group">
                                <label>Time:</label>
                                <span>${new Date(point.x).toLocaleString()}</span>
                            </div>
                            <div class="form-group">
                                <label>Power:</label>
                                <span>${point.y.toFixed(2)} W</span>
                            </div>
                            <div class="form-group">
                                <label>Phase:</label>
                                <span>${currentModalData.phase}</span>
                            </div>
                            <div class="form-group">
                                <label>Select Device:</label>
                                <select id="eventStartDeviceSelect" class="form-control">
                                    <option value="">-- Select Device --</option>
                                    ${deviceOptions}
                                </select>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button onclick="createEventStart(${index})" class="btn btn-primary">Create Event Start</button>
                            <button onclick="closeEventStartDeviceDialog()" class="btn btn-secondary">Cancel</button>
                        </div>
                    </div>
                </div>
            `;
            
            // Remove existing dialog if any
            const existingDialog = document.getElementById('eventStartDeviceDialog');
            if (existingDialog) existingDialog.remove();
            const existingBackdrop = document.getElementById('eventStartDeviceBackdrop');
            if (existingBackdrop) existingBackdrop.remove();
            
            // Add dialog to page
            document.body.insertAdjacentHTML('beforeend', dialogHTML);
        }
        
        // Create event start from selected device
        function createEventStart(index) {
            const deviceSelect = document.getElementById('eventStartDeviceSelect');
            const deviceId = deviceSelect.value;
            
            if (!deviceId) {
                alert('Please select a device');
                return;
            }
            
            const data = currentModalData.data;
            const point = data[index];
            
            if (!point) {
                console.error('No data point found at index:', index);
                return;
            }
            
            // Create event start
            const startEvent = {
                type: 'start',
                phase: currentModalData.phase,
                powerDelta: 0, // No power change for manual start
                timestamp: point.x,
                readings: getCurrentReadings(point.x)
            };
            
            // Record the device association (this is what makes it show up in the UI)
            deviceTracker.recordDeviceAssociation(startEvent, deviceId, 1.0);
            
            // Record the event start (without end event for now)
            deviceTracker.recordDeviceEvent(deviceId, startEvent, null, 'manual_start');
            
            // Save and refresh
            deviceTracker.saveTrackingData();
            refreshDeviceAnnotations();
            
            // Refresh the table to show the new association
            if (currentModalData) {
                populateRecordsTableWithTracking(
                    currentModalData.data, 
                    currentModalData.peaks, 
                    currentModalData.valleys, 
                    currentModalData.unit
                );
            }
            
            // Close dialog
            closeEventStartDeviceDialog();
            
            // Get device name for feedback
            const config = deviceTracker.getEnvironmentConfig();
            const device = config?.devices?.find(d => d.id === deviceId);
            const deviceName = device ? device.name : 'Unknown Device';
            
            showStatus(`✅ Created event start for ${deviceName} at ${new Date(point.x).toLocaleTimeString()}`, 'success');
        }
        
        // Close event start device dialog
        function closeEventStartDeviceDialog() {
            const dialog = document.getElementById('eventStartDeviceDialog');
            const backdrop = document.getElementById('eventStartDeviceBackdrop');
            
            if (dialog) dialog.remove();
            if (backdrop) backdrop.remove();
        }
        
        // Global variables for universal event association
        let selectedEventType = null;
        let universalEventData = null;
        
        // Select event type for universal association
        function selectEventType(eventType) {
            console.log('selectEventType called with:', eventType, 'previous value:', selectedEventType);
            selectedEventType = eventType;
            
            // Update button styles
            document.querySelectorAll('#eventTypeStart, #eventTypePeak, #eventTypeEnd').forEach(btn => {
                btn.style.background = 'white';
                btn.style.color = btn.id === `eventType${eventType.charAt(0).toUpperCase() + eventType.slice(1)}` ? 
                    (eventType === 'start' ? '#28a745' : eventType === 'peak' ? '#fd7e14' : '#dc3545') : 
                    (btn.id === 'eventTypeStart' ? '#28a745' : btn.id === 'eventTypePeak' ? '#fd7e14' : '#dc3545');
            });
            
            // Update selected button
            const selectedBtn = document.getElementById(`eventType${eventType.charAt(0).toUpperCase() + eventType.slice(1)}`);
            if (selectedBtn) {
                selectedBtn.style.background = eventType === 'start' ? '#28a745' : eventType === 'peak' ? '#fd7e14' : '#dc3545';
                selectedBtn.style.color = 'white';
            }
            
            // Show selected event type info
            const infoDiv = document.getElementById('selectedEventTypeInfo');
            const textSpan = document.getElementById('selectedEventTypeText');
            if (infoDiv && textSpan) {
                infoDiv.style.display = 'block';
                textSpan.textContent = eventType.toUpperCase();
            }
            
            // Enable associate button if device is also selected
            checkAssociateButtonState();
        }
        
        // Check if associate button should be enabled
        function checkAssociateButtonState() {
            const deviceSelect = document.getElementById('universalDeviceSelect');
            const associateButton = document.getElementById('associateButton');
            
            if (deviceSelect && associateButton) {
                const deviceSelected = deviceSelect.value !== '';
                const eventTypeSelected = selectedEventType !== null;
                
                console.log('checkAssociateButtonState:', {
                    deviceSelected,
                    eventTypeSelected,
                    selectedEventType,
                    deviceValue: deviceSelect.value
                });
                
                if (deviceSelected && eventTypeSelected) {
                    associateButton.style.opacity = '1';
                    associateButton.style.pointerEvents = 'auto';
                    associateButton.disabled = false;
                } else {
                    associateButton.style.opacity = '0.5';
                    associateButton.style.pointerEvents = 'none';
                    associateButton.disabled = true;
                }
            }
        }
        
        // Associate universal event
        function associateUniversalEvent() {
            const deviceSelect = document.getElementById('universalDeviceSelect');
            const deviceId = deviceSelect.value;
            
            if (!deviceId || !selectedEventType || !universalEventData) {
                alert('Please select both a device and an event type.');
                return;
            }
            
            // Create the association
            const event = {
                type: selectedEventType,
                phase: universalEventData.phase,
                powerDelta: universalEventData.eventPowerDelta,
                timestamp: universalEventData.dataPoint.x,
                readings: getCurrentReadings(universalEventData.dataPoint.x)
            };
            
            // Record the device association
            deviceTracker.recordDeviceAssociation(event, deviceId, 1.0);
            
            // For start events, also create a device event
            if (selectedEventType === 'start') {
                deviceTracker.recordDeviceEvent(deviceId, event, null, 'manual_start');
            }
            
            // Save and refresh
            deviceTracker.saveTrackingData();
            refreshDeviceAnnotations();
            
            // Check if we need to refresh the details dialog table
            if (universalEventData.isFromDetailsDialog && currentModalData) {
                populateRecordsTableWithTracking(
                    currentModalData.data, 
                    currentModalData.peaks, 
                    currentModalData.valleys, 
                    currentModalData.unit
                );
            }
            
            // Close dialog
            closeUniversalAssociationDialog();
            
            // Get device name for feedback
            const config = deviceTracker.getEnvironmentConfig();
            const device = config?.devices?.find(d => d.id === deviceId);
            const deviceName = device ? device.name : 'Unknown Device';
            
            showStatus(`✅ Associated ${selectedEventType.toUpperCase()} event with ${deviceName}`, 'success');
        }
        
        // Close universal association dialog
        function closeUniversalAssociationDialog() {
            const dialog = document.getElementById('universalAssociationDialog');
            const backdrop = document.getElementById('universalAssociationBackdrop');
            
            if (dialog) dialog.remove();
            if (backdrop) backdrop.remove();
            
            // Reset global variables
            selectedEventType = null;
            universalEventData = null;
        }
        
        // Complete a manual start event when a valley is associated
        function completeManualStartEvent(deviceId, valleyEvent) {
            if (!deviceTracker) return;
            
            console.log('Looking for manual start event to complete for device:', deviceId);
            
            // Find manual start events for this device that don't have an end time
            const deviceEvents = deviceTracker.deviceEvents || [];
            const manualStarts = deviceEvents.filter(event => 
                event.deviceId === deviceId && 
                event.eventType === 'manual_start' && 
                event.endTime === null &&
                event.phase === valleyEvent.phase
            );
            
            if (manualStarts.length === 0) {
                console.log('No manual start events found for device:', deviceId);
                return;
            }
            
            // Find the most recent manual start before this valley
            const recentManualStart = manualStarts
                .filter(start => start.startTime < valleyEvent.timestamp)
                .sort((a, b) => b.startTime - a.startTime)[0];
            
            if (!recentManualStart) {
                console.log('No manual start event found before valley for device:', deviceId);
                return;
            }
            
            console.log('Found manual start event to complete:', recentManualStart);
            
            // Update the manual start event to include the end time
            recentManualStart.endTime = valleyEvent.timestamp;
            recentManualStart.duration = valleyEvent.timestamp - recentManualStart.startTime;
            recentManualStart.eventType = 'usage'; // Change from manual_start to usage
            recentManualStart.source = 'manual_completed';
            
            // Save the updated event
            deviceTracker.saveTrackingData();
            
            console.log(`✅ Completed manual start event with valley. Duration: ${(recentManualStart.duration / 60000).toFixed(1)} minutes`);
        }
        
        // Handle click on event end markers
        function handleEventEndClick(deviceId, originalEndTime, clickedX, clickedY) {
            console.log('Event end clicked:', { deviceId, originalEndTime, clickedX, clickedY });
            
            // Show editing dialog for end time
            showEventEndEditDialog(deviceId, originalEndTime, clickedX, clickedY);
        }
        
        // Show dialog for editing event end time
        function showEventEndEditDialog(deviceId, originalEndTime, clickedX, clickedY) {
            // Create dialog HTML
            const dialogHTML = `
                <div id="eventEndEditBackdrop" class="modal-backdrop">
                    <div id="eventEndEditDialog" class="modal-dialog" style="max-width: 500px;">
                        <div class="modal-header">
                            <h3>Edit Event End Time</h3>
                            <button onclick="closeEventEndEditDialog()" class="close-btn">&times;</button>
                        </div>
                        <div class="modal-body">
                            <div class="form-group">
                                <label>Device:</label>
                                <span id="editEndDeviceName">Loading...</span>
                            </div>
                            <div class="form-group">
                                <label>Original End Time:</label>
                                <span id="originalEndTime">${new Date(originalEndTime).toLocaleString()}</span>
                            </div>
                            <div class="form-group">
                                <label>New End Time:</label>
                                <input type="datetime-local" id="newEndTime" value="${formatDateTimeLocal(originalEndTime)}">
                            </div>
                            <div class="form-group">
                                <label>Or click on the chart to select a new end point</label>
                                <div class="form-note">Click anywhere on the power curve to set the new event end time</div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button onclick="updateEventEndTime('${deviceId}', ${originalEndTime})" class="btn btn-primary">Update End Time</button>
                            <button onclick="closeEventEndEditDialog()" class="btn btn-secondary">Cancel</button>
                        </div>
                    </div>
                </div>
            `;
            
            // Remove existing dialog if any
            const existingDialog = document.getElementById('eventEndEditDialog');
            if (existingDialog) existingDialog.remove();
            const existingBackdrop = document.getElementById('eventEndEditBackdrop');
            if (existingBackdrop) existingBackdrop.remove();
            
            // Add dialog to page
            document.body.insertAdjacentHTML('beforeend', dialogHTML);
            
            // Load device name
            const config = deviceTracker.getEnvironmentConfig();
            const device = config?.devices?.find(d => d.id === deviceId);
            document.getElementById('editEndDeviceName').textContent = device ? device.name : 'Unknown Device';
            
            // Enable chart click mode for selecting new end point
            enableEventEndSelectionMode(deviceId, originalEndTime);
        }
        
        // Enable chart click mode for selecting new event end point
        function enableEventEndSelectionMode(deviceId, originalEndTime) {
            // Add visual indicator that we're in selection mode
            showStatus('Click on the chart to select a new event end point', 'info');
            
            // Store current selection state
            window.eventEndSelectionMode = {
                active: true,
                deviceId: deviceId,
                originalEndTime: originalEndTime
            };
            
            // Add click handlers to power charts
            ['powerAChart', 'powerBChart', 'powerCChart'].forEach(chartId => {
                const chart = charts[chartId];
                if (chart) {
                    chart.canvas.style.cursor = 'crosshair';
                    chart.canvas.addEventListener('click', handleChartClickForEventEnd);
                }
            });
        }
        
        // Handle chart click for event end selection
        function handleChartClickForEventEnd(event) {
            if (!window.eventEndSelectionMode || !window.eventEndSelectionMode.active) return;
            
            const chartId = event.target.id.replace('Chart', 'Chart');
            const chart = charts[chartId];
            if (!chart) return;
            
            // Get the clicked time value
            const canvasPosition = Chart.helpers.getRelativePosition(event, chart);
            const newEndTime = chart.scales.x.getValueForPixel(canvasPosition.x);
            
            if (newEndTime) {
                // Update the datetime input
                document.getElementById('newEndTime').value = formatDateTimeLocal(newEndTime);
                
                // Visual feedback
                showStatus(`Selected new end time: ${new Date(newEndTime).toLocaleString()}`, 'success');
            }
        }
        
        // Update event end time
        function updateEventEndTime(deviceId, originalEndTime) {
            const newEndTimeInput = document.getElementById('newEndTime');
            const newEndTime = new Date(newEndTimeInput.value).getTime();
            
            if (!newEndTime || isNaN(newEndTime)) {
                alert('Please select a valid end time');
                return;
            }
            
            // Find and update the device event
            const deviceEvents = deviceTracker.deviceEvents || [];
            const eventIndex = deviceEvents.findIndex(event => 
                event.deviceId === deviceId && 
                Math.abs(event.endTime - originalEndTime) < 1000 // Within 1 second
            );
            
            if (eventIndex !== -1) {
                const event = deviceEvents[eventIndex];
                const oldDuration = event.duration;
                
                // Update end time and recalculate duration
                event.endTime = newEndTime;
                event.duration = newEndTime - event.startTime;
                
                // Save changes
                deviceTracker.saveTrackingData();
                
                // Refresh charts
                refreshDeviceAnnotations();
                
                // Close dialog
                closeEventEndEditDialog();
                
                showStatus(`Event end time updated. Duration changed from ${(oldDuration / 60000).toFixed(1)} to ${(event.duration / 60000).toFixed(1)} minutes`, 'success');
            } else {
                alert('Could not find the event to update');
            }
        }
        
        // Close event end edit dialog
        function closeEventEndEditDialog() {
            const dialog = document.getElementById('eventEndEditDialog');
            const backdrop = document.getElementById('eventEndEditBackdrop');
            
            if (dialog) dialog.remove();
            if (backdrop) backdrop.remove();
            
            // Disable selection mode
            if (window.eventEndSelectionMode) {
                window.eventEndSelectionMode.active = false;
                
                // Remove click handlers and restore cursor
                ['powerAChart', 'powerBChart', 'powerCChart'].forEach(chartId => {
                    const chart = charts[chartId];
                    if (chart) {
                        chart.canvas.style.cursor = 'default';
                        chart.canvas.removeEventListener('click', handleChartClickForEventEnd);
                    }
                });
            }
        }

        // ===== DEVICE FILTER FUNCTIONALITY =====
        
        // Track which devices are currently hidden
        let hiddenDevices = new Set();
        
        // Initialize device filters
        function initializeDeviceFilters() {
            if (!deviceTracker) {
                console.warn('DeviceTracker not available for filters');
                return;
            }
            
            const config = deviceTracker.getEnvironmentConfig();
            if (!config || !config.devices || config.devices.length === 0) {
                // Hide filter controls if no devices
                document.getElementById('deviceFilterControls').style.display = 'none';
                return;
            }
            
            // Populate device filter buttons (will only show devices with events)
            populateDeviceFilterButtons(config.devices);
        }
        
        // Get devices that have events in the current graph data
        function getDevicesWithEvents() {
            if (!deviceTracker) return [];
            
            const config = deviceTracker.getEnvironmentConfig();
            if (!config || !config.devices) return [];
            
            // Get all device associations from the current time range
            const associations = deviceTracker.deviceAssociations || [];
            const deviceEvents = deviceTracker.deviceEvents || [];
            
            // Get current time range from charts (if available)
            let currentTimeRange = null;
            const powerCharts = ['powerAChart', 'powerBChart', 'powerCChart'];
            for (const chartId of powerCharts) {
                if (charts[chartId] && charts[chartId].data.datasets[0].data.length > 0) {
                    const data = charts[chartId].data.datasets[0].data;
                    currentTimeRange = {
                        start: data[0].x,
                        end: data[data.length - 1].x
                    };
                    break;
                }
            }
            
            // If no time range available, return all devices
            if (!currentTimeRange) {
                return config.devices;
            }
            
            // Find devices that have events in the current time range
            const devicesWithEvents = new Set();
            
            // Check device associations
            associations.forEach(assoc => {
                if (assoc.timestamp >= currentTimeRange.start && assoc.timestamp <= currentTimeRange.end) {
                    devicesWithEvents.add(assoc.deviceId);
                }
            });
            
            // Check device events
            deviceEvents.forEach(event => {
                if (event.startTime >= currentTimeRange.start && event.startTime <= currentTimeRange.end) {
                    devicesWithEvents.add(event.deviceId);
                }
            });
            
            // Return only devices that have events in the current time range
            return config.devices.filter(device => devicesWithEvents.has(device.id));
        }
        
        // Populate device filter buttons
        function populateDeviceFilterButtons(devices) {
            const container = document.getElementById('deviceFilterButtons');
            container.innerHTML = '';
            
            // Get only devices that have events in the current graph data
            const devicesWithEvents = getDevicesWithEvents();
            
            if (devicesWithEvents.length === 0) {
                // Hide filter controls if no devices have events
                document.getElementById('deviceFilterControls').style.display = 'none';
                return;
            }
            
            // Show filter controls
            document.getElementById('deviceFilterControls').style.display = 'block';
            
            devicesWithEvents.forEach(device => {
                const isHidden = hiddenDevices.has(device.id);
                const button = document.createElement('button');
                button.className = `device-filter-btn ${isHidden ? 'hidden' : 'active'}`;
                button.setAttribute('data-device-id', device.id);
                button.onclick = () => toggleDeviceFilter(device.id);
                
                const colorIndicator = document.createElement('div');
                colorIndicator.className = 'device-color-indicator';
                colorIndicator.style.backgroundColor = device.color || '#cccccc';
                
                const deviceName = document.createElement('span');
                deviceName.textContent = device.name;
                
                const statusIcon = document.createElement('span');
                statusIcon.textContent = isHidden ? '👁️‍🗨️' : '👁️';
                statusIcon.style.fontSize = '12px';
                
                button.appendChild(colorIndicator);
                button.appendChild(deviceName);
                button.appendChild(statusIcon);
                
                container.appendChild(button);
            });
        }
        
        // Toggle device filter
        function toggleDeviceFilter(deviceId) {
            const isHidden = hiddenDevices.has(deviceId);
            
            if (isHidden) {
                hiddenDevices.delete(deviceId);
            } else {
                hiddenDevices.add(deviceId);
            }
            
            // Update button appearance
            updateDeviceFilterButton(deviceId);
            
            // Apply filter to charts
            applyDeviceFilters();
        }
        
        // Update device filter button appearance
        function updateDeviceFilterButton(deviceId) {
            // Update buttons in main filter area
            const buttons = document.querySelectorAll(`[data-device-id="${deviceId}"]`);
            
            buttons.forEach(button => {
                const isHidden = hiddenDevices.has(deviceId);
                const statusIcon = button.querySelector('span:last-child');
                
                if (isHidden) {
                    button.classList.remove('active');
                    button.classList.add('hidden');
                    statusIcon.textContent = '👁️‍🗨️';
                } else {
                    button.classList.remove('hidden');
                    button.classList.add('active');
                    statusIcon.textContent = '👁️';
                }
            });
        }
        
        // Show all devices
        function showAllDevices() {
            hiddenDevices.clear();
            
            // Update all buttons
            document.querySelectorAll('.device-filter-btn').forEach(button => {
                const deviceId = button.getAttribute('data-device-id');
                updateDeviceFilterButton(deviceId);
            });
            
            // Apply filter to charts
            applyDeviceFilters();
        }
        
        // Hide all devices
        function hideAllDevices() {
            const config = deviceTracker?.getEnvironmentConfig();
            if (!config || !config.devices) return;
            
            // Add all devices to hidden set
            config.devices.forEach(device => {
                hiddenDevices.add(device.id);
            });
            
            // Update all buttons
            document.querySelectorAll('.device-filter-btn').forEach(button => {
                const deviceId = button.getAttribute('data-device-id');
                updateDeviceFilterButton(deviceId);
            });
            
            // Apply filter to charts
            applyDeviceFilters();
        }
        
        // Apply device filters to charts
        function applyDeviceFilters() {
            ['powerAChart', 'powerBChart', 'powerCChart'].forEach(chartId => {
                if (charts[chartId]) {
                    filterChartByDevices(chartId);
                    
                    // Force legend refresh after applying filters
                    refreshChartLegend(chartId);
                    charts[chartId].update('active');
                }
            });
            
            // Update status
            const hiddenCount = hiddenDevices.size;
            const totalCount = document.querySelectorAll('.device-filter-btn').length;
            const visibleCount = totalCount - hiddenCount;
            
            showStatus(`Device filter applied: ${visibleCount}/${totalCount} devices visible`, 'connected');
        }
        
        // Filter chart annotations and fills by devices
        function filterChartByDevices(chartId) {
            const chart = charts[chartId];
            if (!chart || !chart.options.plugins || !chart.options.plugins.annotation) {
                return;
            }
            
            const annotations = chart.options.plugins.annotation.annotations;
            const config = deviceTracker?.getEnvironmentConfig();
            
            if (!config || !config.devices) return;
            
            // Filter device annotations (labels)
            Object.keys(annotations).forEach(annotationId => {
                const annotation = annotations[annotationId];
                
                if (annotationId.startsWith('device_')) {
                    // Find which device this annotation belongs to
                    const deviceName = annotation.content;
                    const device = config.devices.find(d => d.name === deviceName || deviceName.includes(d.name));
                    
                    if (device && hiddenDevices.has(device.id)) {
                        annotation.display = false;
                    } else {
                        annotation.display = true;
                    }
                }
                
                // Filter event start/end markers
                if (annotationId.startsWith('event_start_') || annotationId.startsWith('event_end_')) {
                    // Get the event index from annotation ID
                    const eventIndex = parseInt(annotationId.split('_')[2]);
                    const phase = chartId.includes('A') ? 'A' : chartId.includes('B') ? 'B' : 'C';
                    
                    // Get device events for this phase
                    const deviceEvents = deviceTracker.deviceEvents || [];
                    const phaseEvents = deviceEvents.filter(event => 
                        event.phase === phase && 
                        event.startTime && 
                        event.endTime && 
                        event.deviceId
                    );
                    
                    if (phaseEvents[eventIndex]) {
                        const event = phaseEvents[eventIndex];
                        if (hiddenDevices.has(event.deviceId)) {
                            annotation.display = false;
                        } else {
                            annotation.display = true;
                        }
                    }
                }
            });
            
            // Filter chart datasets (curve fills)
            if (chart.data.datasets.length > 2) { // Has device event fills
                chart.data.datasets.forEach((dataset, index) => {
                    if (index > 1 && dataset.deviceId) { // Skip main data and interpolated curve
                        if (hiddenDevices.has(dataset.deviceId)) {
                            dataset.hidden = true;
                        } else {
                            dataset.hidden = false;
                        }
                    }
                });
            }
        }
        
        // Refresh device filters when data changes
        function refreshDeviceFilters() {
            // Re-initialize filters with current device list
            initializeDeviceFilters();
            
            // Re-apply current filter state
            applyDeviceFilters();
            
            // Update status to show how many devices have events
            const devicesWithEvents = getDevicesWithEvents();
            if (devicesWithEvents.length > 0) {
                showStatus(`Device filters updated: ${devicesWithEvents.length} device(s) with events in current time range`, 'connected');
            } else {
                showStatus('No devices with events found in current time range', 'info');
            }
        }
        
        // Call initialize device filters when the page loads and when device tracking is ready
        let deviceFilterInitialized = false;
        
        // Override the existing refreshDeviceAnnotations function to include filter refresh
        const originalRefreshDeviceAnnotations = refreshDeviceAnnotations;
        refreshDeviceAnnotations = function() {
            originalRefreshDeviceAnnotations();
            
            // Initialize filters if not done yet
            if (!deviceFilterInitialized) {
                setTimeout(() => {
                    initializeDeviceFilters();
                    deviceFilterInitialized = true;
                }, 100);
            } else {
                // Just refresh the filter state
                applyDeviceFilters();
            }
        };
    </script>
</body>
</html> 